// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210806.1

#pragma once
#ifndef WINRT_Microsoft_UI_Composition_Experimental_H
#define WINRT_Microsoft_UI_Composition_Experimental_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.210806.1"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.210806.1"
#include "winrt/Microsoft.UI.Composition.h"
#include "winrt/impl/Microsoft.UI.2.h"
#include "winrt/impl/Microsoft.UI.Composition.2.h"
#include "winrt/impl/Microsoft.UI.Dispatching.2.h"
#include "winrt/impl/Microsoft.UI.Input.Experimental.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.Foundation.Numerics.2.h"
#include "winrt/impl/Windows.Graphics.2.h"
#include "winrt/impl/Windows.UI.2.h"
#include "winrt/impl/Microsoft.UI.Composition.Experimental.2.h"
namespace winrt::impl
{
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float2) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContent<D>::ActualSize() const
    {
        winrt::Windows::Foundation::Numerics::float2 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent)->get_ActualSize(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::IInspectable) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContent<D>::AppData() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent)->get_AppData(&value));
        return winrt::Windows::Foundation::IInspectable{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContent<D>::AppData(winrt::Windows::Foundation::IInspectable const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent)->put_AppData(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::Compositor) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContent<D>::Compositor() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent)->get_Compositor(&value));
        return winrt::Microsoft::UI::Composition::Compositor{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Dispatching::DispatcherQueue) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContent<D>::DispatcherQueue() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent)->get_DispatcherQueue(&value));
        return winrt::Microsoft::UI::Dispatching::DispatcherQueue{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(uint64_t) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContent<D>::Id() const
    {
        uint64_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent)->get_Id(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpInputSite) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContent<D>::InputSite() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent)->get_InputSite(&value));
        return winrt::Microsoft::UI::Input::Experimental::ExpInputSite{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContent<D>::IsContentVisible() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent)->get_IsContentVisible(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContent<D>::IsContentVisible(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent)->put_IsContentVisible(value));
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContent<D>::IsHitTestAlways() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent)->get_IsHitTestAlways(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContent<D>::IsHitTestAlways(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent)->put_IsHitTestAlways(value));
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContent<D>::IsSiteVisible() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent)->get_IsSiteVisible(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float3) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContent<D>::Orientation() const
    {
        winrt::Windows::Foundation::Numerics::float3 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent)->get_Orientation(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContent<D>::RasterizationScale() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent)->get_RasterizationScale(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float2) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContent<D>::RequestedSize() const
    {
        winrt::Windows::Foundation::Numerics::float2 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent)->get_RequestedSize(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContent<D>::RequestedSize(winrt::Windows::Foundation::Numerics::float2 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent)->put_RequestedSize(impl::bind_in(value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::Visual) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContent<D>::Root() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent)->get_Root(&value));
        return winrt::Microsoft::UI::Composition::Visual{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContent<D>::Root(winrt::Microsoft::UI::Composition::Visual const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent)->put_Root(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContent<D>::TopLevelHost() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent)->get_TopLevelHost(&value));
        return winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::CompositionNotificationDeferral) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContent<D>::CreateStateChangedDeferral() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent)->CreateStateChangedDeferral(&result));
        return winrt::Microsoft::UI::Composition::CompositionNotificationDeferral{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContent<D>::AutomationProviderRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContent, winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentAutomationProviderRequestedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent)->add_AutomationProviderRequested(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Composition_Experimental_IExpCompositionContent<D>::AutomationProviderRequested_revoker consume_Microsoft_UI_Composition_Experimental_IExpCompositionContent<D>::AutomationProviderRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContent, winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentAutomationProviderRequestedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, AutomationProviderRequested_revoker>(this, AutomationProviderRequested(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContent<D>::AutomationProviderRequested(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent)->remove_AutomationProviderRequested(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContent<D>::Closed(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContent, winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent)->add_Closed(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Composition_Experimental_IExpCompositionContent<D>::Closed_revoker consume_Microsoft_UI_Composition_Experimental_IExpCompositionContent<D>::Closed(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContent, winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, Closed_revoker>(this, Closed(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContent<D>::Closed(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent)->remove_Closed(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContent<D>::StateChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContent, winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent)->add_StateChanged(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Composition_Experimental_IExpCompositionContent<D>::StateChanged_revoker consume_Microsoft_UI_Composition_Experimental_IExpCompositionContent<D>::StateChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContent, winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, StateChanged_revoker>(this, StateChanged(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContent<D>::StateChanged(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent)->remove_StateChanged(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::IInspectable) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContentAutomationProviderRequestedEventArgs<D>::AutomationProvider() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentAutomationProviderRequestedEventArgs)->get_AutomationProvider(&value));
        return winrt::Windows::Foundation::IInspectable{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContentAutomationProviderRequestedEventArgs<D>::AutomationProvider(winrt::Windows::Foundation::IInspectable const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentAutomationProviderRequestedEventArgs)->put_AutomationProvider(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContentAutomationProviderRequestedEventArgs<D>::Handled() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentAutomationProviderRequestedEventArgs)->get_Handled(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContentAutomationProviderRequestedEventArgs<D>::Handled(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentAutomationProviderRequestedEventArgs)->put_Handled(value));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float2) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContentSite<D>::ActualSize() const
    {
        winrt::Windows::Foundation::Numerics::float2 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSite)->get_ActualSize(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContentSite<D>::ActualSize(winrt::Windows::Foundation::Numerics::float2 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSite)->put_ActualSize(impl::bind_in(value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::Compositor) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContentSite<D>::Compositor() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSite)->get_Compositor(&value));
        return winrt::Microsoft::UI::Composition::Compositor{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Dispatching::DispatcherQueue) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContentSite<D>::DispatcherQueue() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSite)->get_DispatcherQueue(&value));
        return winrt::Microsoft::UI::Dispatching::DispatcherQueue{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContentSite<D>::IsSiteVisible() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSite)->get_IsSiteVisible(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContentSite<D>::IsSiteVisible(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSite)->put_IsSiteVisible(value));
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContentSite<D>::RasterizationScale() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSite)->get_RasterizationScale(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContentSite<D>::RasterizationScale(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSite)->put_RasterizationScale(value));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float2) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContentSite<D>::RequestedSize() const
    {
        winrt::Windows::Foundation::Numerics::float2 value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSite)->get_RequestedSize(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::Visual) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContentSite<D>::SiteVisual() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSite)->get_SiteVisual(&value));
        return winrt::Microsoft::UI::Composition::Visual{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContentSite<D>::TopLevelHost() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSite)->get_TopLevelHost(&value));
        return winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContentSite<D>::TopLevelHost(winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSite)->put_TopLevelHost(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::CompositionNotificationDeferral) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContentSite<D>::TryCreateContentDeferral() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSite)->TryCreateContentDeferral(&result));
        return winrt::Microsoft::UI::Composition::CompositionNotificationDeferral{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContentSite<D>::ContentRequestsChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentSite, winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentSiteEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSite)->add_ContentRequestsChanged(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Composition_Experimental_IExpCompositionContentSite<D>::ContentRequestsChanged_revoker consume_Microsoft_UI_Composition_Experimental_IExpCompositionContentSite<D>::ContentRequestsChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentSite, winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentSiteEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, ContentRequestsChanged_revoker>(this, ContentRequestsChanged(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContentSite<D>::ContentRequestsChanged(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSite)->remove_ContentRequestsChanged(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContent) consume_Microsoft_UI_Composition_Experimental_IExpCompositionContentStatics<D>::Create(winrt::Microsoft::UI::Composition::Compositor const& compositor) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentStatics)->Create(*(void**)(&compositor), &result));
        return winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContent{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Composition_Experimental_IExpCompositionPropertyChanged<D>::SetPropertyChangedListener(winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property, winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener const& listener) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChanged)->SetPropertyChangedListener(static_cast<int32_t>(property), *(void**)(&listener)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Composition_Experimental_IExpCompositionPropertyChangedListener<D>::NotifyBooleanPropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& target, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property, bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener)->NotifyBooleanPropertyChanged(*(void**)(&target), static_cast<int32_t>(property), value));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Composition_Experimental_IExpCompositionPropertyChangedListener<D>::NotifyColorPropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& target, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property, winrt::Windows::UI::Color const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener)->NotifyColorPropertyChanged(*(void**)(&target), static_cast<int32_t>(property), impl::bind_in(value)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Composition_Experimental_IExpCompositionPropertyChangedListener<D>::NotifyMatrix3x2PropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& target, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property, winrt::Windows::Foundation::Numerics::float3x2 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener)->NotifyMatrix3x2PropertyChanged(*(void**)(&target), static_cast<int32_t>(property), impl::bind_in(value)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Composition_Experimental_IExpCompositionPropertyChangedListener<D>::NotifyMatrix4x4PropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& target, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property, winrt::Windows::Foundation::Numerics::float4x4 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener)->NotifyMatrix4x4PropertyChanged(*(void**)(&target), static_cast<int32_t>(property), impl::bind_in(value)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Composition_Experimental_IExpCompositionPropertyChangedListener<D>::NotifyReferencePropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& target, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener)->NotifyReferencePropertyChanged(*(void**)(&target), static_cast<int32_t>(property)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Composition_Experimental_IExpCompositionPropertyChangedListener<D>::NotifySinglePropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& target, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property, float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener)->NotifySinglePropertyChanged(*(void**)(&target), static_cast<int32_t>(property), value));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Composition_Experimental_IExpCompositionPropertyChangedListener<D>::NotifyVector2PropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& target, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property, winrt::Windows::Foundation::Numerics::float2 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener)->NotifyVector2PropertyChanged(*(void**)(&target), static_cast<int32_t>(property), impl::bind_in(value)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Composition_Experimental_IExpCompositionPropertyChangedListener<D>::NotifyVector3PropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& target, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property, winrt::Windows::Foundation::Numerics::float3 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener)->NotifyVector3PropertyChanged(*(void**)(&target), static_cast<int32_t>(property), impl::bind_in(value)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Composition_Experimental_IExpCompositionPropertyChangedListener<D>::NotifyVector4PropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& target, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property, winrt::Windows::Foundation::Numerics::float4 const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener)->NotifyVector4PropertyChanged(*(void**)(&target), static_cast<int32_t>(property), impl::bind_in(value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::CompositionVisualSurface) consume_Microsoft_UI_Composition_Experimental_IExpCompositionVisualSurfaceStatics<D>::CreateVisualSurface(winrt::Microsoft::UI::Composition::Compositor const& compositor, winrt::Windows::Graphics::SizeInt32 const& realizationSize, bool frozen) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositionVisualSurfaceStatics)->CreateVisualSurfaceWithRealizationSize(*(void**)(&compositor), impl::bind_in(realizationSize), frozen, &result));
        return winrt::Microsoft::UI::Composition::CompositionVisualSurface{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::IInspectable) consume_Microsoft_UI_Composition_Experimental_IExpCompositor<D>::OpenSharedManipulationTransformFromHandle(uint64_t handle) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpCompositor)->OpenSharedManipulationTransformFromHandle(handle, &result));
        return winrt::Windows::Foundation::IInspectable{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::Experimental::ExpDisplayOrientations) consume_Microsoft_UI_Composition_Experimental_IExpContentTopLevelHost<D>::CurrentOrientation() const
    {
        winrt::Microsoft::UI::Composition::Experimental::ExpDisplayOrientations value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost)->get_CurrentOrientation(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::DisplayId) consume_Microsoft_UI_Composition_Experimental_IExpContentTopLevelHost<D>::DisplayId() const
    {
        winrt::Microsoft::UI::DisplayId value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost)->get_DisplayId(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Microsoft_UI_Composition_Experimental_IExpContentTopLevelHost<D>::DisplayScale() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost)->get_DisplayScale(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::Experimental::ExpDisplayOrientations) consume_Microsoft_UI_Composition_Experimental_IExpContentTopLevelHost<D>::NativeOrientation() const
    {
        winrt::Microsoft::UI::Composition::Experimental::ExpDisplayOrientations value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost)->get_NativeOrientation(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::WindowId) consume_Microsoft_UI_Composition_Experimental_IExpContentTopLevelHost<D>::WindowId() const
    {
        winrt::Microsoft::UI::WindowId value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost)->get_WindowId(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Composition_Experimental_IExpContentTopLevelHost<D>::StateChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost)->add_StateChanged(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Composition_Experimental_IExpContentTopLevelHost<D>::StateChanged_revoker consume_Microsoft_UI_Composition_Experimental_IExpContentTopLevelHost<D>::StateChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost, winrt::Windows::Foundation::IInspectable> const& handler) const
    {
        return impl::make_event_revoker<D, StateChanged_revoker>(this, StateChanged(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Composition_Experimental_IExpContentTopLevelHost<D>::StateChanged(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost)->remove_StateChanged(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Composition_Experimental_IExpVisual<D>::SetInteraction(winrt::Windows::Foundation::IInspectable const& interaction) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Composition::Experimental::IExpVisual)->SetInteraction(*(void**)(&interaction)));
    }
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent> : produce_base<D, winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent>
    {
        int32_t __stdcall get_ActualSize(winrt::Windows::Foundation::Numerics::float2* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float2>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float2>(this->shim().ActualSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AppData(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::IInspectable>(this->shim().AppData());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_AppData(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AppData(*reinterpret_cast<winrt::Windows::Foundation::IInspectable const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Compositor(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::Composition::Compositor>(this->shim().Compositor());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DispatcherQueue(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::Dispatching::DispatcherQueue>(this->shim().DispatcherQueue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Id(uint64_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint64_t>(this->shim().Id());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_InputSite(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpInputSite>(this->shim().InputSite());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsContentVisible(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsContentVisible());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_IsContentVisible(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsContentVisible(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsHitTestAlways(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsHitTestAlways());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_IsHitTestAlways(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsHitTestAlways(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsSiteVisible(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsSiteVisible());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Orientation(winrt::Windows::Foundation::Numerics::float3* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float3>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float3>(this->shim().Orientation());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_RasterizationScale(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().RasterizationScale());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_RequestedSize(winrt::Windows::Foundation::Numerics::float2* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float2>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float2>(this->shim().RequestedSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_RequestedSize(winrt::Windows::Foundation::Numerics::float2 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RequestedSize(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Root(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::Composition::Visual>(this->shim().Root());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Root(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Root(*reinterpret_cast<winrt::Microsoft::UI::Composition::Visual const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_TopLevelHost(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost>(this->shim().TopLevelHost());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateStateChangedDeferral(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Composition::CompositionNotificationDeferral>(this->shim().CreateStateChangedDeferral());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall add_AutomationProviderRequested(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().AutomationProviderRequested(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContent, winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentAutomationProviderRequestedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_AutomationProviderRequested(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AutomationProviderRequested(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_Closed(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().Closed(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContent, winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_Closed(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Closed(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_StateChanged(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().StateChanged(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContent, winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_StateChanged(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().StateChanged(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentAutomationProviderRequestedEventArgs> : produce_base<D, winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentAutomationProviderRequestedEventArgs>
    {
        int32_t __stdcall get_AutomationProvider(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::IInspectable>(this->shim().AutomationProvider());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_AutomationProvider(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AutomationProvider(*reinterpret_cast<winrt::Windows::Foundation::IInspectable const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Handled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().Handled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Handled(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Handled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentEventArgs> : produce_base<D, winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentEventArgs>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentFactory> : produce_base<D, winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentFactory>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSite> : produce_base<D, winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSite>
    {
        int32_t __stdcall get_ActualSize(winrt::Windows::Foundation::Numerics::float2* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float2>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float2>(this->shim().ActualSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ActualSize(winrt::Windows::Foundation::Numerics::float2 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ActualSize(*reinterpret_cast<winrt::Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Compositor(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::Composition::Compositor>(this->shim().Compositor());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DispatcherQueue(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::Dispatching::DispatcherQueue>(this->shim().DispatcherQueue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsSiteVisible(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsSiteVisible());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_IsSiteVisible(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().IsSiteVisible(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_RasterizationScale(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().RasterizationScale());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_RasterizationScale(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RasterizationScale(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_RequestedSize(winrt::Windows::Foundation::Numerics::float2* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Numerics::float2>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Numerics::float2>(this->shim().RequestedSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_SiteVisual(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::Composition::Visual>(this->shim().SiteVisual());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_TopLevelHost(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost>(this->shim().TopLevelHost());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_TopLevelHost(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TopLevelHost(*reinterpret_cast<winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall TryCreateContentDeferral(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Composition::CompositionNotificationDeferral>(this->shim().TryCreateContentDeferral());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall add_ContentRequestsChanged(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().ContentRequestsChanged(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentSite, winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentSiteEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_ContentRequestsChanged(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ContentRequestsChanged(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSiteEventArgs> : produce_base<D, winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSiteEventArgs>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSiteFactory> : produce_base<D, winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSiteFactory>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentStatics> : produce_base<D, winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentStatics>
    {
        int32_t __stdcall Create(void* compositor, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContent>(this->shim().Create(*reinterpret_cast<winrt::Microsoft::UI::Composition::Compositor const*>(&compositor)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChanged> : produce_base<D, winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChanged>
    {
        int32_t __stdcall SetPropertyChangedListener(int32_t property, void* listener) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetPropertyChangedListener(*reinterpret_cast<winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const*>(&property), *reinterpret_cast<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener const*>(&listener));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener> : produce_base<D, winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener>
    {
        int32_t __stdcall NotifyBooleanPropertyChanged(void* target, int32_t property, bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NotifyBooleanPropertyChanged(*reinterpret_cast<winrt::Microsoft::UI::Composition::CompositionObject const*>(&target), *reinterpret_cast<winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const*>(&property), value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NotifyColorPropertyChanged(void* target, int32_t property, struct struct_Windows_UI_Color value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NotifyColorPropertyChanged(*reinterpret_cast<winrt::Microsoft::UI::Composition::CompositionObject const*>(&target), *reinterpret_cast<winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const*>(&property), *reinterpret_cast<winrt::Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NotifyMatrix3x2PropertyChanged(void* target, int32_t property, winrt::Windows::Foundation::Numerics::float3x2 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NotifyMatrix3x2PropertyChanged(*reinterpret_cast<winrt::Microsoft::UI::Composition::CompositionObject const*>(&target), *reinterpret_cast<winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const*>(&property), *reinterpret_cast<winrt::Windows::Foundation::Numerics::float3x2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NotifyMatrix4x4PropertyChanged(void* target, int32_t property, winrt::Windows::Foundation::Numerics::float4x4 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NotifyMatrix4x4PropertyChanged(*reinterpret_cast<winrt::Microsoft::UI::Composition::CompositionObject const*>(&target), *reinterpret_cast<winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const*>(&property), *reinterpret_cast<winrt::Windows::Foundation::Numerics::float4x4 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NotifyReferencePropertyChanged(void* target, int32_t property) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NotifyReferencePropertyChanged(*reinterpret_cast<winrt::Microsoft::UI::Composition::CompositionObject const*>(&target), *reinterpret_cast<winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const*>(&property));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NotifySinglePropertyChanged(void* target, int32_t property, float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NotifySinglePropertyChanged(*reinterpret_cast<winrt::Microsoft::UI::Composition::CompositionObject const*>(&target), *reinterpret_cast<winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const*>(&property), value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NotifyVector2PropertyChanged(void* target, int32_t property, winrt::Windows::Foundation::Numerics::float2 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NotifyVector2PropertyChanged(*reinterpret_cast<winrt::Microsoft::UI::Composition::CompositionObject const*>(&target), *reinterpret_cast<winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const*>(&property), *reinterpret_cast<winrt::Windows::Foundation::Numerics::float2 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NotifyVector3PropertyChanged(void* target, int32_t property, winrt::Windows::Foundation::Numerics::float3 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NotifyVector3PropertyChanged(*reinterpret_cast<winrt::Microsoft::UI::Composition::CompositionObject const*>(&target), *reinterpret_cast<winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const*>(&property), *reinterpret_cast<winrt::Windows::Foundation::Numerics::float3 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NotifyVector4PropertyChanged(void* target, int32_t property, winrt::Windows::Foundation::Numerics::float4 value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NotifyVector4PropertyChanged(*reinterpret_cast<winrt::Microsoft::UI::Composition::CompositionObject const*>(&target), *reinterpret_cast<winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const*>(&property), *reinterpret_cast<winrt::Windows::Foundation::Numerics::float4 const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Composition::Experimental::IExpCompositionVisualSurfaceStatics> : produce_base<D, winrt::Microsoft::UI::Composition::Experimental::IExpCompositionVisualSurfaceStatics>
    {
        int32_t __stdcall CreateVisualSurfaceWithRealizationSize(void* compositor, struct struct_Windows_Graphics_SizeInt32 realizationSize, bool frozen, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Composition::CompositionVisualSurface>(this->shim().CreateVisualSurface(*reinterpret_cast<winrt::Microsoft::UI::Composition::Compositor const*>(&compositor), *reinterpret_cast<winrt::Windows::Graphics::SizeInt32 const*>(&realizationSize), frozen));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Composition::Experimental::IExpCompositor> : produce_base<D, winrt::Microsoft::UI::Composition::Experimental::IExpCompositor>
    {
        int32_t __stdcall OpenSharedManipulationTransformFromHandle(uint64_t handle, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::IInspectable>(this->shim().OpenSharedManipulationTransformFromHandle(handle));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost> : produce_base<D, winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost>
    {
        int32_t __stdcall get_CurrentOrientation(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::Composition::Experimental::ExpDisplayOrientations>(this->shim().CurrentOrientation());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DisplayId(struct struct_Microsoft_UI_DisplayId* value) noexcept final try
        {
            zero_abi<winrt::Microsoft::UI::DisplayId>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::DisplayId>(this->shim().DisplayId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DisplayScale(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().DisplayScale());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_NativeOrientation(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::Composition::Experimental::ExpDisplayOrientations>(this->shim().NativeOrientation());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_WindowId(struct struct_Microsoft_UI_WindowId* value) noexcept final try
        {
            zero_abi<winrt::Microsoft::UI::WindowId>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::WindowId>(this->shim().WindowId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall add_StateChanged(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().StateChanged(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost, winrt::Windows::Foundation::IInspectable> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_StateChanged(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().StateChanged(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Composition::Experimental::IExpVisual> : produce_base<D, winrt::Microsoft::UI::Composition::Experimental::IExpVisual>
    {
        int32_t __stdcall SetInteraction(void* interaction) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetInteraction(*reinterpret_cast<winrt::Windows::Foundation::IInspectable const*>(&interaction));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Composition::Experimental
{
    inline auto ExpCompositionContent::Create(winrt::Microsoft::UI::Composition::Compositor const& compositor)
    {
        return impl::call_factory<ExpCompositionContent, IExpCompositionContentStatics>([&](IExpCompositionContentStatics const& f) { return f.Create(compositor); });
    }
    inline auto ExpCompositionVisualSurface::CreateVisualSurface(winrt::Microsoft::UI::Composition::Compositor const& compositor, winrt::Windows::Graphics::SizeInt32 const& realizationSize, bool frozen)
    {
        return impl::call_factory<ExpCompositionVisualSurface, IExpCompositionVisualSurfaceStatics>([&](IExpCompositionVisualSurfaceStatics const& f) { return f.CreateVisualSurface(compositor, realizationSize, frozen); });
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentAutomationProviderRequestedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentFactory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSite> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSiteEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSiteFactory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChanged> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionVisualSurfaceStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Composition::Experimental::IExpCompositor> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Composition::Experimental::IExpVisual> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContent> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentAutomationProviderRequestedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentSite> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentSiteEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionVisualSurface> : winrt::impl::hash_base {};
#endif
}
#endif
