// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210806.1

#pragma once
#ifndef WINRT_Microsoft_UI_Input_Experimental_0_H
#define WINRT_Microsoft_UI_Input_Experimental_0_H
WINRT_EXPORT namespace winrt::Microsoft::UI::Composition
{
    struct Visual;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Dispatching
{
    struct DispatcherQueue;
}
WINRT_EXPORT namespace winrt::Windows::Devices::Input
{
    enum class PointerDeviceType : int32_t;
}
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    struct EventRegistrationToken;
    struct Point;
    struct Rect;
    template <typename TSender, typename TResult> struct __declspec(empty_bases) TypedEventHandler;
}
WINRT_EXPORT namespace winrt::Windows::Foundation::Collections
{
    template <typename T> struct __declspec(empty_bases) IVector;
}
WINRT_EXPORT namespace winrt::Windows::System
{
    enum class VirtualKey : int32_t;
    enum class VirtualKeyModifiers : uint32_t;
}
WINRT_EXPORT namespace winrt::Windows::UI::Core
{
    struct AcceleratorKeyEventArgs;
    struct CharacterReceivedEventArgs;
    struct CoreCursor;
    enum class CoreInputDeviceTypes : uint32_t;
    enum class CoreVirtualKeyStates : uint32_t;
    struct KeyEventArgs;
    struct TouchHitTestingEventArgs;
}
WINRT_EXPORT namespace winrt::Windows::UI::Input
{
    struct CrossSlideThresholds;
    enum class CrossSlidingState : int32_t;
    enum class DraggingState : int32_t;
    enum class GestureSettings : uint32_t;
    enum class HoldingState : int32_t;
    struct IPointerPointTransform;
    struct ManipulationDelta;
    struct ManipulationVelocities;
    enum class PointerUpdateKind : int32_t;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Input::Experimental
{
    enum class ExpFocusChangedDirection : int32_t
    {
        None = 0,
        Next = 1,
        Previous = 2,
        Up = 3,
        Down = 4,
        Left = 5,
        Right = 6,
    };
    enum class ExpFocusNavigationReason : int32_t
    {
        Programmatic = 0,
        Restore = 1,
        First = 2,
        Last = 3,
        Left = 4,
        Up = 5,
        Right = 6,
        Down = 7,
    };
    enum class ExpInputActivationState : int32_t
    {
        None = 0,
        Deactivated = 1,
        ActivatedNotForeground = 2,
        ActivatedInForeground = 3,
    };
    struct IExpContextMenuKeyEventArgs;
    struct IExpCrossSlidingEventArgs;
    struct IExpDirectManipulation;
    struct IExpDirectManipulationStatics;
    struct IExpDraggingEventArgs;
    struct IExpFocusChangedEventArgs;
    struct IExpFocusController;
    struct IExpFocusControllerStatics;
    struct IExpFocusNavigationHost;
    struct IExpFocusNavigationHostStatics;
    struct IExpFocusNavigationRequest;
    struct IExpFocusNavigationRequestStatics;
    struct IExpFocusNavigationResult;
    struct IExpFocusObserver;
    struct IExpFocusObserverStatics;
    struct IExpGestureRecognizer;
    struct IExpHoldingEventArgs;
    struct IExpIndependentPointerInputObserver;
    struct IExpIndependentPointerInputObserverStatics;
    struct IExpInputActivationListener;
    struct IExpInputActivationListenerActivationChangedEventArgs;
    struct IExpInputActivationListenerPartnerStatics;
    struct IExpInputObject;
    struct IExpInputObjectFactory;
    struct IExpInputSite;
    struct IExpKeyboardInput;
    struct IExpKeyboardInputStatics;
    struct IExpManipulationCompletedEventArgs;
    struct IExpManipulationInertiaStartingEventArgs;
    struct IExpManipulationStartedEventArgs;
    struct IExpManipulationUpdatedEventArgs;
    struct IExpMouseCapture;
    struct IExpMouseCaptureStatics;
    struct IExpMouseWheelParameters;
    struct IExpNavigateFocusRequestedEventArgs;
    struct IExpPointerCursorController;
    struct IExpPointerCursorControllerStatics;
    struct IExpPointerEventArgs;
    struct IExpPointerInputObserver;
    struct IExpPointerInputObserverFactory;
    struct IExpPointerInputObserverStatics;
    struct IExpPointerPoint;
    struct IExpPointerPointProperties;
    struct IExpPointerPointStatics;
    struct IExpRightTappedEventArgs;
    struct IExpTappedEventArgs;
    struct IExpTouchHitTestingProvider;
    struct IExpTouchHitTestingProviderStatics;
    struct ExpContextMenuKeyEventArgs;
    struct ExpCrossSlidingEventArgs;
    struct ExpDirectManipulation;
    struct ExpDraggingEventArgs;
    struct ExpFocusChangedEventArgs;
    struct ExpFocusController;
    struct ExpFocusNavigationHost;
    struct ExpFocusNavigationRequest;
    struct ExpFocusNavigationResult;
    struct ExpFocusObserver;
    struct ExpGestureRecognizer;
    struct ExpHoldingEventArgs;
    struct ExpIndependentPointerInputObserver;
    struct ExpInputActivationListener;
    struct ExpInputActivationListenerActivationChangedEventArgs;
    struct ExpInputActivationListenerPartner;
    struct ExpInputObject;
    struct ExpInputSite;
    struct ExpKeyboardInput;
    struct ExpManipulationCompletedEventArgs;
    struct ExpManipulationInertiaStartingEventArgs;
    struct ExpManipulationStartedEventArgs;
    struct ExpManipulationUpdatedEventArgs;
    struct ExpMouseCapture;
    struct ExpMouseWheelParameters;
    struct ExpNavigateFocusRequestedEventArgs;
    struct ExpPointerCursorController;
    struct ExpPointerEventArgs;
    struct ExpPointerInputObserver;
    struct ExpPointerPoint;
    struct ExpPointerPointProperties;
    struct ExpRightTappedEventArgs;
    struct ExpTappedEventArgs;
    struct ExpTouchHitTestingProvider;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpContextMenuKeyEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpCrossSlidingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpDirectManipulation>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpDirectManipulationStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpDraggingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpFocusChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpFocusController>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpFocusControllerStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHost>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHostStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequest>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequestStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationResult>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpFocusObserver>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpFocusObserverStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpHoldingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpIndependentPointerInputObserver>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpIndependentPointerInputObserverStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpInputActivationListener>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpInputActivationListenerActivationChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpInputActivationListenerPartnerStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpInputObject>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpInputObjectFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpInputSite>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInputStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpManipulationCompletedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpManipulationInertiaStartingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpManipulationStartedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpManipulationUpdatedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpMouseCapture>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpMouseCaptureStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpMouseWheelParameters>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpNavigateFocusRequestedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpPointerCursorController>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpPointerCursorControllerStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpPointerEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserverFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserverStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpPointerPoint>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpPointerPointProperties>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpRightTappedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpTappedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpTouchHitTestingProvider>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::IExpTouchHitTestingProviderStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpContextMenuKeyEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpCrossSlidingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpDirectManipulation>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpDraggingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpFocusChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpFocusController>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationHost>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationResult>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpFocusObserver>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpHoldingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpIndependentPointerInputObserver>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpInputActivationListener>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpInputActivationListenerActivationChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpInputActivationListenerPartner>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpInputObject>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpInputSite>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpManipulationCompletedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpManipulationInertiaStartingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpManipulationStartedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpManipulationUpdatedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpMouseCapture>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpMouseWheelParameters>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpNavigateFocusRequestedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpPointerCursorController>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpPointerPointProperties>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpRightTappedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpTappedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpTouchHitTestingProvider>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpFocusChangedDirection>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Input::Experimental::ExpInputActivationState>{ using type = enum_category; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpContextMenuKeyEventArgs> = L"Microsoft.UI.Input.Experimental.ExpContextMenuKeyEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpCrossSlidingEventArgs> = L"Microsoft.UI.Input.Experimental.ExpCrossSlidingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpDirectManipulation> = L"Microsoft.UI.Input.Experimental.ExpDirectManipulation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpDraggingEventArgs> = L"Microsoft.UI.Input.Experimental.ExpDraggingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpFocusChangedEventArgs> = L"Microsoft.UI.Input.Experimental.ExpFocusChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpFocusController> = L"Microsoft.UI.Input.Experimental.ExpFocusController";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationHost> = L"Microsoft.UI.Input.Experimental.ExpFocusNavigationHost";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest> = L"Microsoft.UI.Input.Experimental.ExpFocusNavigationRequest";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationResult> = L"Microsoft.UI.Input.Experimental.ExpFocusNavigationResult";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpFocusObserver> = L"Microsoft.UI.Input.Experimental.ExpFocusObserver";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer> = L"Microsoft.UI.Input.Experimental.ExpGestureRecognizer";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpHoldingEventArgs> = L"Microsoft.UI.Input.Experimental.ExpHoldingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpIndependentPointerInputObserver> = L"Microsoft.UI.Input.Experimental.ExpIndependentPointerInputObserver";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpInputActivationListener> = L"Microsoft.UI.Input.Experimental.ExpInputActivationListener";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpInputActivationListenerActivationChangedEventArgs> = L"Microsoft.UI.Input.Experimental.ExpInputActivationListenerActivationChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpInputActivationListenerPartner> = L"Microsoft.UI.Input.Experimental.ExpInputActivationListenerPartner";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpInputObject> = L"Microsoft.UI.Input.Experimental.ExpInputObject";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpInputSite> = L"Microsoft.UI.Input.Experimental.ExpInputSite";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput> = L"Microsoft.UI.Input.Experimental.ExpKeyboardInput";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpManipulationCompletedEventArgs> = L"Microsoft.UI.Input.Experimental.ExpManipulationCompletedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpManipulationInertiaStartingEventArgs> = L"Microsoft.UI.Input.Experimental.ExpManipulationInertiaStartingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpManipulationStartedEventArgs> = L"Microsoft.UI.Input.Experimental.ExpManipulationStartedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpManipulationUpdatedEventArgs> = L"Microsoft.UI.Input.Experimental.ExpManipulationUpdatedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpMouseCapture> = L"Microsoft.UI.Input.Experimental.ExpMouseCapture";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpMouseWheelParameters> = L"Microsoft.UI.Input.Experimental.ExpMouseWheelParameters";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpNavigateFocusRequestedEventArgs> = L"Microsoft.UI.Input.Experimental.ExpNavigateFocusRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpPointerCursorController> = L"Microsoft.UI.Input.Experimental.ExpPointerCursorController";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> = L"Microsoft.UI.Input.Experimental.ExpPointerEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver> = L"Microsoft.UI.Input.Experimental.ExpPointerInputObserver";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint> = L"Microsoft.UI.Input.Experimental.ExpPointerPoint";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpPointerPointProperties> = L"Microsoft.UI.Input.Experimental.ExpPointerPointProperties";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpRightTappedEventArgs> = L"Microsoft.UI.Input.Experimental.ExpRightTappedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpTappedEventArgs> = L"Microsoft.UI.Input.Experimental.ExpTappedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpTouchHitTestingProvider> = L"Microsoft.UI.Input.Experimental.ExpTouchHitTestingProvider";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpFocusChangedDirection> = L"Microsoft.UI.Input.Experimental.ExpFocusChangedDirection";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason> = L"Microsoft.UI.Input.Experimental.ExpFocusNavigationReason";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::ExpInputActivationState> = L"Microsoft.UI.Input.Experimental.ExpInputActivationState";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpContextMenuKeyEventArgs> = L"Microsoft.UI.Input.Experimental.IExpContextMenuKeyEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpCrossSlidingEventArgs> = L"Microsoft.UI.Input.Experimental.IExpCrossSlidingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpDirectManipulation> = L"Microsoft.UI.Input.Experimental.IExpDirectManipulation";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpDirectManipulationStatics> = L"Microsoft.UI.Input.Experimental.IExpDirectManipulationStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpDraggingEventArgs> = L"Microsoft.UI.Input.Experimental.IExpDraggingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpFocusChangedEventArgs> = L"Microsoft.UI.Input.Experimental.IExpFocusChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpFocusController> = L"Microsoft.UI.Input.Experimental.IExpFocusController";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpFocusControllerStatics> = L"Microsoft.UI.Input.Experimental.IExpFocusControllerStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHost> = L"Microsoft.UI.Input.Experimental.IExpFocusNavigationHost";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHostStatics> = L"Microsoft.UI.Input.Experimental.IExpFocusNavigationHostStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequest> = L"Microsoft.UI.Input.Experimental.IExpFocusNavigationRequest";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequestStatics> = L"Microsoft.UI.Input.Experimental.IExpFocusNavigationRequestStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationResult> = L"Microsoft.UI.Input.Experimental.IExpFocusNavigationResult";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpFocusObserver> = L"Microsoft.UI.Input.Experimental.IExpFocusObserver";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpFocusObserverStatics> = L"Microsoft.UI.Input.Experimental.IExpFocusObserverStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer> = L"Microsoft.UI.Input.Experimental.IExpGestureRecognizer";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpHoldingEventArgs> = L"Microsoft.UI.Input.Experimental.IExpHoldingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpIndependentPointerInputObserver> = L"Microsoft.UI.Input.Experimental.IExpIndependentPointerInputObserver";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpIndependentPointerInputObserverStatics> = L"Microsoft.UI.Input.Experimental.IExpIndependentPointerInputObserverStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpInputActivationListener> = L"Microsoft.UI.Input.Experimental.IExpInputActivationListener";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpInputActivationListenerActivationChangedEventArgs> = L"Microsoft.UI.Input.Experimental.IExpInputActivationListenerActivationChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpInputActivationListenerPartnerStatics> = L"Microsoft.UI.Input.Experimental.IExpInputActivationListenerPartnerStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpInputObject> = L"Microsoft.UI.Input.Experimental.IExpInputObject";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpInputObjectFactory> = L"Microsoft.UI.Input.Experimental.IExpInputObjectFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpInputSite> = L"Microsoft.UI.Input.Experimental.IExpInputSite";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput> = L"Microsoft.UI.Input.Experimental.IExpKeyboardInput";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInputStatics> = L"Microsoft.UI.Input.Experimental.IExpKeyboardInputStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpManipulationCompletedEventArgs> = L"Microsoft.UI.Input.Experimental.IExpManipulationCompletedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpManipulationInertiaStartingEventArgs> = L"Microsoft.UI.Input.Experimental.IExpManipulationInertiaStartingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpManipulationStartedEventArgs> = L"Microsoft.UI.Input.Experimental.IExpManipulationStartedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpManipulationUpdatedEventArgs> = L"Microsoft.UI.Input.Experimental.IExpManipulationUpdatedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpMouseCapture> = L"Microsoft.UI.Input.Experimental.IExpMouseCapture";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpMouseCaptureStatics> = L"Microsoft.UI.Input.Experimental.IExpMouseCaptureStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpMouseWheelParameters> = L"Microsoft.UI.Input.Experimental.IExpMouseWheelParameters";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpNavigateFocusRequestedEventArgs> = L"Microsoft.UI.Input.Experimental.IExpNavigateFocusRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpPointerCursorController> = L"Microsoft.UI.Input.Experimental.IExpPointerCursorController";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpPointerCursorControllerStatics> = L"Microsoft.UI.Input.Experimental.IExpPointerCursorControllerStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpPointerEventArgs> = L"Microsoft.UI.Input.Experimental.IExpPointerEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver> = L"Microsoft.UI.Input.Experimental.IExpPointerInputObserver";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserverFactory> = L"Microsoft.UI.Input.Experimental.IExpPointerInputObserverFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserverStatics> = L"Microsoft.UI.Input.Experimental.IExpPointerInputObserverStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpPointerPoint> = L"Microsoft.UI.Input.Experimental.IExpPointerPoint";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpPointerPointProperties> = L"Microsoft.UI.Input.Experimental.IExpPointerPointProperties";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics> = L"Microsoft.UI.Input.Experimental.IExpPointerPointStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpRightTappedEventArgs> = L"Microsoft.UI.Input.Experimental.IExpRightTappedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpTappedEventArgs> = L"Microsoft.UI.Input.Experimental.IExpTappedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpTouchHitTestingProvider> = L"Microsoft.UI.Input.Experimental.IExpTouchHitTestingProvider";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::Experimental::IExpTouchHitTestingProviderStatics> = L"Microsoft.UI.Input.Experimental.IExpTouchHitTestingProviderStatics";
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpContextMenuKeyEventArgs>{ 0xBBEDECBC,0x81D4,0x5EEB,{ 0x98,0xF6,0x7F,0x28,0xD8,0xC7,0x8A,0x59 } }; // BBEDECBC-81D4-5EEB-98F6-7F28D8C78A59
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpCrossSlidingEventArgs>{ 0xD59CC4A9,0xC1A2,0x578B,{ 0xA2,0x58,0x31,0x72,0x4A,0x9E,0x1E,0x94 } }; // D59CC4A9-C1A2-578B-A258-31724A9E1E94
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpDirectManipulation>{ 0x95D6FA5E,0x5A5B,0x5D48,{ 0x85,0xA5,0x7E,0x33,0x95,0xBB,0x97,0x00 } }; // 95D6FA5E-5A5B-5D48-85A5-7E3395BB9700
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpDirectManipulationStatics>{ 0x6B466E5D,0x6A91,0x5301,{ 0xA2,0xD7,0xF9,0xA1,0xA2,0x9B,0x95,0xF2 } }; // 6B466E5D-6A91-5301-A2D7-F9A1A29B95F2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpDraggingEventArgs>{ 0x4D8DAA51,0x23D1,0x50A4,{ 0xA6,0x93,0xBA,0x37,0xCB,0x34,0x55,0x09 } }; // 4D8DAA51-23D1-50A4-A693-BA37CB345509
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpFocusChangedEventArgs>{ 0x714933B6,0xBA0D,0x58BC,{ 0x97,0xA9,0xBC,0xC8,0x9A,0x0B,0x34,0x31 } }; // 714933B6-BA0D-58BC-97A9-BCC89A0B3431
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpFocusController>{ 0xFD86E2D9,0x1550,0x59BA,{ 0x8B,0x4A,0x97,0x3C,0x72,0x51,0xCD,0x2C } }; // FD86E2D9-1550-59BA-8B4A-973C7251CD2C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpFocusControllerStatics>{ 0xF7D9123F,0x9364,0x566B,{ 0xB6,0xF0,0x19,0xC4,0x9E,0xD1,0x42,0xB9 } }; // F7D9123F-9364-566B-B6F0-19C49ED142B9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHost>{ 0x49B02D03,0xB0D8,0x55DB,{ 0x98,0x5A,0x48,0x61,0x1E,0x47,0xE8,0x38 } }; // 49B02D03-B0D8-55DB-985A-48611E47E838
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHostStatics>{ 0x7634E568,0x2177,0x50D9,{ 0x9D,0x95,0x18,0xE3,0xCA,0xCA,0x2B,0x40 } }; // 7634E568-2177-50D9-9D95-18E3CACA2B40
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequest>{ 0x4DE7C4D0,0x6F4B,0x5176,{ 0x9A,0xE2,0x34,0x6D,0x33,0x18,0xDB,0x4E } }; // 4DE7C4D0-6F4B-5176-9AE2-346D3318DB4E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequestStatics>{ 0x1CC934BB,0xEC15,0x5FAA,{ 0xAF,0x75,0xAF,0xE4,0x5D,0x0C,0xE1,0xA9 } }; // 1CC934BB-EC15-5FAA-AF75-AFE45D0CE1A9
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationResult>{ 0x33007903,0x6CD1,0x54A2,{ 0xA5,0xD3,0x57,0x24,0xEF,0x67,0x3C,0x6C } }; // 33007903-6CD1-54A2-A5D3-5724EF673C6C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpFocusObserver>{ 0x75B7AFFC,0xA7F3,0x5EEC,{ 0xAA,0xBE,0xB5,0x70,0x4F,0x28,0xC7,0xC1 } }; // 75B7AFFC-A7F3-5EEC-AABE-B5704F28C7C1
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpFocusObserverStatics>{ 0x033C2A71,0xF0AA,0x589D,{ 0xAD,0xE4,0x6A,0xD2,0x80,0x0F,0x4E,0x00 } }; // 033C2A71-F0AA-589D-ADE4-6AD2800F4E00
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer>{ 0xD7B6DF55,0x266F,0x5EC9,{ 0xB4,0x15,0x08,0x97,0xBE,0x24,0x96,0xE2 } }; // D7B6DF55-266F-5EC9-B415-0897BE2496E2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpHoldingEventArgs>{ 0x54D70587,0x13CA,0x5E32,{ 0x82,0xB6,0xA5,0xCA,0xA8,0x43,0xB1,0x2F } }; // 54D70587-13CA-5E32-82B6-A5CAA843B12F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpIndependentPointerInputObserver>{ 0x197CCC46,0x6940,0x56AA,{ 0xBC,0x0B,0xDB,0x9B,0xFF,0x9D,0x5F,0x85 } }; // 197CCC46-6940-56AA-BC0B-DB9BFF9D5F85
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpIndependentPointerInputObserverStatics>{ 0x4A2AA824,0x939A,0x5DA6,{ 0xB4,0x6D,0x47,0x06,0xA9,0x32,0xD5,0x3B } }; // 4A2AA824-939A-5DA6-B46D-4706A932D53B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpInputActivationListener>{ 0x9D00E33F,0xB3AF,0x566A,{ 0xAE,0xBF,0x4D,0x62,0xA2,0x8D,0x10,0xD3 } }; // 9D00E33F-B3AF-566A-AEBF-4D62A28D10D3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpInputActivationListenerActivationChangedEventArgs>{ 0xDC66BABF,0x5945,0x574F,{ 0xB0,0x45,0xEF,0xBA,0x91,0xBA,0xAA,0x44 } }; // DC66BABF-5945-574F-B045-EFBA91BAAA44
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpInputActivationListenerPartnerStatics>{ 0x12CB1689,0xBE6F,0x5F92,{ 0xAA,0xA3,0xBA,0x89,0x9B,0xD2,0x7B,0xDF } }; // 12CB1689-BE6F-5F92-AAA3-BA899BD27BDF
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpInputObject>{ 0xA9F18AF5,0x34B0,0x5227,{ 0xB9,0x81,0x1E,0xC4,0x08,0xD7,0x30,0xDA } }; // A9F18AF5-34B0-5227-B981-1EC408D730DA
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpInputObjectFactory>{ 0x759669EB,0xEA25,0x551B,{ 0x9B,0x8A,0x4F,0xED,0x55,0xC9,0x3C,0x8D } }; // 759669EB-EA25-551B-9B8A-4FED55C93C8D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpInputSite>{ 0x6B707B95,0xBBE8,0x5131,{ 0xA6,0xD7,0xB1,0x1C,0x26,0xCB,0x7C,0xB6 } }; // 6B707B95-BBE8-5131-A6D7-B11C26CB7CB6
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput>{ 0xCE01B259,0xE442,0x565B,{ 0x93,0x0E,0xCD,0x9F,0x04,0x6C,0x55,0x07 } }; // CE01B259-E442-565B-930E-CD9F046C5507
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInputStatics>{ 0x8884DED6,0xFAB4,0x5EC5,{ 0xBA,0xBF,0x30,0xB5,0x31,0x67,0x2C,0x30 } }; // 8884DED6-FAB4-5EC5-BABF-30B531672C30
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpManipulationCompletedEventArgs>{ 0x8B968AC2,0x8EA5,0x5CD8,{ 0x84,0x85,0xFF,0xA9,0x23,0x88,0x11,0x0E } }; // 8B968AC2-8EA5-5CD8-8485-FFA92388110E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpManipulationInertiaStartingEventArgs>{ 0xAC4EBF4C,0xFC52,0x50C5,{ 0x9A,0x9B,0xD4,0x16,0x98,0xBA,0x14,0x83 } }; // AC4EBF4C-FC52-50C5-9A9B-D41698BA1483
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpManipulationStartedEventArgs>{ 0x70CB834C,0x0A99,0x5723,{ 0x84,0xCE,0x82,0x7C,0x55,0x5F,0xB8,0xCA } }; // 70CB834C-0A99-5723-84CE-827C555FB8CA
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpManipulationUpdatedEventArgs>{ 0x3C034BD7,0x256F,0x54CC,{ 0x9A,0x0D,0x20,0xA5,0x64,0xBD,0xDE,0x79 } }; // 3C034BD7-256F-54CC-9A0D-20A564BDDE79
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpMouseCapture>{ 0x82919E2B,0x4D4B,0x590B,{ 0xA6,0xDD,0x5A,0xCE,0xBB,0x8D,0x64,0x11 } }; // 82919E2B-4D4B-590B-A6DD-5ACEBB8D6411
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpMouseCaptureStatics>{ 0x51EC13D2,0xEA81,0x593A,{ 0xBB,0x3F,0xAD,0x38,0x30,0x66,0xC2,0x29 } }; // 51EC13D2-EA81-593A-BB3F-AD383066C229
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpMouseWheelParameters>{ 0x53C7EFFD,0x7E8B,0x5B58,{ 0xB3,0xBF,0x9D,0xA0,0xDC,0xD0,0x5A,0x5F } }; // 53C7EFFD-7E8B-5B58-B3BF-9DA0DCD05A5F
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpNavigateFocusRequestedEventArgs>{ 0x563B3F71,0xECA0,0x5652,{ 0xB7,0x48,0x13,0xC6,0xD6,0x79,0x4C,0xEE } }; // 563B3F71-ECA0-5652-B748-13C6D6794CEE
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpPointerCursorController>{ 0x46913798,0x802B,0x56B5,{ 0x8B,0x65,0xCA,0x03,0x15,0x4B,0x00,0xBA } }; // 46913798-802B-56B5-8B65-CA03154B00BA
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpPointerCursorControllerStatics>{ 0x18EDF0FC,0xE558,0x51AF,{ 0xB0,0x99,0x6A,0xA4,0x10,0xCA,0x0A,0x92 } }; // 18EDF0FC-E558-51AF-B099-6AA410CA0A92
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpPointerEventArgs>{ 0xB84198C5,0x2A2F,0x5591,{ 0xAC,0x66,0xB3,0x5E,0xFB,0xB8,0xFC,0x52 } }; // B84198C5-2A2F-5591-AC66-B35EFBB8FC52
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver>{ 0x7A25B08F,0x75FF,0x5218,{ 0xB9,0x05,0xF9,0xFF,0x01,0xFD,0x4C,0xFA } }; // 7A25B08F-75FF-5218-B905-F9FF01FD4CFA
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserverFactory>{ 0xE34C0297,0xF73B,0x5D7D,{ 0x87,0xEB,0x47,0x91,0xEA,0xB2,0xF5,0x83 } }; // E34C0297-F73B-5D7D-87EB-4791EAB2F583
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserverStatics>{ 0xDC8D2989,0xAD28,0x58AA,{ 0x91,0xAC,0x17,0xB3,0xCF,0x8B,0xCD,0x59 } }; // DC8D2989-AD28-58AA-91AC-17B3CF8BCD59
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpPointerPoint>{ 0x97CB6935,0x34A2,0x5934,{ 0xAC,0xC8,0xF0,0x0A,0xB0,0x87,0x36,0xEC } }; // 97CB6935-34A2-5934-ACC8-F00AB08736EC
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpPointerPointProperties>{ 0x4E6E6AD8,0x8A8E,0x5441,{ 0xA2,0x81,0xFE,0xBD,0x72,0xD1,0xCE,0x6A } }; // 4E6E6AD8-8A8E-5441-A281-FEBD72D1CE6A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics>{ 0xBBBD3D96,0x00ED,0x59A2,{ 0x9F,0xEC,0x59,0xCA,0xBC,0xAF,0x27,0x0B } }; // BBBD3D96-00ED-59A2-9FEC-59CABCAF270B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpRightTappedEventArgs>{ 0xC3872670,0x8E4D,0x52C1,{ 0x91,0xA9,0x73,0xC9,0x0E,0x0B,0xD0,0x0D } }; // C3872670-8E4D-52C1-91A9-73C90E0BD00D
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpTappedEventArgs>{ 0x0A8DCCE9,0x6FFA,0x5FC5,{ 0x8B,0x66,0x6E,0xD7,0xA0,0x04,0xDF,0xF8 } }; // 0A8DCCE9-6FFA-5FC5-8B66-6ED7A004DFF8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpTouchHitTestingProvider>{ 0xE66AECA3,0xF13B,0x50FC,{ 0xA2,0x53,0x4E,0xA2,0x2E,0x90,0x3B,0x17 } }; // E66AECA3-F13B-50FC-A253-4EA22E903B17
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::Experimental::IExpTouchHitTestingProviderStatics>{ 0xFBFC29FD,0xF441,0x5D62,{ 0x99,0xFA,0x84,0xBE,0x9A,0xBD,0xC8,0xAD } }; // FBFC29FD-F441-5D62-99FA-84BE9ABDC8AD
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpContextMenuKeyEventArgs>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpContextMenuKeyEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpCrossSlidingEventArgs>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpCrossSlidingEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpDirectManipulation>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpDirectManipulation; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpDraggingEventArgs>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpDraggingEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpFocusChangedEventArgs>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpFocusChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpFocusController>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpFocusController; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationHost>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHost; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequest; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationResult>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationResult; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpFocusObserver>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpFocusObserver; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpHoldingEventArgs>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpHoldingEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpIndependentPointerInputObserver>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpIndependentPointerInputObserver; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpInputActivationListener>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpInputActivationListener; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpInputActivationListenerActivationChangedEventArgs>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpInputActivationListenerActivationChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpInputObject>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpInputObject; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpInputSite>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpInputSite; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpManipulationCompletedEventArgs>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpManipulationCompletedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpManipulationInertiaStartingEventArgs>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpManipulationInertiaStartingEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpManipulationStartedEventArgs>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpManipulationStartedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpManipulationUpdatedEventArgs>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpManipulationUpdatedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpMouseCapture>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpMouseCapture; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpMouseWheelParameters>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpMouseWheelParameters; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpNavigateFocusRequestedEventArgs>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpNavigateFocusRequestedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpPointerCursorController>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpPointerCursorController; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpPointerEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpPointerPoint; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpPointerPointProperties>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpPointerPointProperties; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpRightTappedEventArgs>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpRightTappedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpTappedEventArgs>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpTappedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::Experimental::ExpTouchHitTestingProvider>{ using type = winrt::Microsoft::UI::Input::Experimental::IExpTouchHitTestingProvider; };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpContextMenuKeyEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpCrossSlidingEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CrossSlidingState(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_PointerDeviceType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Position(winrt::Windows::Foundation::Point*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpDirectManipulation>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall add_DirectManipulationHitTest(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DirectManipulationHitTest(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpDirectManipulationStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GetForInputSite(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpDraggingEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DraggingState(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_PointerDeviceType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Position(winrt::Windows::Foundation::Point*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpFocusChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Direction(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpFocusController>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HasFocus(bool*) noexcept = 0;
            virtual int32_t __stdcall TrySetFocus(bool*) noexcept = 0;
            virtual int32_t __stdcall DepartFocus(void*, void**) noexcept = 0;
            virtual int32_t __stdcall add_NavigateFocusRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_NavigateFocusRequested(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpFocusControllerStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GetForInputSite(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHost>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall NavigateFocus(void*, void**) noexcept = 0;
            virtual int32_t __stdcall add_TakeFocusRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TakeFocusRequested(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHostStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GetForInputSite(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequest>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CorrelationId(winrt::guid*) noexcept = 0;
            virtual int32_t __stdcall get_HintRect(winrt::Windows::Foundation::Rect*) noexcept = 0;
            virtual int32_t __stdcall get_Reason(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequestStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateFocusNavigationRequestReasonAndHintRect(int32_t, winrt::Windows::Foundation::Rect, void**) noexcept = 0;
            virtual int32_t __stdcall CreateFocusNavigationRequestReasonHintRectAndId(int32_t, winrt::Windows::Foundation::Rect, winrt::guid, void**) noexcept = 0;
            virtual int32_t __stdcall CreateFocusNavigationRequestWithReason(int32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationResult>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_WasMoved(bool*) noexcept = 0;
            virtual int32_t __stdcall put_WasMoved(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpFocusObserver>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HasFocus(bool*) noexcept = 0;
            virtual int32_t __stdcall add_GotFocus(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_GotFocus(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_LostFocus(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_LostFocus(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpFocusObserverStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateForInputSite(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_AutoProcessInertia(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AutoProcessInertia(bool) noexcept = 0;
            virtual int32_t __stdcall get_CrossSlideExact(bool*) noexcept = 0;
            virtual int32_t __stdcall put_CrossSlideExact(bool) noexcept = 0;
            virtual int32_t __stdcall get_CrossSlideHorizontally(bool*) noexcept = 0;
            virtual int32_t __stdcall put_CrossSlideHorizontally(bool) noexcept = 0;
            virtual int32_t __stdcall get_CrossSlideThresholds(struct struct_Windows_UI_Input_CrossSlideThresholds*) noexcept = 0;
            virtual int32_t __stdcall put_CrossSlideThresholds(struct struct_Windows_UI_Input_CrossSlideThresholds) noexcept = 0;
            virtual int32_t __stdcall get_GestureSettings(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_GestureSettings(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsActive(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsInertial(bool*) noexcept = 0;
            virtual int32_t __stdcall get_PivotCenter(winrt::Windows::Foundation::Point*) noexcept = 0;
            virtual int32_t __stdcall put_PivotCenter(winrt::Windows::Foundation::Point) noexcept = 0;
            virtual int32_t __stdcall get_PivotRadius(float*) noexcept = 0;
            virtual int32_t __stdcall put_PivotRadius(float) noexcept = 0;
            virtual int32_t __stdcall get_InertiaExpansionDeceleration(float*) noexcept = 0;
            virtual int32_t __stdcall put_InertiaExpansionDeceleration(float) noexcept = 0;
            virtual int32_t __stdcall get_InertiaExpansion(float*) noexcept = 0;
            virtual int32_t __stdcall put_InertiaExpansion(float) noexcept = 0;
            virtual int32_t __stdcall get_InertiaRotationAngle(float*) noexcept = 0;
            virtual int32_t __stdcall put_InertiaRotationAngle(float) noexcept = 0;
            virtual int32_t __stdcall get_InertiaRotationDeceleration(float*) noexcept = 0;
            virtual int32_t __stdcall put_InertiaRotationDeceleration(float) noexcept = 0;
            virtual int32_t __stdcall get_InertiaTranslationDeceleration(float*) noexcept = 0;
            virtual int32_t __stdcall put_InertiaTranslationDeceleration(float) noexcept = 0;
            virtual int32_t __stdcall get_InertiaTranslationDisplacement(float*) noexcept = 0;
            virtual int32_t __stdcall put_InertiaTranslationDisplacement(float) noexcept = 0;
            virtual int32_t __stdcall get_ManipulationExact(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ManipulationExact(bool) noexcept = 0;
            virtual int32_t __stdcall get_MouseWheelParameters(void**) noexcept = 0;
            virtual int32_t __stdcall get_ShowGestureFeedback(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ShowGestureFeedback(bool) noexcept = 0;
            virtual int32_t __stdcall CanBeDoubleTap(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall CompleteGesture() noexcept = 0;
            virtual int32_t __stdcall ProcessDownEvent(void*) noexcept = 0;
            virtual int32_t __stdcall ProcessMoveEvents(void*) noexcept = 0;
            virtual int32_t __stdcall ProcessMouseWheelEvent(void*, bool, bool) noexcept = 0;
            virtual int32_t __stdcall ProcessInertia() noexcept = 0;
            virtual int32_t __stdcall ProcessUpEvent(void*) noexcept = 0;
            virtual int32_t __stdcall add_Tapped(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Tapped(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_RightTapped(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_RightTapped(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Holding(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Holding(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Dragging(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Dragging(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ManipulationStarted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ManipulationStarted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ManipulationUpdated(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ManipulationUpdated(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ManipulationInertiaStarting(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ManipulationInertiaStarting(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ManipulationCompleted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ManipulationCompleted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_CrossSliding(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CrossSliding(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpHoldingEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HoldingState(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_PointerDeviceType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Position(winrt::Windows::Foundation::Point*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpIndependentPointerInputObserver>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpIndependentPointerInputObserverStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateForVisual(void*, uint32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpInputActivationListener>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_State(int32_t*) noexcept = 0;
            virtual int32_t __stdcall add_InputActivationChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_InputActivationChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpInputActivationListenerActivationChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_State(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpInputActivationListenerPartnerStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GetForInputSite(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpInputObject>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DispatcherQueue(void**) noexcept = 0;
            virtual int32_t __stdcall get_InputSite(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpInputObjectFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpInputSite>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CurrentKeyEventDeviceId(void**) noexcept = 0;
            virtual int32_t __stdcall GetCurrentKeyState(int32_t, uint32_t*) noexcept = 0;
            virtual int32_t __stdcall GetKeyState(int32_t, uint32_t*) noexcept = 0;
            virtual int32_t __stdcall add_AcceleratorKeyActivated(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_AcceleratorKeyActivated(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_CharacterReceived(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CharacterReceived(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_KeyDown(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_KeyDown(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_KeyUp(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_KeyUp(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_SysKeyDown(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SysKeyDown(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_SysKeyUp(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SysKeyUp(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ContextMenuKey(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ContextMenuKey(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInputStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GetForInputSite(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpManipulationCompletedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Cumulative(struct struct_Windows_UI_Input_ManipulationDelta*) noexcept = 0;
            virtual int32_t __stdcall get_PointerDeviceType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Position(winrt::Windows::Foundation::Point*) noexcept = 0;
            virtual int32_t __stdcall get_Velocities(struct struct_Windows_UI_Input_ManipulationVelocities*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpManipulationInertiaStartingEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Cumulative(struct struct_Windows_UI_Input_ManipulationDelta*) noexcept = 0;
            virtual int32_t __stdcall get_Delta(struct struct_Windows_UI_Input_ManipulationDelta*) noexcept = 0;
            virtual int32_t __stdcall get_PointerDeviceType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Position(winrt::Windows::Foundation::Point*) noexcept = 0;
            virtual int32_t __stdcall get_Velocities(struct struct_Windows_UI_Input_ManipulationVelocities*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpManipulationStartedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Cumulative(struct struct_Windows_UI_Input_ManipulationDelta*) noexcept = 0;
            virtual int32_t __stdcall get_PointerDeviceType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Position(winrt::Windows::Foundation::Point*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpManipulationUpdatedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Cumulative(struct struct_Windows_UI_Input_ManipulationDelta*) noexcept = 0;
            virtual int32_t __stdcall get_Delta(struct struct_Windows_UI_Input_ManipulationDelta*) noexcept = 0;
            virtual int32_t __stdcall get_PointerDeviceType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Position(winrt::Windows::Foundation::Point*) noexcept = 0;
            virtual int32_t __stdcall get_Velocities(struct struct_Windows_UI_Input_ManipulationVelocities*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpMouseCapture>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HasCapture(bool*) noexcept = 0;
            virtual int32_t __stdcall TryReleaseCapture(bool*) noexcept = 0;
            virtual int32_t __stdcall TrySetCapture(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpMouseCaptureStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GetForInputSite(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpMouseWheelParameters>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CharTranslation(winrt::Windows::Foundation::Point*) noexcept = 0;
            virtual int32_t __stdcall put_CharTranslation(winrt::Windows::Foundation::Point) noexcept = 0;
            virtual int32_t __stdcall get_DeltaScale(float*) noexcept = 0;
            virtual int32_t __stdcall put_DeltaScale(float) noexcept = 0;
            virtual int32_t __stdcall get_DeltaRotationAngle(float*) noexcept = 0;
            virtual int32_t __stdcall put_DeltaRotationAngle(float) noexcept = 0;
            virtual int32_t __stdcall get_PageTranslation(winrt::Windows::Foundation::Point*) noexcept = 0;
            virtual int32_t __stdcall put_PageTranslation(winrt::Windows::Foundation::Point) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpNavigateFocusRequestedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Request(void**) noexcept = 0;
            virtual int32_t __stdcall get_WasMoved(bool*) noexcept = 0;
            virtual int32_t __stdcall put_WasMoved(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpPointerCursorController>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Cursor(void**) noexcept = 0;
            virtual int32_t __stdcall put_Cursor(void*) noexcept = 0;
            virtual int32_t __stdcall get_Position(winrt::Windows::Foundation::Point*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpPointerCursorControllerStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GetForInputSite(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpPointerEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CurrentPoint(void**) noexcept = 0;
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
            virtual int32_t __stdcall get_KeyModifiers(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall GetIntermediatePoints(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall add_PointerCaptureLost(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PointerCaptureLost(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PointerEntered(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PointerEntered(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PointerExited(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PointerExited(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PointerMoved(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PointerMoved(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PointerPressed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PointerPressed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PointerReleased(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PointerReleased(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PointerRoutedAway(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PointerRoutedAway(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PointerRoutedReleased(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PointerRoutedReleased(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PointerRoutedTo(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PointerRoutedTo(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PointerWheelChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PointerWheelChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserverFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserverStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateForInputSite(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpPointerPoint>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_FrameId(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall get_IsInContact(bool*) noexcept = 0;
            virtual int32_t __stdcall get_PointerDeviceType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_PointerId(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Position(winrt::Windows::Foundation::Point*) noexcept = 0;
            virtual int32_t __stdcall get_Properties(void**) noexcept = 0;
            virtual int32_t __stdcall get_RawPosition(winrt::Windows::Foundation::Point*) noexcept = 0;
            virtual int32_t __stdcall get_Timestamp(uint64_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpPointerPointProperties>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ContactRect(winrt::Windows::Foundation::Rect*) noexcept = 0;
            virtual int32_t __stdcall get_ContactRectRaw(winrt::Windows::Foundation::Rect*) noexcept = 0;
            virtual int32_t __stdcall get_IsBarrelButtonPressed(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsCanceled(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsEraser(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsHorizontalMouseWheel(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsInRange(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsInverted(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsLeftButtonPressed(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsMiddleButtonPressed(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsPrimary(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsRightButtonPressed(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsXButton1Pressed(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsXButton2Pressed(bool*) noexcept = 0;
            virtual int32_t __stdcall get_MouseWheelDelta(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Orientation(float*) noexcept = 0;
            virtual int32_t __stdcall get_PointerUpdateKind(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Pressure(float*) noexcept = 0;
            virtual int32_t __stdcall get_TouchConfidence(bool*) noexcept = 0;
            virtual int32_t __stdcall get_Twist(float*) noexcept = 0;
            virtual int32_t __stdcall get_XTilt(float*) noexcept = 0;
            virtual int32_t __stdcall get_YTilt(float*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GetCurrentPoint(uint32_t, void**) noexcept = 0;
            virtual int32_t __stdcall GetCurrentPointTransformed(uint32_t, void*, void**) noexcept = 0;
            virtual int32_t __stdcall GetIntermediatePoints(uint32_t, void**) noexcept = 0;
            virtual int32_t __stdcall GetIntermediatePointsTransformed(uint32_t, void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpRightTappedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PointerDeviceType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Position(winrt::Windows::Foundation::Point*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpTappedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PointerDeviceType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Position(winrt::Windows::Foundation::Point*) noexcept = 0;
            virtual int32_t __stdcall get_TapCount(uint32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpTouchHitTestingProvider>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall add_TouchHitTestRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TouchHitTestRequested(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::Experimental::IExpTouchHitTestingProviderStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GetForInputSite(void*, void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpContextMenuKeyEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) Handled() const;
        WINRT_IMPL_AUTO(void) Handled(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpContextMenuKeyEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpContextMenuKeyEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpCrossSlidingEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Input::CrossSlidingState) CrossSlidingState() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Devices::Input::PointerDeviceType) PointerDeviceType() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) Position() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpCrossSlidingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpCrossSlidingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpDirectManipulation
    {
        WINRT_IMPL_AUTO(winrt::event_token) DirectManipulationHitTest(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpDirectManipulation, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const;
        using DirectManipulationHitTest_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::Experimental::IExpDirectManipulation, &impl::abi_t<winrt::Microsoft::UI::Input::Experimental::IExpDirectManipulation>::remove_DirectManipulationHitTest>;
        [[nodiscard]] DirectManipulationHitTest_revoker DirectManipulationHitTest(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpDirectManipulation, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) DirectManipulationHitTest(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpDirectManipulation>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpDirectManipulation<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpDirectManipulationStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpDirectManipulation) GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpDirectManipulationStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpDirectManipulationStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpDraggingEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Input::DraggingState) DraggingState() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Devices::Input::PointerDeviceType) PointerDeviceType() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) Position() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpDraggingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpDraggingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpFocusChangedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusChangedDirection) Direction() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpFocusChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpFocusChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpFocusController
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) HasFocus() const;
        WINRT_IMPL_AUTO(bool) TrySetFocus() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationResult) DepartFocus(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest const& request) const;
        WINRT_IMPL_AUTO(winrt::event_token) NavigateFocusRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpFocusController, winrt::Microsoft::UI::Input::Experimental::ExpNavigateFocusRequestedEventArgs> const& handler) const;
        using NavigateFocusRequested_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::Experimental::IExpFocusController, &impl::abi_t<winrt::Microsoft::UI::Input::Experimental::IExpFocusController>::remove_NavigateFocusRequested>;
        [[nodiscard]] NavigateFocusRequested_revoker NavigateFocusRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpFocusController, winrt::Microsoft::UI::Input::Experimental::ExpNavigateFocusRequestedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) NavigateFocusRequested(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpFocusController>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpFocusController<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpFocusControllerStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusController) GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpFocusControllerStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpFocusControllerStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationHost
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationResult) NavigateFocus(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest const& request) const;
        WINRT_IMPL_AUTO(winrt::event_token) TakeFocusRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationHost, winrt::Microsoft::UI::Input::Experimental::ExpNavigateFocusRequestedEventArgs> const& handler) const;
        using TakeFocusRequested_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHost, &impl::abi_t<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHost>::remove_TakeFocusRequested>;
        [[nodiscard]] TakeFocusRequested_revoker TakeFocusRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationHost, winrt::Microsoft::UI::Input::Experimental::ExpNavigateFocusRequestedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) TakeFocusRequested(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHost>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationHost<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationHostStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationHost) GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHostStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationHostStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationRequest
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::guid) CorrelationId() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Rect) HintRect() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason) Reason() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequest>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationRequest<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationRequestStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest) CreateFocusNavigationRequestReasonAndHintRect(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason const& reason, winrt::Windows::Foundation::Rect const& hintRect) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest) CreateFocusNavigationRequestReasonHintRectAndId(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason const& reason, winrt::Windows::Foundation::Rect const& hintRect, winrt::guid const& correlationId) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest) CreateFocusNavigationRequestWithReason(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason const& reason) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequestStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationRequestStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationResult
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) WasMoved() const;
        WINRT_IMPL_AUTO(void) WasMoved(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationResult>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationResult<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpFocusObserver
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) HasFocus() const;
        WINRT_IMPL_AUTO(winrt::event_token) GotFocus(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpFocusObserver, winrt::Microsoft::UI::Input::Experimental::ExpFocusChangedEventArgs> const& handler) const;
        using GotFocus_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::Experimental::IExpFocusObserver, &impl::abi_t<winrt::Microsoft::UI::Input::Experimental::IExpFocusObserver>::remove_GotFocus>;
        [[nodiscard]] GotFocus_revoker GotFocus(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpFocusObserver, winrt::Microsoft::UI::Input::Experimental::ExpFocusChangedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) GotFocus(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) LostFocus(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpFocusObserver, winrt::Microsoft::UI::Input::Experimental::ExpFocusChangedEventArgs> const& handler) const;
        using LostFocus_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::Experimental::IExpFocusObserver, &impl::abi_t<winrt::Microsoft::UI::Input::Experimental::IExpFocusObserver>::remove_LostFocus>;
        [[nodiscard]] LostFocus_revoker LostFocus(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpFocusObserver, winrt::Microsoft::UI::Input::Experimental::ExpFocusChangedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) LostFocus(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpFocusObserver>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpFocusObserver<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpFocusObserverStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusObserver) CreateForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpFocusObserverStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpFocusObserverStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) AutoProcessInertia() const;
        WINRT_IMPL_AUTO(void) AutoProcessInertia(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) CrossSlideExact() const;
        WINRT_IMPL_AUTO(void) CrossSlideExact(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) CrossSlideHorizontally() const;
        WINRT_IMPL_AUTO(void) CrossSlideHorizontally(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Input::CrossSlideThresholds) CrossSlideThresholds() const;
        WINRT_IMPL_AUTO(void) CrossSlideThresholds(winrt::Windows::UI::Input::CrossSlideThresholds const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Input::GestureSettings) GestureSettings() const;
        WINRT_IMPL_AUTO(void) GestureSettings(winrt::Windows::UI::Input::GestureSettings const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsActive() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsInertial() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) PivotCenter() const;
        WINRT_IMPL_AUTO(void) PivotCenter(winrt::Windows::Foundation::Point const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) PivotRadius() const;
        WINRT_IMPL_AUTO(void) PivotRadius(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) InertiaExpansionDeceleration() const;
        WINRT_IMPL_AUTO(void) InertiaExpansionDeceleration(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) InertiaExpansion() const;
        WINRT_IMPL_AUTO(void) InertiaExpansion(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) InertiaRotationAngle() const;
        WINRT_IMPL_AUTO(void) InertiaRotationAngle(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) InertiaRotationDeceleration() const;
        WINRT_IMPL_AUTO(void) InertiaRotationDeceleration(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) InertiaTranslationDeceleration() const;
        WINRT_IMPL_AUTO(void) InertiaTranslationDeceleration(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) InertiaTranslationDisplacement() const;
        WINRT_IMPL_AUTO(void) InertiaTranslationDisplacement(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) ManipulationExact() const;
        WINRT_IMPL_AUTO(void) ManipulationExact(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpMouseWheelParameters) MouseWheelParameters() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) ShowGestureFeedback() const;
        WINRT_IMPL_AUTO(void) ShowGestureFeedback(bool value) const;
        WINRT_IMPL_AUTO(bool) CanBeDoubleTap(winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint const& value) const;
        WINRT_IMPL_AUTO(void) CompleteGesture() const;
        WINRT_IMPL_AUTO(void) ProcessDownEvent(winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint const& value) const;
        WINRT_IMPL_AUTO(void) ProcessMoveEvents(param::vector<winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint> const& value) const;
        WINRT_IMPL_AUTO(void) ProcessMouseWheelEvent(winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint const& value, bool isShiftKeyDown, bool isControlKeyDown) const;
        WINRT_IMPL_AUTO(void) ProcessInertia() const;
        WINRT_IMPL_AUTO(void) ProcessUpEvent(winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint const& value) const;
        WINRT_IMPL_AUTO(winrt::event_token) Tapped(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpTappedEventArgs> const& handler) const;
        using Tapped_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer, &impl::abi_t<winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer>::remove_Tapped>;
        [[nodiscard]] Tapped_revoker Tapped(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpTappedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) Tapped(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) RightTapped(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpRightTappedEventArgs> const& handler) const;
        using RightTapped_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer, &impl::abi_t<winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer>::remove_RightTapped>;
        [[nodiscard]] RightTapped_revoker RightTapped(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpRightTappedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) RightTapped(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) Holding(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpHoldingEventArgs> const& handler) const;
        using Holding_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer, &impl::abi_t<winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer>::remove_Holding>;
        [[nodiscard]] Holding_revoker Holding(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpHoldingEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) Holding(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) Dragging(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpDraggingEventArgs> const& handler) const;
        using Dragging_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer, &impl::abi_t<winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer>::remove_Dragging>;
        [[nodiscard]] Dragging_revoker Dragging(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpDraggingEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) Dragging(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) ManipulationStarted(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpManipulationStartedEventArgs> const& handler) const;
        using ManipulationStarted_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer, &impl::abi_t<winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer>::remove_ManipulationStarted>;
        [[nodiscard]] ManipulationStarted_revoker ManipulationStarted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpManipulationStartedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) ManipulationStarted(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) ManipulationUpdated(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpManipulationUpdatedEventArgs> const& handler) const;
        using ManipulationUpdated_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer, &impl::abi_t<winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer>::remove_ManipulationUpdated>;
        [[nodiscard]] ManipulationUpdated_revoker ManipulationUpdated(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpManipulationUpdatedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) ManipulationUpdated(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) ManipulationInertiaStarting(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpManipulationInertiaStartingEventArgs> const& handler) const;
        using ManipulationInertiaStarting_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer, &impl::abi_t<winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer>::remove_ManipulationInertiaStarting>;
        [[nodiscard]] ManipulationInertiaStarting_revoker ManipulationInertiaStarting(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpManipulationInertiaStartingEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) ManipulationInertiaStarting(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) ManipulationCompleted(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpManipulationCompletedEventArgs> const& handler) const;
        using ManipulationCompleted_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer, &impl::abi_t<winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer>::remove_ManipulationCompleted>;
        [[nodiscard]] ManipulationCompleted_revoker ManipulationCompleted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpManipulationCompletedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) ManipulationCompleted(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) CrossSliding(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpCrossSlidingEventArgs> const& handler) const;
        using CrossSliding_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer, &impl::abi_t<winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer>::remove_CrossSliding>;
        [[nodiscard]] CrossSliding_revoker CrossSliding(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpCrossSlidingEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) CrossSliding(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpHoldingEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Input::HoldingState) HoldingState() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Devices::Input::PointerDeviceType) PointerDeviceType() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) Position() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpHoldingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpHoldingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpIndependentPointerInputObserver
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpIndependentPointerInputObserver>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpIndependentPointerInputObserver<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpIndependentPointerInputObserverStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpIndependentPointerInputObserver) CreateForVisual(winrt::Microsoft::UI::Composition::Visual const& visual, winrt::Windows::UI::Core::CoreInputDeviceTypes const& deviceTypes) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpIndependentPointerInputObserverStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpIndependentPointerInputObserverStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpInputActivationListener
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpInputActivationState) State() const;
        WINRT_IMPL_AUTO(winrt::event_token) InputActivationChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpInputActivationListener, winrt::Microsoft::UI::Input::Experimental::ExpInputActivationListenerActivationChangedEventArgs> const& handler) const;
        using InputActivationChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::Experimental::IExpInputActivationListener, &impl::abi_t<winrt::Microsoft::UI::Input::Experimental::IExpInputActivationListener>::remove_InputActivationChanged>;
        [[nodiscard]] InputActivationChanged_revoker InputActivationChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpInputActivationListener, winrt::Microsoft::UI::Input::Experimental::ExpInputActivationListenerActivationChangedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) InputActivationChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpInputActivationListener>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpInputActivationListener<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpInputActivationListenerActivationChangedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpInputActivationState) State() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpInputActivationListenerActivationChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpInputActivationListenerActivationChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpInputActivationListenerPartnerStatics
    {
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::IInspectable) GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpInputActivationListenerPartnerStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpInputActivationListenerPartnerStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpInputObject
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Dispatching::DispatcherQueue) DispatcherQueue() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpInputSite) InputSite() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpInputObject>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpInputObject<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpInputObjectFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpInputObjectFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpInputObjectFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpInputSite
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpInputSite>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpInputSite<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpKeyboardInput
    {
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) CurrentKeyEventDeviceId() const;
        WINRT_IMPL_AUTO(winrt::Windows::UI::Core::CoreVirtualKeyStates) GetCurrentKeyState(winrt::Windows::System::VirtualKey const& virtualKey) const;
        WINRT_IMPL_AUTO(winrt::Windows::UI::Core::CoreVirtualKeyStates) GetKeyState(winrt::Windows::System::VirtualKey const& virtualKey) const;
        WINRT_IMPL_AUTO(winrt::event_token) AcceleratorKeyActivated(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput, winrt::Windows::UI::Core::AcceleratorKeyEventArgs> const& handler) const;
        using AcceleratorKeyActivated_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput, &impl::abi_t<winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput>::remove_AcceleratorKeyActivated>;
        [[nodiscard]] AcceleratorKeyActivated_revoker AcceleratorKeyActivated(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput, winrt::Windows::UI::Core::AcceleratorKeyEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) AcceleratorKeyActivated(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) CharacterReceived(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput, winrt::Windows::UI::Core::CharacterReceivedEventArgs> const& handler) const;
        using CharacterReceived_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput, &impl::abi_t<winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput>::remove_CharacterReceived>;
        [[nodiscard]] CharacterReceived_revoker CharacterReceived(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput, winrt::Windows::UI::Core::CharacterReceivedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) CharacterReceived(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) KeyDown(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput, winrt::Windows::UI::Core::KeyEventArgs> const& handler) const;
        using KeyDown_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput, &impl::abi_t<winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput>::remove_KeyDown>;
        [[nodiscard]] KeyDown_revoker KeyDown(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput, winrt::Windows::UI::Core::KeyEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) KeyDown(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) KeyUp(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput, winrt::Windows::UI::Core::KeyEventArgs> const& handler) const;
        using KeyUp_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput, &impl::abi_t<winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput>::remove_KeyUp>;
        [[nodiscard]] KeyUp_revoker KeyUp(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput, winrt::Windows::UI::Core::KeyEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) KeyUp(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) SysKeyDown(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput, winrt::Windows::UI::Core::KeyEventArgs> const& handler) const;
        using SysKeyDown_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput, &impl::abi_t<winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput>::remove_SysKeyDown>;
        [[nodiscard]] SysKeyDown_revoker SysKeyDown(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput, winrt::Windows::UI::Core::KeyEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) SysKeyDown(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) SysKeyUp(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput, winrt::Windows::UI::Core::KeyEventArgs> const& handler) const;
        using SysKeyUp_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput, &impl::abi_t<winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput>::remove_SysKeyUp>;
        [[nodiscard]] SysKeyUp_revoker SysKeyUp(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput, winrt::Windows::UI::Core::KeyEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) SysKeyUp(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) ContextMenuKey(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput, winrt::Microsoft::UI::Input::Experimental::ExpContextMenuKeyEventArgs> const& handler) const;
        using ContextMenuKey_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput, &impl::abi_t<winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput>::remove_ContextMenuKey>;
        [[nodiscard]] ContextMenuKey_revoker ContextMenuKey(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput, winrt::Microsoft::UI::Input::Experimental::ExpContextMenuKeyEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) ContextMenuKey(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpKeyboardInput<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpKeyboardInputStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput) GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInputStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpKeyboardInputStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpManipulationCompletedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Input::ManipulationDelta) Cumulative() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Devices::Input::PointerDeviceType) PointerDeviceType() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) Position() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Input::ManipulationVelocities) Velocities() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpManipulationCompletedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpManipulationCompletedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpManipulationInertiaStartingEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Input::ManipulationDelta) Cumulative() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Input::ManipulationDelta) Delta() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Devices::Input::PointerDeviceType) PointerDeviceType() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) Position() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Input::ManipulationVelocities) Velocities() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpManipulationInertiaStartingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpManipulationInertiaStartingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpManipulationStartedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Input::ManipulationDelta) Cumulative() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Devices::Input::PointerDeviceType) PointerDeviceType() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) Position() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpManipulationStartedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpManipulationStartedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpManipulationUpdatedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Input::ManipulationDelta) Cumulative() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Input::ManipulationDelta) Delta() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Devices::Input::PointerDeviceType) PointerDeviceType() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) Position() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Input::ManipulationVelocities) Velocities() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpManipulationUpdatedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpManipulationUpdatedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpMouseCapture
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) HasCapture() const;
        WINRT_IMPL_AUTO(bool) TryReleaseCapture() const;
        WINRT_IMPL_AUTO(bool) TrySetCapture() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpMouseCapture>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpMouseCapture<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpMouseCaptureStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpMouseCapture) GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpMouseCaptureStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpMouseCaptureStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpMouseWheelParameters
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) CharTranslation() const;
        WINRT_IMPL_AUTO(void) CharTranslation(winrt::Windows::Foundation::Point const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) DeltaScale() const;
        WINRT_IMPL_AUTO(void) DeltaScale(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) DeltaRotationAngle() const;
        WINRT_IMPL_AUTO(void) DeltaRotationAngle(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) PageTranslation() const;
        WINRT_IMPL_AUTO(void) PageTranslation(winrt::Windows::Foundation::Point const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpMouseWheelParameters>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpMouseWheelParameters<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpNavigateFocusRequestedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest) Request() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) WasMoved() const;
        WINRT_IMPL_AUTO(void) WasMoved(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpNavigateFocusRequestedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpNavigateFocusRequestedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpPointerCursorController
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Core::CoreCursor) Cursor() const;
        WINRT_IMPL_AUTO(void) Cursor(winrt::Windows::UI::Core::CoreCursor const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) Position() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpPointerCursorController>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpPointerCursorController<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpPointerCursorControllerStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpPointerCursorController) GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpPointerCursorControllerStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpPointerCursorControllerStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpPointerEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint) CurrentPoint() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) Handled() const;
        WINRT_IMPL_AUTO(void) Handled(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::System::VirtualKeyModifiers) KeyModifiers() const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint>) GetIntermediatePoints() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpPointerEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpPointerEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver
    {
        WINRT_IMPL_AUTO(winrt::event_token) PointerCaptureLost(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const;
        using PointerCaptureLost_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver, &impl::abi_t<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver>::remove_PointerCaptureLost>;
        [[nodiscard]] PointerCaptureLost_revoker PointerCaptureLost(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) PointerCaptureLost(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) PointerEntered(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const;
        using PointerEntered_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver, &impl::abi_t<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver>::remove_PointerEntered>;
        [[nodiscard]] PointerEntered_revoker PointerEntered(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) PointerEntered(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) PointerExited(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const;
        using PointerExited_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver, &impl::abi_t<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver>::remove_PointerExited>;
        [[nodiscard]] PointerExited_revoker PointerExited(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) PointerExited(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) PointerMoved(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const;
        using PointerMoved_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver, &impl::abi_t<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver>::remove_PointerMoved>;
        [[nodiscard]] PointerMoved_revoker PointerMoved(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) PointerMoved(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) PointerPressed(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const;
        using PointerPressed_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver, &impl::abi_t<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver>::remove_PointerPressed>;
        [[nodiscard]] PointerPressed_revoker PointerPressed(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) PointerPressed(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) PointerReleased(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const;
        using PointerReleased_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver, &impl::abi_t<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver>::remove_PointerReleased>;
        [[nodiscard]] PointerReleased_revoker PointerReleased(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) PointerReleased(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) PointerRoutedAway(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const;
        using PointerRoutedAway_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver, &impl::abi_t<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver>::remove_PointerRoutedAway>;
        [[nodiscard]] PointerRoutedAway_revoker PointerRoutedAway(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) PointerRoutedAway(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) PointerRoutedReleased(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const;
        using PointerRoutedReleased_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver, &impl::abi_t<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver>::remove_PointerRoutedReleased>;
        [[nodiscard]] PointerRoutedReleased_revoker PointerRoutedReleased(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) PointerRoutedReleased(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) PointerRoutedTo(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const;
        using PointerRoutedTo_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver, &impl::abi_t<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver>::remove_PointerRoutedTo>;
        [[nodiscard]] PointerRoutedTo_revoker PointerRoutedTo(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) PointerRoutedTo(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) PointerWheelChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const;
        using PointerWheelChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver, &impl::abi_t<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver>::remove_PointerWheelChanged>;
        [[nodiscard]] PointerWheelChanged_revoker PointerWheelChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) PointerWheelChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserverFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserverFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserverFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserverStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver) CreateForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserverStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserverStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpPointerPoint
    {
        [[nodiscard]] WINRT_IMPL_AUTO(uint32_t) FrameId() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsInContact() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Devices::Input::PointerDeviceType) PointerDeviceType() const;
        [[nodiscard]] WINRT_IMPL_AUTO(uint32_t) PointerId() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) Position() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpPointerPointProperties) Properties() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) RawPosition() const;
        [[nodiscard]] WINRT_IMPL_AUTO(uint64_t) Timestamp() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpPointerPoint>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpPointerPoint<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpPointerPointProperties
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Rect) ContactRect() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Rect) ContactRectRaw() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsBarrelButtonPressed() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsCanceled() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsEraser() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsHorizontalMouseWheel() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsInRange() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsInverted() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsLeftButtonPressed() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsMiddleButtonPressed() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsPrimary() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsRightButtonPressed() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsXButton1Pressed() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsXButton2Pressed() const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) MouseWheelDelta() const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) Orientation() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Input::PointerUpdateKind) PointerUpdateKind() const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) Pressure() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) TouchConfidence() const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) Twist() const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) XTilt() const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) YTilt() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpPointerPointProperties>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpPointerPointProperties<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpPointerPointStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint) GetCurrentPoint(uint32_t pointerId) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint) GetCurrentPointTransformed(uint32_t pointerId, winrt::Windows::UI::Input::IPointerPointTransform const& transform) const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint>) GetIntermediatePoints(uint32_t pointerId) const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint>) GetIntermediatePointsTransformed(uint32_t pointerId, winrt::Windows::UI::Input::IPointerPointTransform const& transform) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpPointerPointStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpRightTappedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Devices::Input::PointerDeviceType) PointerDeviceType() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) Position() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpRightTappedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpRightTappedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpTappedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Devices::Input::PointerDeviceType) PointerDeviceType() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) Position() const;
        [[nodiscard]] WINRT_IMPL_AUTO(uint32_t) TapCount() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpTappedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpTappedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpTouchHitTestingProvider
    {
        WINRT_IMPL_AUTO(winrt::event_token) TouchHitTestRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpTouchHitTestingProvider, winrt::Windows::UI::Core::TouchHitTestingEventArgs> const& handler) const;
        using TouchHitTestRequested_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::Experimental::IExpTouchHitTestingProvider, &impl::abi_t<winrt::Microsoft::UI::Input::Experimental::IExpTouchHitTestingProvider>::remove_TouchHitTestRequested>;
        [[nodiscard]] TouchHitTestRequested_revoker TouchHitTestRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpTouchHitTestingProvider, winrt::Windows::UI::Core::TouchHitTestingEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) TouchHitTestRequested(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpTouchHitTestingProvider>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpTouchHitTestingProvider<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_Experimental_IExpTouchHitTestingProviderStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpTouchHitTestingProvider) GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::Experimental::IExpTouchHitTestingProviderStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_Experimental_IExpTouchHitTestingProviderStatics<D>;
    };
}
#endif
