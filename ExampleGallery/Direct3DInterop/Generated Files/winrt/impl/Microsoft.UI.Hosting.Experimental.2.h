// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210806.1

#pragma once
#ifndef WINRT_Microsoft_UI_Hosting_Experimental_2_H
#define WINRT_Microsoft_UI_Hosting_Experimental_2_H
#include "winrt/impl/Microsoft.UI.1.h"
#include "winrt/impl/Microsoft.UI.Composition.1.h"
#include "winrt/impl/Microsoft.UI.Composition.Experimental.1.h"
#include "winrt/impl/Windows.Foundation.1.h"
#include "winrt/impl/Windows.UI.Core.1.h"
#include "winrt/impl/Microsoft.UI.Hosting.Experimental.1.h"
WINRT_EXPORT namespace winrt::Microsoft::UI::Hosting::Experimental
{
    struct __declspec(empty_bases) ExpCoreWindowBridge : winrt::Microsoft::UI::Hosting::Experimental::IExpCoreWindowBridge,
        impl::require<ExpCoreWindowBridge, winrt::Windows::Foundation::IClosable, winrt::Microsoft::UI::Hosting::Experimental::IExpContentBridge>
    {
        ExpCoreWindowBridge(std::nullptr_t) noexcept {}
        ExpCoreWindowBridge(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Hosting::Experimental::IExpCoreWindowBridge(ptr, take_ownership_from_abi) {}
        static auto Create(winrt::Microsoft::UI::Composition::Compositor const& compositor, winrt::Windows::UI::Core::CoreWindow const& coreWindow);
        static auto IsSupported();
    };
    struct __declspec(empty_bases) ExpCoreWindowTopLevelHost : winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost
    {
        ExpCoreWindowTopLevelHost(std::nullptr_t) noexcept {}
        ExpCoreWindowTopLevelHost(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost(ptr, take_ownership_from_abi) {}
    };
    struct __declspec(empty_bases) ExpDesktopWindowBridge : winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowBridge,
        impl::require<ExpDesktopWindowBridge, winrt::Windows::Foundation::IClosable, winrt::Microsoft::UI::Hosting::Experimental::IExpContentBridge>
    {
        ExpDesktopWindowBridge(std::nullptr_t) noexcept {}
        ExpDesktopWindowBridge(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowBridge(ptr, take_ownership_from_abi) {}
        static auto Create(winrt::Microsoft::UI::Composition::Compositor const& compositor, winrt::Microsoft::UI::WindowId const& parentWindowId);
        static auto IsSupported();
    };
    struct __declspec(empty_bases) ExpDesktopWindowTopLevelHost : winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost
    {
        ExpDesktopWindowTopLevelHost(std::nullptr_t) noexcept {}
        ExpDesktopWindowTopLevelHost(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost(ptr, take_ownership_from_abi) {}
        static auto GetForWindowId(winrt::Microsoft::UI::WindowId const& childWindowId);
    };
    struct __declspec(empty_bases) ExpPopupWindowBridge : winrt::Microsoft::UI::Hosting::Experimental::IExpPopupWindowBridge,
        impl::require<ExpPopupWindowBridge, winrt::Windows::Foundation::IClosable, winrt::Microsoft::UI::Hosting::Experimental::IExpContentBridge>
    {
        ExpPopupWindowBridge(std::nullptr_t) noexcept {}
        ExpPopupWindowBridge(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Hosting::Experimental::IExpPopupWindowBridge(ptr, take_ownership_from_abi) {}
        static auto IsSupported();
    };
    struct __declspec(empty_bases) ExpSystemVisualBridge : winrt::Microsoft::UI::Hosting::Experimental::IExpSystemVisualBridge,
        impl::require<ExpSystemVisualBridge, winrt::Windows::Foundation::IClosable>
    {
        ExpSystemVisualBridge(std::nullptr_t) noexcept {}
        ExpSystemVisualBridge(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Hosting::Experimental::IExpSystemVisualBridge(ptr, take_ownership_from_abi) {}
        static auto Create(winrt::Microsoft::UI::Composition::Compositor const& compositor);
        static auto IsSupported();
    };
}
#endif
