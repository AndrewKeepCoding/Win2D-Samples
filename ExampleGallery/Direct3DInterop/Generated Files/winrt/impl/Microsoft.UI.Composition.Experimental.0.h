// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210806.1

#pragma once
#ifndef WINRT_Microsoft_UI_Composition_Experimental_0_H
#define WINRT_Microsoft_UI_Composition_Experimental_0_H
WINRT_EXPORT namespace winrt::Microsoft::UI
{
    struct DisplayId;
    struct WindowId;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Composition
{
    struct CompositionNotificationDeferral;
    struct CompositionObject;
    struct CompositionVisualSurface;
    struct Compositor;
    struct Visual;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Dispatching
{
    struct DispatcherQueue;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Input::Experimental
{
    struct ExpInputSite;
}
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    struct EventRegistrationToken;
    template <typename TSender, typename TResult> struct __declspec(empty_bases) TypedEventHandler;
}
WINRT_EXPORT namespace winrt::Windows::Foundation::Numerics
{
}
WINRT_EXPORT namespace winrt::Windows::Graphics
{
    struct SizeInt32;
}
WINRT_EXPORT namespace winrt::Windows::UI
{
    struct Color;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Composition::Experimental
{
    enum class ExpDisplayOrientations : int32_t
    {
        None = 0,
        Landscape = 1,
        Portrait = 2,
        LandscapeFlipped = 4,
        PortraitFlipped = 8,
    };
    enum class ExpExpressionNotificationProperty : int32_t
    {
        Undefined = 0,
        Clip = 1,
        Offset = 2,
        Opacity = 3,
        Size = 4,
        RelativeOffset = 5,
        RelativeSize = 6,
        AnchorPoint = 7,
        CenterPoint = 8,
        Orientation = 9,
        RotationAngle = 10,
        RotationAxis = 11,
        Scale = 12,
        TransformMatrix = 13,
        BottomInset = 14,
        LeftInset = 15,
        RightInset = 16,
        TopInset = 17,
        LeftRadiusX = 18,
        LeftRadiusY = 19,
        BottomRightRadiusX = 20,
        BottomRightRadiusY = 21,
        TopLeftRadiusX = 22,
        TopLeftRadiusY = 23,
        TopRightRadiusX = 24,
        TopRightRadiusY = 25,
    };
    struct IExpCompositionContent;
    struct IExpCompositionContentAutomationProviderRequestedEventArgs;
    struct IExpCompositionContentEventArgs;
    struct IExpCompositionContentFactory;
    struct IExpCompositionContentSite;
    struct IExpCompositionContentSiteEventArgs;
    struct IExpCompositionContentSiteFactory;
    struct IExpCompositionContentStatics;
    struct IExpCompositionPropertyChanged;
    struct IExpCompositionPropertyChangedListener;
    struct IExpCompositionVisualSurfaceStatics;
    struct IExpCompositor;
    struct IExpContentTopLevelHost;
    struct IExpVisual;
    struct ExpCompositionContent;
    struct ExpCompositionContentAutomationProviderRequestedEventArgs;
    struct ExpCompositionContentEventArgs;
    struct ExpCompositionContentSite;
    struct ExpCompositionContentSiteEventArgs;
    struct ExpCompositionVisualSurface;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentAutomationProviderRequestedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSite>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSiteEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSiteFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChanged>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionVisualSurfaceStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Experimental::IExpCompositor>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Experimental::IExpVisual>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContent>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentAutomationProviderRequestedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentSite>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentSiteEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionVisualSurface>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Experimental::ExpDisplayOrientations>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty>{ using type = enum_category; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContent> = L"Microsoft.UI.Composition.Experimental.ExpCompositionContent";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentAutomationProviderRequestedEventArgs> = L"Microsoft.UI.Composition.Experimental.ExpCompositionContentAutomationProviderRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentEventArgs> = L"Microsoft.UI.Composition.Experimental.ExpCompositionContentEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentSite> = L"Microsoft.UI.Composition.Experimental.ExpCompositionContentSite";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentSiteEventArgs> = L"Microsoft.UI.Composition.Experimental.ExpCompositionContentSiteEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionVisualSurface> = L"Microsoft.UI.Composition.Experimental.ExpCompositionVisualSurface";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Experimental::ExpDisplayOrientations> = L"Microsoft.UI.Composition.Experimental.ExpDisplayOrientations";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty> = L"Microsoft.UI.Composition.Experimental.ExpExpressionNotificationProperty";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent> = L"Microsoft.UI.Composition.Experimental.IExpCompositionContent";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentAutomationProviderRequestedEventArgs> = L"Microsoft.UI.Composition.Experimental.IExpCompositionContentAutomationProviderRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentEventArgs> = L"Microsoft.UI.Composition.Experimental.IExpCompositionContentEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentFactory> = L"Microsoft.UI.Composition.Experimental.IExpCompositionContentFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSite> = L"Microsoft.UI.Composition.Experimental.IExpCompositionContentSite";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSiteEventArgs> = L"Microsoft.UI.Composition.Experimental.IExpCompositionContentSiteEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSiteFactory> = L"Microsoft.UI.Composition.Experimental.IExpCompositionContentSiteFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentStatics> = L"Microsoft.UI.Composition.Experimental.IExpCompositionContentStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChanged> = L"Microsoft.UI.Composition.Experimental.IExpCompositionPropertyChanged";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener> = L"Microsoft.UI.Composition.Experimental.IExpCompositionPropertyChangedListener";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionVisualSurfaceStatics> = L"Microsoft.UI.Composition.Experimental.IExpCompositionVisualSurfaceStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Experimental::IExpCompositor> = L"Microsoft.UI.Composition.Experimental.IExpCompositor";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost> = L"Microsoft.UI.Composition.Experimental.IExpContentTopLevelHost";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Composition::Experimental::IExpVisual> = L"Microsoft.UI.Composition.Experimental.IExpVisual";
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent>{ 0x797434AC,0x0DB8,0x5D91,{ 0xB5,0xEC,0xB7,0x8C,0x79,0x09,0x9E,0x71 } }; // 797434AC-0DB8-5D91-B5EC-B78C79099E71
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentAutomationProviderRequestedEventArgs>{ 0xB2539FAA,0xF8A7,0x580E,{ 0xB7,0xBA,0xA8,0x7C,0x91,0x6D,0x53,0x1B } }; // B2539FAA-F8A7-580E-B7BA-A87C916D531B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentEventArgs>{ 0xAE73101F,0xCAA8,0x5194,{ 0xBA,0x00,0x77,0x28,0x4B,0x77,0x6F,0xD3 } }; // AE73101F-CAA8-5194-BA00-77284B776FD3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentFactory>{ 0x1F44103A,0x6222,0x5B72,{ 0xA6,0x63,0x3A,0xDC,0x17,0x56,0x1D,0xCD } }; // 1F44103A-6222-5B72-A663-3ADC17561DCD
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSite>{ 0xEA23F03E,0x4FB3,0x55EB,{ 0xBC,0x91,0xA5,0x99,0xD7,0x04,0x90,0xCA } }; // EA23F03E-4FB3-55EB-BC91-A599D70490CA
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSiteEventArgs>{ 0xD103FEA8,0xE3F2,0x5639,{ 0x94,0x55,0x05,0x29,0x57,0x3B,0x98,0xD3 } }; // D103FEA8-E3F2-5639-9455-0529573B98D3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSiteFactory>{ 0xDDCA9A28,0x42A9,0x544F,{ 0x91,0xB3,0x47,0xFB,0x35,0xB0,0xDC,0x35 } }; // DDCA9A28-42A9-544F-91B3-47FB35B0DC35
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentStatics>{ 0x1292B60A,0x3F39,0x5C71,{ 0xB8,0x27,0x98,0xEF,0x24,0xF4,0x11,0x11 } }; // 1292B60A-3F39-5C71-B827-98EF24F41111
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChanged>{ 0x12B579A9,0x6A27,0x5CDE,{ 0xA2,0xA1,0xC5,0x57,0xBB,0x7D,0xFD,0xB3 } }; // 12B579A9-6A27-5CDE-A2A1-C557BB7DFDB3
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener>{ 0x5F9C3D96,0x1E77,0x5980,{ 0x8B,0x28,0x7A,0x9B,0x86,0x14,0xA8,0x63 } }; // 5F9C3D96-1E77-5980-8B28-7A9B8614A863
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionVisualSurfaceStatics>{ 0x46193461,0x9018,0x5674,{ 0xA0,0x9C,0x4A,0xE6,0xA2,0x9D,0xAA,0x35 } }; // 46193461-9018-5674-A09C-4AE6A29DAA35
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Experimental::IExpCompositor>{ 0xDDFE7441,0x66C9,0x5654,{ 0x9E,0x80,0xFF,0x26,0x77,0x29,0x59,0x95 } }; // DDFE7441-66C9-5654-9E80-FF2677295995
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost>{ 0x2376F7C0,0xF61F,0x5C9B,{ 0xAD,0x22,0x85,0xAE,0x22,0x4F,0xEA,0xE2 } }; // 2376F7C0-F61F-5C9B-AD22-85AE224FEAE2
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Composition::Experimental::IExpVisual>{ 0x8FACCF79,0x665B,0x578F,{ 0x81,0x97,0xF8,0xA6,0x4F,0x88,0x33,0xD6 } }; // 8FACCF79-665B-578F-8197-F8A64F8833D6
    template <> struct default_interface<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContent>{ using type = winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent; };
    template <> struct default_interface<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentAutomationProviderRequestedEventArgs>{ using type = winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentAutomationProviderRequestedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentEventArgs>{ using type = winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentSite>{ using type = winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSite; };
    template <> struct default_interface<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentSiteEventArgs>{ using type = winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSiteEventArgs; };
    template <> struct abi<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ActualSize(winrt::Windows::Foundation::Numerics::float2*) noexcept = 0;
            virtual int32_t __stdcall get_AppData(void**) noexcept = 0;
            virtual int32_t __stdcall put_AppData(void*) noexcept = 0;
            virtual int32_t __stdcall get_Compositor(void**) noexcept = 0;
            virtual int32_t __stdcall get_DispatcherQueue(void**) noexcept = 0;
            virtual int32_t __stdcall get_Id(uint64_t*) noexcept = 0;
            virtual int32_t __stdcall get_InputSite(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsContentVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsContentVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsHitTestAlways(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsHitTestAlways(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsSiteVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall get_Orientation(winrt::Windows::Foundation::Numerics::float3*) noexcept = 0;
            virtual int32_t __stdcall get_RasterizationScale(float*) noexcept = 0;
            virtual int32_t __stdcall get_RequestedSize(winrt::Windows::Foundation::Numerics::float2*) noexcept = 0;
            virtual int32_t __stdcall put_RequestedSize(winrt::Windows::Foundation::Numerics::float2) noexcept = 0;
            virtual int32_t __stdcall get_Root(void**) noexcept = 0;
            virtual int32_t __stdcall put_Root(void*) noexcept = 0;
            virtual int32_t __stdcall get_TopLevelHost(void**) noexcept = 0;
            virtual int32_t __stdcall CreateStateChangedDeferral(void**) noexcept = 0;
            virtual int32_t __stdcall add_AutomationProviderRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_AutomationProviderRequested(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Closed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Closed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_StateChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_StateChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentAutomationProviderRequestedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_AutomationProvider(void**) noexcept = 0;
            virtual int32_t __stdcall put_AutomationProvider(void*) noexcept = 0;
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSite>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ActualSize(winrt::Windows::Foundation::Numerics::float2*) noexcept = 0;
            virtual int32_t __stdcall put_ActualSize(winrt::Windows::Foundation::Numerics::float2) noexcept = 0;
            virtual int32_t __stdcall get_Compositor(void**) noexcept = 0;
            virtual int32_t __stdcall get_DispatcherQueue(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsSiteVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSiteVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_RasterizationScale(float*) noexcept = 0;
            virtual int32_t __stdcall put_RasterizationScale(float) noexcept = 0;
            virtual int32_t __stdcall get_RequestedSize(winrt::Windows::Foundation::Numerics::float2*) noexcept = 0;
            virtual int32_t __stdcall get_SiteVisual(void**) noexcept = 0;
            virtual int32_t __stdcall get_TopLevelHost(void**) noexcept = 0;
            virtual int32_t __stdcall put_TopLevelHost(void*) noexcept = 0;
            virtual int32_t __stdcall TryCreateContentDeferral(void**) noexcept = 0;
            virtual int32_t __stdcall add_ContentRequestsChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ContentRequestsChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSiteEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSiteFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Create(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChanged>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall SetPropertyChangedListener(int32_t, void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall NotifyBooleanPropertyChanged(void*, int32_t, bool) noexcept = 0;
            virtual int32_t __stdcall NotifyColorPropertyChanged(void*, int32_t, struct struct_Windows_UI_Color) noexcept = 0;
            virtual int32_t __stdcall NotifyMatrix3x2PropertyChanged(void*, int32_t, winrt::Windows::Foundation::Numerics::float3x2) noexcept = 0;
            virtual int32_t __stdcall NotifyMatrix4x4PropertyChanged(void*, int32_t, winrt::Windows::Foundation::Numerics::float4x4) noexcept = 0;
            virtual int32_t __stdcall NotifyReferencePropertyChanged(void*, int32_t) noexcept = 0;
            virtual int32_t __stdcall NotifySinglePropertyChanged(void*, int32_t, float) noexcept = 0;
            virtual int32_t __stdcall NotifyVector2PropertyChanged(void*, int32_t, winrt::Windows::Foundation::Numerics::float2) noexcept = 0;
            virtual int32_t __stdcall NotifyVector3PropertyChanged(void*, int32_t, winrt::Windows::Foundation::Numerics::float3) noexcept = 0;
            virtual int32_t __stdcall NotifyVector4PropertyChanged(void*, int32_t, winrt::Windows::Foundation::Numerics::float4) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionVisualSurfaceStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateVisualSurfaceWithRealizationSize(void*, struct struct_Windows_Graphics_SizeInt32, bool, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Experimental::IExpCompositor>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall OpenSharedManipulationTransformFromHandle(uint64_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CurrentOrientation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_DisplayId(struct struct_Microsoft_UI_DisplayId*) noexcept = 0;
            virtual int32_t __stdcall get_DisplayScale(float*) noexcept = 0;
            virtual int32_t __stdcall get_NativeOrientation(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_WindowId(struct struct_Microsoft_UI_WindowId*) noexcept = 0;
            virtual int32_t __stdcall add_StateChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_StateChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Composition::Experimental::IExpVisual>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall SetInteraction(void*) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Experimental_IExpCompositionContent
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float2) ActualSize() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::IInspectable) AppData() const;
        WINRT_IMPL_AUTO(void) AppData(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::Compositor) Compositor() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Dispatching::DispatcherQueue) DispatcherQueue() const;
        [[nodiscard]] WINRT_IMPL_AUTO(uint64_t) Id() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpInputSite) InputSite() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsContentVisible() const;
        WINRT_IMPL_AUTO(void) IsContentVisible(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsHitTestAlways() const;
        WINRT_IMPL_AUTO(void) IsHitTestAlways(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsSiteVisible() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float3) Orientation() const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) RasterizationScale() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float2) RequestedSize() const;
        WINRT_IMPL_AUTO(void) RequestedSize(winrt::Windows::Foundation::Numerics::float2 const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::Visual) Root() const;
        WINRT_IMPL_AUTO(void) Root(winrt::Microsoft::UI::Composition::Visual const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost) TopLevelHost() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::CompositionNotificationDeferral) CreateStateChangedDeferral() const;
        WINRT_IMPL_AUTO(winrt::event_token) AutomationProviderRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContent, winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentAutomationProviderRequestedEventArgs> const& handler) const;
        using AutomationProviderRequested_revoker = impl::event_revoker<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent, &impl::abi_t<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent>::remove_AutomationProviderRequested>;
        [[nodiscard]] AutomationProviderRequested_revoker AutomationProviderRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContent, winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentAutomationProviderRequestedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) AutomationProviderRequested(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) Closed(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContent, winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentEventArgs> const& handler) const;
        using Closed_revoker = impl::event_revoker<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent, &impl::abi_t<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent>::remove_Closed>;
        [[nodiscard]] Closed_revoker Closed(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContent, winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) Closed(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) StateChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContent, winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentEventArgs> const& handler) const;
        using StateChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent, &impl::abi_t<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent>::remove_StateChanged>;
        [[nodiscard]] StateChanged_revoker StateChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContent, winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) StateChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContent>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Experimental_IExpCompositionContent<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Experimental_IExpCompositionContentAutomationProviderRequestedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::IInspectable) AutomationProvider() const;
        WINRT_IMPL_AUTO(void) AutomationProvider(winrt::Windows::Foundation::IInspectable const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) Handled() const;
        WINRT_IMPL_AUTO(void) Handled(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentAutomationProviderRequestedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Experimental_IExpCompositionContentAutomationProviderRequestedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Experimental_IExpCompositionContentEventArgs
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Experimental_IExpCompositionContentEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Experimental_IExpCompositionContentFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Experimental_IExpCompositionContentFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Experimental_IExpCompositionContentSite
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float2) ActualSize() const;
        WINRT_IMPL_AUTO(void) ActualSize(winrt::Windows::Foundation::Numerics::float2 const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::Compositor) Compositor() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Dispatching::DispatcherQueue) DispatcherQueue() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsSiteVisible() const;
        WINRT_IMPL_AUTO(void) IsSiteVisible(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) RasterizationScale() const;
        WINRT_IMPL_AUTO(void) RasterizationScale(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Numerics::float2) RequestedSize() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::Visual) SiteVisual() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost) TopLevelHost() const;
        WINRT_IMPL_AUTO(void) TopLevelHost(winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost const& value) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::CompositionNotificationDeferral) TryCreateContentDeferral() const;
        WINRT_IMPL_AUTO(winrt::event_token) ContentRequestsChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentSite, winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentSiteEventArgs> const& handler) const;
        using ContentRequestsChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSite, &impl::abi_t<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSite>::remove_ContentRequestsChanged>;
        [[nodiscard]] ContentRequestsChanged_revoker ContentRequestsChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentSite, winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContentSiteEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) ContentRequestsChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSite>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Experimental_IExpCompositionContentSite<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Experimental_IExpCompositionContentSiteEventArgs
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSiteEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Experimental_IExpCompositionContentSiteEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Experimental_IExpCompositionContentSiteFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentSiteFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Experimental_IExpCompositionContentSiteFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Experimental_IExpCompositionContentStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContent) Create(winrt::Microsoft::UI::Composition::Compositor const& compositor) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionContentStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Experimental_IExpCompositionContentStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Experimental_IExpCompositionPropertyChanged
    {
        WINRT_IMPL_AUTO(void) SetPropertyChangedListener(winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property, winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener const& listener) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChanged>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Experimental_IExpCompositionPropertyChanged<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Experimental_IExpCompositionPropertyChangedListener
    {
        WINRT_IMPL_AUTO(void) NotifyBooleanPropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& target, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property, bool value) const;
        WINRT_IMPL_AUTO(void) NotifyColorPropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& target, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property, winrt::Windows::UI::Color const& value) const;
        WINRT_IMPL_AUTO(void) NotifyMatrix3x2PropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& target, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property, winrt::Windows::Foundation::Numerics::float3x2 const& value) const;
        WINRT_IMPL_AUTO(void) NotifyMatrix4x4PropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& target, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property, winrt::Windows::Foundation::Numerics::float4x4 const& value) const;
        WINRT_IMPL_AUTO(void) NotifyReferencePropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& target, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property) const;
        WINRT_IMPL_AUTO(void) NotifySinglePropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& target, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property, float value) const;
        WINRT_IMPL_AUTO(void) NotifyVector2PropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& target, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property, winrt::Windows::Foundation::Numerics::float2 const& value) const;
        WINRT_IMPL_AUTO(void) NotifyVector3PropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& target, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property, winrt::Windows::Foundation::Numerics::float3 const& value) const;
        WINRT_IMPL_AUTO(void) NotifyVector4PropertyChanged(winrt::Microsoft::UI::Composition::CompositionObject const& target, winrt::Microsoft::UI::Composition::Experimental::ExpExpressionNotificationProperty const& property, winrt::Windows::Foundation::Numerics::float4 const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionPropertyChangedListener>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Experimental_IExpCompositionPropertyChangedListener<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Experimental_IExpCompositionVisualSurfaceStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::CompositionVisualSurface) CreateVisualSurface(winrt::Microsoft::UI::Composition::Compositor const& compositor, winrt::Windows::Graphics::SizeInt32 const& realizationSize, bool frozen) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Experimental::IExpCompositionVisualSurfaceStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Experimental_IExpCompositionVisualSurfaceStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Experimental_IExpCompositor
    {
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::IInspectable) OpenSharedManipulationTransformFromHandle(uint64_t handle) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Experimental::IExpCompositor>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Experimental_IExpCompositor<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Experimental_IExpContentTopLevelHost
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::Experimental::ExpDisplayOrientations) CurrentOrientation() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::DisplayId) DisplayId() const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) DisplayScale() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::Experimental::ExpDisplayOrientations) NativeOrientation() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::WindowId) WindowId() const;
        WINRT_IMPL_AUTO(winrt::event_token) StateChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using StateChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost, &impl::abi_t<winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost>::remove_StateChanged>;
        [[nodiscard]] StateChanged_revoker StateChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost, winrt::Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) StateChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Experimental_IExpContentTopLevelHost<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Composition_Experimental_IExpVisual
    {
        WINRT_IMPL_AUTO(void) SetInteraction(winrt::Windows::Foundation::IInspectable const& interaction) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Composition::Experimental::IExpVisual>
    {
        template <typename D> using type = consume_Microsoft_UI_Composition_Experimental_IExpVisual<D>;
    };
}
#endif
