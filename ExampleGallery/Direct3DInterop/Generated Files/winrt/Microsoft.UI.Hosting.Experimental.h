// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210806.1

#pragma once
#ifndef WINRT_Microsoft_UI_Hosting_Experimental_H
#define WINRT_Microsoft_UI_Hosting_Experimental_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.210806.1"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.210806.1"
#include "winrt/Microsoft.UI.h"
#include "winrt/impl/Microsoft.UI.2.h"
#include "winrt/impl/Microsoft.UI.Composition.2.h"
#include "winrt/impl/Microsoft.UI.Composition.Experimental.2.h"
#include "winrt/impl/Microsoft.UI.Input.Experimental.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.UI.2.h"
#include "winrt/impl/Windows.UI.Core.2.h"
#include "winrt/impl/Microsoft.UI.Hosting.Experimental.2.h"
namespace winrt::impl
{
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContent) consume_Microsoft_UI_Hosting_Experimental_IExpContentBridge<D>::Content() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Hosting::Experimental::IExpContentBridge)->get_Content(&value));
        return winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContent{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Hosting_Experimental_IExpContentBridge<D>::Connect(winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContent const& content) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Hosting::Experimental::IExpContentBridge)->Connect(*(void**)(&content)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Hosting::Experimental::ExpCoreWindowTopLevelHost) consume_Microsoft_UI_Hosting_Experimental_IExpCoreWindowBridge<D>::TopLevelHost() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Hosting::Experimental::IExpCoreWindowBridge)->get_TopLevelHost(&value));
        return winrt::Microsoft::UI::Hosting::Experimental::ExpCoreWindowTopLevelHost{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Hosting::Experimental::ExpPopupWindowBridge) consume_Microsoft_UI_Hosting_Experimental_IExpCoreWindowBridge<D>::CreatePopup() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Hosting::Experimental::IExpCoreWindowBridge)->CreatePopup(&result));
        return winrt::Microsoft::UI::Hosting::Experimental::ExpPopupWindowBridge{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Hosting::Experimental::ExpCoreWindowBridge) consume_Microsoft_UI_Hosting_Experimental_IExpCoreWindowBridgeStatics<D>::Create(winrt::Microsoft::UI::Composition::Compositor const& compositor, winrt::Windows::UI::Core::CoreWindow const& coreWindow) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Hosting::Experimental::IExpCoreWindowBridgeStatics)->Create(*(void**)(&compositor), *(void**)(&coreWindow), &result));
        return winrt::Microsoft::UI::Hosting::Experimental::ExpCoreWindowBridge{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Hosting_Experimental_IExpCoreWindowBridgeStatics<D>::IsSupported() const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Hosting::Experimental::IExpCoreWindowBridgeStatics)->IsSupported(&result));
        return result;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::WindowId) consume_Microsoft_UI_Hosting_Experimental_IExpDesktopWindowBridge<D>::ChildWindowId() const
    {
        winrt::Microsoft::UI::WindowId value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowBridge)->get_ChildWindowId(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Hosting_Experimental_IExpDesktopWindowBridge<D>::FillTopLevelWindow() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowBridge)->get_FillTopLevelWindow(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Hosting_Experimental_IExpDesktopWindowBridge<D>::FillTopLevelWindow(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowBridge)->put_FillTopLevelWindow(value));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Hosting::Experimental::ExpDesktopWindowTopLevelHost) consume_Microsoft_UI_Hosting_Experimental_IExpDesktopWindowBridge<D>::TopLevelHost() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowBridge)->get_TopLevelHost(&value));
        return winrt::Microsoft::UI::Hosting::Experimental::ExpDesktopWindowTopLevelHost{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Hosting::Experimental::ExpPopupWindowBridge) consume_Microsoft_UI_Hosting_Experimental_IExpDesktopWindowBridge<D>::CreatePopup() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowBridge)->CreatePopup(&result));
        return winrt::Microsoft::UI::Hosting::Experimental::ExpPopupWindowBridge{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationResult) consume_Microsoft_UI_Hosting_Experimental_IExpDesktopWindowBridge<D>::NavigateFocus(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest const& request) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowBridge)->NavigateFocus(*(void**)(&request), &result));
        return winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationResult{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Hosting_Experimental_IExpDesktopWindowBridge<D>::PreTranslateKeyboardMessage(uint64_t windowHandle, uint32_t keyboardMessage, uint32_t virtualKey, uint64_t keyInfo) const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowBridge)->PreTranslateKeyboardMessage(windowHandle, keyboardMessage, virtualKey, keyInfo, &result));
        return result;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Hosting_Experimental_IExpDesktopWindowBridge<D>::SetOverrideScaleFactor(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowBridge)->SetOverrideScaleFactor(value));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Hosting_Experimental_IExpDesktopWindowBridge<D>::TakeFocusRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Hosting::Experimental::ExpDesktopWindowBridge, winrt::Microsoft::UI::Input::Experimental::ExpNavigateFocusRequestedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowBridge)->add_TakeFocusRequested(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Hosting_Experimental_IExpDesktopWindowBridge<D>::TakeFocusRequested_revoker consume_Microsoft_UI_Hosting_Experimental_IExpDesktopWindowBridge<D>::TakeFocusRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Hosting::Experimental::ExpDesktopWindowBridge, winrt::Microsoft::UI::Input::Experimental::ExpNavigateFocusRequestedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, TakeFocusRequested_revoker>(this, TakeFocusRequested(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Hosting_Experimental_IExpDesktopWindowBridge<D>::TakeFocusRequested(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowBridge)->remove_TakeFocusRequested(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Hosting::Experimental::ExpDesktopWindowBridge) consume_Microsoft_UI_Hosting_Experimental_IExpDesktopWindowBridgeStatics<D>::Create(winrt::Microsoft::UI::Composition::Compositor const& compositor, winrt::Microsoft::UI::WindowId const& parentWindowId) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowBridgeStatics)->Create(*(void**)(&compositor), impl::bind_in(parentWindowId), &result));
        return winrt::Microsoft::UI::Hosting::Experimental::ExpDesktopWindowBridge{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Hosting_Experimental_IExpDesktopWindowBridgeStatics<D>::IsSupported() const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowBridgeStatics)->IsSupported(&result));
        return result;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Hosting::Experimental::ExpDesktopWindowTopLevelHost) consume_Microsoft_UI_Hosting_Experimental_IExpDesktopWindowTopLevelHostStatics<D>::GetForWindowId(winrt::Microsoft::UI::WindowId const& childWindowId) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowTopLevelHostStatics)->GetForWindowId(impl::bind_in(childWindowId), &result));
        return winrt::Microsoft::UI::Hosting::Experimental::ExpDesktopWindowTopLevelHost{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::WindowId) consume_Microsoft_UI_Hosting_Experimental_IExpPopupWindowBridge<D>::PopupWindowId() const
    {
        winrt::Microsoft::UI::WindowId value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Hosting::Experimental::IExpPopupWindowBridge)->get_PopupWindowId(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Hosting_Experimental_IExpPopupWindowBridgeStatics<D>::IsSupported() const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Hosting::Experimental::IExpPopupWindowBridgeStatics)->IsSupported(&result));
        return result;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::Visual) consume_Microsoft_UI_Hosting_Experimental_IExpSystemVisualBridge<D>::BridgeVisual() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Hosting::Experimental::IExpSystemVisualBridge)->get_BridgeVisual(&value));
        return winrt::Microsoft::UI::Composition::Visual{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Color) consume_Microsoft_UI_Hosting_Experimental_IExpSystemVisualBridge<D>::BackgroundColor() const
    {
        winrt::Windows::UI::Color value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Hosting::Experimental::IExpSystemVisualBridge)->get_BackgroundColor(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Hosting_Experimental_IExpSystemVisualBridge<D>::BackgroundColor(winrt::Windows::UI::Color const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Hosting::Experimental::IExpSystemVisualBridge)->put_BackgroundColor(impl::bind_in(value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Hosting::Experimental::ExpSystemVisualBridge) consume_Microsoft_UI_Hosting_Experimental_IExpSystemVisualBridgeStatics<D>::Create(winrt::Microsoft::UI::Composition::Compositor const& compositor) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Hosting::Experimental::IExpSystemVisualBridgeStatics)->Create(*(void**)(&compositor), &result));
        return winrt::Microsoft::UI::Hosting::Experimental::ExpSystemVisualBridge{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Hosting_Experimental_IExpSystemVisualBridgeStatics<D>::IsSupported() const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Hosting::Experimental::IExpSystemVisualBridgeStatics)->IsSupported(&result));
        return result;
    }
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Hosting::Experimental::IExpContentBridge> : produce_base<D, winrt::Microsoft::UI::Hosting::Experimental::IExpContentBridge>
    {
        int32_t __stdcall get_Content(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContent>(this->shim().Content());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Connect(void* content) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Connect(*reinterpret_cast<winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContent const*>(&content));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Hosting::Experimental::IExpCoreWindowBridge> : produce_base<D, winrt::Microsoft::UI::Hosting::Experimental::IExpCoreWindowBridge>
    {
        int32_t __stdcall get_TopLevelHost(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::Hosting::Experimental::ExpCoreWindowTopLevelHost>(this->shim().TopLevelHost());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreatePopup(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Hosting::Experimental::ExpPopupWindowBridge>(this->shim().CreatePopup());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Hosting::Experimental::IExpCoreWindowBridgeStatics> : produce_base<D, winrt::Microsoft::UI::Hosting::Experimental::IExpCoreWindowBridgeStatics>
    {
        int32_t __stdcall Create(void* compositor, void* coreWindow, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Hosting::Experimental::ExpCoreWindowBridge>(this->shim().Create(*reinterpret_cast<winrt::Microsoft::UI::Composition::Compositor const*>(&compositor), *reinterpret_cast<winrt::Windows::UI::Core::CoreWindow const*>(&coreWindow)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsSupported(bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().IsSupported());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowBridge> : produce_base<D, winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowBridge>
    {
        int32_t __stdcall get_ChildWindowId(struct struct_Microsoft_UI_WindowId* value) noexcept final try
        {
            zero_abi<winrt::Microsoft::UI::WindowId>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::WindowId>(this->shim().ChildWindowId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_FillTopLevelWindow(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().FillTopLevelWindow());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_FillTopLevelWindow(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().FillTopLevelWindow(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_TopLevelHost(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::Hosting::Experimental::ExpDesktopWindowTopLevelHost>(this->shim().TopLevelHost());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreatePopup(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Hosting::Experimental::ExpPopupWindowBridge>(this->shim().CreatePopup());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall NavigateFocus(void* request, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationResult>(this->shim().NavigateFocus(*reinterpret_cast<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest const*>(&request)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall PreTranslateKeyboardMessage(uint64_t windowHandle, uint32_t keyboardMessage, uint32_t virtualKey, uint64_t keyInfo, bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().PreTranslateKeyboardMessage(windowHandle, keyboardMessage, virtualKey, keyInfo));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetOverrideScaleFactor(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetOverrideScaleFactor(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall add_TakeFocusRequested(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().TakeFocusRequested(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Hosting::Experimental::ExpDesktopWindowBridge, winrt::Microsoft::UI::Input::Experimental::ExpNavigateFocusRequestedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_TakeFocusRequested(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TakeFocusRequested(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowBridgeStatics> : produce_base<D, winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowBridgeStatics>
    {
        int32_t __stdcall Create(void* compositor, struct struct_Microsoft_UI_WindowId parentWindowId, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Hosting::Experimental::ExpDesktopWindowBridge>(this->shim().Create(*reinterpret_cast<winrt::Microsoft::UI::Composition::Compositor const*>(&compositor), *reinterpret_cast<winrt::Microsoft::UI::WindowId const*>(&parentWindowId)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsSupported(bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().IsSupported());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowTopLevelHostStatics> : produce_base<D, winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowTopLevelHostStatics>
    {
        int32_t __stdcall GetForWindowId(struct struct_Microsoft_UI_WindowId childWindowId, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Hosting::Experimental::ExpDesktopWindowTopLevelHost>(this->shim().GetForWindowId(*reinterpret_cast<winrt::Microsoft::UI::WindowId const*>(&childWindowId)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Hosting::Experimental::IExpPopupWindowBridge> : produce_base<D, winrt::Microsoft::UI::Hosting::Experimental::IExpPopupWindowBridge>
    {
        int32_t __stdcall get_PopupWindowId(struct struct_Microsoft_UI_WindowId* value) noexcept final try
        {
            zero_abi<winrt::Microsoft::UI::WindowId>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::WindowId>(this->shim().PopupWindowId());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Hosting::Experimental::IExpPopupWindowBridgeStatics> : produce_base<D, winrt::Microsoft::UI::Hosting::Experimental::IExpPopupWindowBridgeStatics>
    {
        int32_t __stdcall IsSupported(bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().IsSupported());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Hosting::Experimental::IExpSystemVisualBridge> : produce_base<D, winrt::Microsoft::UI::Hosting::Experimental::IExpSystemVisualBridge>
    {
        int32_t __stdcall get_BridgeVisual(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::Composition::Visual>(this->shim().BridgeVisual());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_BackgroundColor(struct struct_Windows_UI_Color* value) noexcept final try
        {
            zero_abi<winrt::Windows::UI::Color>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Color>(this->shim().BackgroundColor());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_BackgroundColor(struct struct_Windows_UI_Color value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().BackgroundColor(*reinterpret_cast<winrt::Windows::UI::Color const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Hosting::Experimental::IExpSystemVisualBridgeStatics> : produce_base<D, winrt::Microsoft::UI::Hosting::Experimental::IExpSystemVisualBridgeStatics>
    {
        int32_t __stdcall Create(void* compositor, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Hosting::Experimental::ExpSystemVisualBridge>(this->shim().Create(*reinterpret_cast<winrt::Microsoft::UI::Composition::Compositor const*>(&compositor)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsSupported(bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().IsSupported());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Hosting::Experimental
{
    inline auto ExpCoreWindowBridge::Create(winrt::Microsoft::UI::Composition::Compositor const& compositor, winrt::Windows::UI::Core::CoreWindow const& coreWindow)
    {
        return impl::call_factory<ExpCoreWindowBridge, IExpCoreWindowBridgeStatics>([&](IExpCoreWindowBridgeStatics const& f) { return f.Create(compositor, coreWindow); });
    }
    inline auto ExpCoreWindowBridge::IsSupported()
    {
        return impl::call_factory_cast<bool(*)(IExpCoreWindowBridgeStatics const&), ExpCoreWindowBridge, IExpCoreWindowBridgeStatics>([](IExpCoreWindowBridgeStatics const& f) { return f.IsSupported(); });
    }
    inline auto ExpDesktopWindowBridge::Create(winrt::Microsoft::UI::Composition::Compositor const& compositor, winrt::Microsoft::UI::WindowId const& parentWindowId)
    {
        return impl::call_factory<ExpDesktopWindowBridge, IExpDesktopWindowBridgeStatics>([&](IExpDesktopWindowBridgeStatics const& f) { return f.Create(compositor, parentWindowId); });
    }
    inline auto ExpDesktopWindowBridge::IsSupported()
    {
        return impl::call_factory_cast<bool(*)(IExpDesktopWindowBridgeStatics const&), ExpDesktopWindowBridge, IExpDesktopWindowBridgeStatics>([](IExpDesktopWindowBridgeStatics const& f) { return f.IsSupported(); });
    }
    inline auto ExpDesktopWindowTopLevelHost::GetForWindowId(winrt::Microsoft::UI::WindowId const& childWindowId)
    {
        return impl::call_factory<ExpDesktopWindowTopLevelHost, IExpDesktopWindowTopLevelHostStatics>([&](IExpDesktopWindowTopLevelHostStatics const& f) { return f.GetForWindowId(childWindowId); });
    }
    inline auto ExpPopupWindowBridge::IsSupported()
    {
        return impl::call_factory_cast<bool(*)(IExpPopupWindowBridgeStatics const&), ExpPopupWindowBridge, IExpPopupWindowBridgeStatics>([](IExpPopupWindowBridgeStatics const& f) { return f.IsSupported(); });
    }
    inline auto ExpSystemVisualBridge::Create(winrt::Microsoft::UI::Composition::Compositor const& compositor)
    {
        return impl::call_factory<ExpSystemVisualBridge, IExpSystemVisualBridgeStatics>([&](IExpSystemVisualBridgeStatics const& f) { return f.Create(compositor); });
    }
    inline auto ExpSystemVisualBridge::IsSupported()
    {
        return impl::call_factory_cast<bool(*)(IExpSystemVisualBridgeStatics const&), ExpSystemVisualBridge, IExpSystemVisualBridgeStatics>([](IExpSystemVisualBridgeStatics const& f) { return f.IsSupported(); });
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::UI::Hosting::Experimental::IExpContentBridge> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Hosting::Experimental::IExpCoreWindowBridge> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Hosting::Experimental::IExpCoreWindowBridgeStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowBridge> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowBridgeStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowTopLevelHostStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Hosting::Experimental::IExpPopupWindowBridge> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Hosting::Experimental::IExpPopupWindowBridgeStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Hosting::Experimental::IExpSystemVisualBridge> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Hosting::Experimental::IExpSystemVisualBridgeStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Hosting::Experimental::ExpCoreWindowBridge> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Hosting::Experimental::ExpCoreWindowTopLevelHost> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Hosting::Experimental::ExpDesktopWindowBridge> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Hosting::Experimental::ExpDesktopWindowTopLevelHost> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Hosting::Experimental::ExpPopupWindowBridge> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Hosting::Experimental::ExpSystemVisualBridge> : winrt::impl::hash_base {};
#endif
}
#endif
