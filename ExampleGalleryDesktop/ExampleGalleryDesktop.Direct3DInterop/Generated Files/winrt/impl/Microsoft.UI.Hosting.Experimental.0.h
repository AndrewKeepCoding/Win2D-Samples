// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210806.1

#pragma once
#ifndef WINRT_Microsoft_UI_Hosting_Experimental_0_H
#define WINRT_Microsoft_UI_Hosting_Experimental_0_H
WINRT_EXPORT namespace winrt::Microsoft::UI
{
    struct WindowId;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Composition
{
    struct Compositor;
    struct Visual;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Composition::Experimental
{
    struct ExpCompositionContent;
    struct IExpContentTopLevelHost;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Input::Experimental
{
    struct ExpFocusNavigationRequest;
    struct ExpFocusNavigationResult;
    struct ExpNavigateFocusRequestedEventArgs;
}
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    struct EventRegistrationToken;
    template <typename TSender, typename TResult> struct __declspec(empty_bases) TypedEventHandler;
}
WINRT_EXPORT namespace winrt::Windows::UI
{
    struct Color;
}
WINRT_EXPORT namespace winrt::Windows::UI::Core
{
    struct CoreWindow;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Hosting::Experimental
{
    struct IExpContentBridge;
    struct IExpCoreWindowBridge;
    struct IExpCoreWindowBridgeStatics;
    struct IExpDesktopWindowBridge;
    struct IExpDesktopWindowBridgeStatics;
    struct IExpDesktopWindowTopLevelHostStatics;
    struct IExpPopupWindowBridge;
    struct IExpPopupWindowBridgeStatics;
    struct IExpSystemVisualBridge;
    struct IExpSystemVisualBridgeStatics;
    struct ExpCoreWindowBridge;
    struct ExpCoreWindowTopLevelHost;
    struct ExpDesktopWindowBridge;
    struct ExpDesktopWindowTopLevelHost;
    struct ExpPopupWindowBridge;
    struct ExpSystemVisualBridge;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::UI::Hosting::Experimental::IExpContentBridge>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Hosting::Experimental::IExpCoreWindowBridge>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Hosting::Experimental::IExpCoreWindowBridgeStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowBridge>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowBridgeStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowTopLevelHostStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Hosting::Experimental::IExpPopupWindowBridge>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Hosting::Experimental::IExpPopupWindowBridgeStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Hosting::Experimental::IExpSystemVisualBridge>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Hosting::Experimental::IExpSystemVisualBridgeStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Hosting::Experimental::ExpCoreWindowBridge>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Hosting::Experimental::ExpCoreWindowTopLevelHost>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Hosting::Experimental::ExpDesktopWindowBridge>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Hosting::Experimental::ExpDesktopWindowTopLevelHost>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Hosting::Experimental::ExpPopupWindowBridge>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Hosting::Experimental::ExpSystemVisualBridge>{ using type = class_category; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Hosting::Experimental::ExpCoreWindowBridge> = L"Microsoft.UI.Hosting.Experimental.ExpCoreWindowBridge";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Hosting::Experimental::ExpCoreWindowTopLevelHost> = L"Microsoft.UI.Hosting.Experimental.ExpCoreWindowTopLevelHost";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Hosting::Experimental::ExpDesktopWindowBridge> = L"Microsoft.UI.Hosting.Experimental.ExpDesktopWindowBridge";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Hosting::Experimental::ExpDesktopWindowTopLevelHost> = L"Microsoft.UI.Hosting.Experimental.ExpDesktopWindowTopLevelHost";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Hosting::Experimental::ExpPopupWindowBridge> = L"Microsoft.UI.Hosting.Experimental.ExpPopupWindowBridge";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Hosting::Experimental::ExpSystemVisualBridge> = L"Microsoft.UI.Hosting.Experimental.ExpSystemVisualBridge";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Hosting::Experimental::IExpContentBridge> = L"Microsoft.UI.Hosting.Experimental.IExpContentBridge";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Hosting::Experimental::IExpCoreWindowBridge> = L"Microsoft.UI.Hosting.Experimental.IExpCoreWindowBridge";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Hosting::Experimental::IExpCoreWindowBridgeStatics> = L"Microsoft.UI.Hosting.Experimental.IExpCoreWindowBridgeStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowBridge> = L"Microsoft.UI.Hosting.Experimental.IExpDesktopWindowBridge";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowBridgeStatics> = L"Microsoft.UI.Hosting.Experimental.IExpDesktopWindowBridgeStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowTopLevelHostStatics> = L"Microsoft.UI.Hosting.Experimental.IExpDesktopWindowTopLevelHostStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Hosting::Experimental::IExpPopupWindowBridge> = L"Microsoft.UI.Hosting.Experimental.IExpPopupWindowBridge";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Hosting::Experimental::IExpPopupWindowBridgeStatics> = L"Microsoft.UI.Hosting.Experimental.IExpPopupWindowBridgeStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Hosting::Experimental::IExpSystemVisualBridge> = L"Microsoft.UI.Hosting.Experimental.IExpSystemVisualBridge";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Hosting::Experimental::IExpSystemVisualBridgeStatics> = L"Microsoft.UI.Hosting.Experimental.IExpSystemVisualBridgeStatics";
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Hosting::Experimental::IExpContentBridge>{ 0xF27A1057,0xECA2,0x5532,{ 0xA3,0x27,0x0F,0xB7,0x2F,0x49,0x1E,0xBB } }; // F27A1057-ECA2-5532-A327-0FB72F491EBB
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Hosting::Experimental::IExpCoreWindowBridge>{ 0x7062D9B2,0x2777,0x5091,{ 0x9D,0x9F,0x2F,0xE1,0xD2,0xC4,0x4E,0xF0 } }; // 7062D9B2-2777-5091-9D9F-2FE1D2C44EF0
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Hosting::Experimental::IExpCoreWindowBridgeStatics>{ 0xB888061B,0xD5DC,0x58A8,{ 0x9E,0x44,0xC8,0x81,0xEA,0x3A,0xAE,0xCB } }; // B888061B-D5DC-58A8-9E44-C881EA3AAECB
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowBridge>{ 0x12969091,0x75D9,0x554C,{ 0x9A,0x7A,0x41,0x1B,0x4F,0x7D,0xD2,0x11 } }; // 12969091-75D9-554C-9A7A-411B4F7DD211
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowBridgeStatics>{ 0x4DD9D544,0x3DDC,0x56B9,{ 0x96,0x82,0x6F,0xBD,0xCA,0xE9,0xB4,0x64 } }; // 4DD9D544-3DDC-56B9-9682-6FBDCAE9B464
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowTopLevelHostStatics>{ 0x8147E68F,0x978E,0x5A3C,{ 0xA3,0xFA,0x6F,0xE5,0x71,0x29,0x23,0x24 } }; // 8147E68F-978E-5A3C-A3FA-6FE571292324
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Hosting::Experimental::IExpPopupWindowBridge>{ 0x2EA5D840,0x9EA6,0x5BE2,{ 0xA2,0xBE,0x7D,0x01,0xEE,0x68,0x90,0x91 } }; // 2EA5D840-9EA6-5BE2-A2BE-7D01EE689091
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Hosting::Experimental::IExpPopupWindowBridgeStatics>{ 0x9DFC7ECC,0xC7C1,0x5952,{ 0x8A,0xAD,0x77,0xB8,0x22,0xF7,0xD4,0xC7 } }; // 9DFC7ECC-C7C1-5952-8AAD-77B822F7D4C7
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Hosting::Experimental::IExpSystemVisualBridge>{ 0xAF3AABAA,0xF231,0x5682,{ 0xBF,0x72,0x3B,0xE2,0x7E,0x60,0xF6,0xD1 } }; // AF3AABAA-F231-5682-BF72-3BE27E60F6D1
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Hosting::Experimental::IExpSystemVisualBridgeStatics>{ 0x29469AC9,0xFE18,0x540C,{ 0xB0,0xA8,0x06,0x0B,0xF7,0x61,0x8D,0x65 } }; // 29469AC9-FE18-540C-B0A8-060BF7618D65
    template <> struct default_interface<winrt::Microsoft::UI::Hosting::Experimental::ExpCoreWindowBridge>{ using type = winrt::Microsoft::UI::Hosting::Experimental::IExpCoreWindowBridge; };
    template <> struct default_interface<winrt::Microsoft::UI::Hosting::Experimental::ExpCoreWindowTopLevelHost>{ using type = winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost; };
    template <> struct default_interface<winrt::Microsoft::UI::Hosting::Experimental::ExpDesktopWindowBridge>{ using type = winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowBridge; };
    template <> struct default_interface<winrt::Microsoft::UI::Hosting::Experimental::ExpDesktopWindowTopLevelHost>{ using type = winrt::Microsoft::UI::Composition::Experimental::IExpContentTopLevelHost; };
    template <> struct default_interface<winrt::Microsoft::UI::Hosting::Experimental::ExpPopupWindowBridge>{ using type = winrt::Microsoft::UI::Hosting::Experimental::IExpPopupWindowBridge; };
    template <> struct default_interface<winrt::Microsoft::UI::Hosting::Experimental::ExpSystemVisualBridge>{ using type = winrt::Microsoft::UI::Hosting::Experimental::IExpSystemVisualBridge; };
    template <> struct abi<winrt::Microsoft::UI::Hosting::Experimental::IExpContentBridge>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Content(void**) noexcept = 0;
            virtual int32_t __stdcall Connect(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Hosting::Experimental::IExpCoreWindowBridge>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_TopLevelHost(void**) noexcept = 0;
            virtual int32_t __stdcall CreatePopup(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Hosting::Experimental::IExpCoreWindowBridgeStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Create(void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsSupported(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowBridge>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ChildWindowId(struct struct_Microsoft_UI_WindowId*) noexcept = 0;
            virtual int32_t __stdcall get_FillTopLevelWindow(bool*) noexcept = 0;
            virtual int32_t __stdcall put_FillTopLevelWindow(bool) noexcept = 0;
            virtual int32_t __stdcall get_TopLevelHost(void**) noexcept = 0;
            virtual int32_t __stdcall CreatePopup(void**) noexcept = 0;
            virtual int32_t __stdcall NavigateFocus(void*, void**) noexcept = 0;
            virtual int32_t __stdcall PreTranslateKeyboardMessage(uint64_t, uint32_t, uint32_t, uint64_t, bool*) noexcept = 0;
            virtual int32_t __stdcall SetOverrideScaleFactor(float) noexcept = 0;
            virtual int32_t __stdcall add_TakeFocusRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TakeFocusRequested(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowBridgeStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Create(void*, struct struct_Microsoft_UI_WindowId, void**) noexcept = 0;
            virtual int32_t __stdcall IsSupported(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowTopLevelHostStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GetForWindowId(struct struct_Microsoft_UI_WindowId, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Hosting::Experimental::IExpPopupWindowBridge>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PopupWindowId(struct struct_Microsoft_UI_WindowId*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Hosting::Experimental::IExpPopupWindowBridgeStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall IsSupported(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Hosting::Experimental::IExpSystemVisualBridge>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_BridgeVisual(void**) noexcept = 0;
            virtual int32_t __stdcall get_BackgroundColor(struct struct_Windows_UI_Color*) noexcept = 0;
            virtual int32_t __stdcall put_BackgroundColor(struct struct_Windows_UI_Color) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Hosting::Experimental::IExpSystemVisualBridgeStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Create(void*, void**) noexcept = 0;
            virtual int32_t __stdcall IsSupported(bool*) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_UI_Hosting_Experimental_IExpContentBridge
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContent) Content() const;
        WINRT_IMPL_AUTO(void) Connect(winrt::Microsoft::UI::Composition::Experimental::ExpCompositionContent const& content) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Hosting::Experimental::IExpContentBridge>
    {
        template <typename D> using type = consume_Microsoft_UI_Hosting_Experimental_IExpContentBridge<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Hosting_Experimental_IExpCoreWindowBridge
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Hosting::Experimental::ExpCoreWindowTopLevelHost) TopLevelHost() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Hosting::Experimental::ExpPopupWindowBridge) CreatePopup() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Hosting::Experimental::IExpCoreWindowBridge>
    {
        template <typename D> using type = consume_Microsoft_UI_Hosting_Experimental_IExpCoreWindowBridge<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Hosting_Experimental_IExpCoreWindowBridgeStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Hosting::Experimental::ExpCoreWindowBridge) Create(winrt::Microsoft::UI::Composition::Compositor const& compositor, winrt::Windows::UI::Core::CoreWindow const& coreWindow) const;
        WINRT_IMPL_AUTO(bool) IsSupported() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Hosting::Experimental::IExpCoreWindowBridgeStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Hosting_Experimental_IExpCoreWindowBridgeStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Hosting_Experimental_IExpDesktopWindowBridge
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::WindowId) ChildWindowId() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) FillTopLevelWindow() const;
        WINRT_IMPL_AUTO(void) FillTopLevelWindow(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Hosting::Experimental::ExpDesktopWindowTopLevelHost) TopLevelHost() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Hosting::Experimental::ExpPopupWindowBridge) CreatePopup() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationResult) NavigateFocus(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest const& request) const;
        WINRT_IMPL_AUTO(bool) PreTranslateKeyboardMessage(uint64_t windowHandle, uint32_t keyboardMessage, uint32_t virtualKey, uint64_t keyInfo) const;
        WINRT_IMPL_AUTO(void) SetOverrideScaleFactor(float value) const;
        WINRT_IMPL_AUTO(winrt::event_token) TakeFocusRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Hosting::Experimental::ExpDesktopWindowBridge, winrt::Microsoft::UI::Input::Experimental::ExpNavigateFocusRequestedEventArgs> const& handler) const;
        using TakeFocusRequested_revoker = impl::event_revoker<winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowBridge, &impl::abi_t<winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowBridge>::remove_TakeFocusRequested>;
        [[nodiscard]] TakeFocusRequested_revoker TakeFocusRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Hosting::Experimental::ExpDesktopWindowBridge, winrt::Microsoft::UI::Input::Experimental::ExpNavigateFocusRequestedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) TakeFocusRequested(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowBridge>
    {
        template <typename D> using type = consume_Microsoft_UI_Hosting_Experimental_IExpDesktopWindowBridge<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Hosting_Experimental_IExpDesktopWindowBridgeStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Hosting::Experimental::ExpDesktopWindowBridge) Create(winrt::Microsoft::UI::Composition::Compositor const& compositor, winrt::Microsoft::UI::WindowId const& parentWindowId) const;
        WINRT_IMPL_AUTO(bool) IsSupported() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowBridgeStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Hosting_Experimental_IExpDesktopWindowBridgeStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Hosting_Experimental_IExpDesktopWindowTopLevelHostStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Hosting::Experimental::ExpDesktopWindowTopLevelHost) GetForWindowId(winrt::Microsoft::UI::WindowId const& childWindowId) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Hosting::Experimental::IExpDesktopWindowTopLevelHostStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Hosting_Experimental_IExpDesktopWindowTopLevelHostStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Hosting_Experimental_IExpPopupWindowBridge
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::WindowId) PopupWindowId() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Hosting::Experimental::IExpPopupWindowBridge>
    {
        template <typename D> using type = consume_Microsoft_UI_Hosting_Experimental_IExpPopupWindowBridge<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Hosting_Experimental_IExpPopupWindowBridgeStatics
    {
        WINRT_IMPL_AUTO(bool) IsSupported() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Hosting::Experimental::IExpPopupWindowBridgeStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Hosting_Experimental_IExpPopupWindowBridgeStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Hosting_Experimental_IExpSystemVisualBridge
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Composition::Visual) BridgeVisual() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Color) BackgroundColor() const;
        WINRT_IMPL_AUTO(void) BackgroundColor(winrt::Windows::UI::Color const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Hosting::Experimental::IExpSystemVisualBridge>
    {
        template <typename D> using type = consume_Microsoft_UI_Hosting_Experimental_IExpSystemVisualBridge<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Hosting_Experimental_IExpSystemVisualBridgeStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Hosting::Experimental::ExpSystemVisualBridge) Create(winrt::Microsoft::UI::Composition::Compositor const& compositor) const;
        WINRT_IMPL_AUTO(bool) IsSupported() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Hosting::Experimental::IExpSystemVisualBridgeStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Hosting_Experimental_IExpSystemVisualBridgeStatics<D>;
    };
}
#endif
