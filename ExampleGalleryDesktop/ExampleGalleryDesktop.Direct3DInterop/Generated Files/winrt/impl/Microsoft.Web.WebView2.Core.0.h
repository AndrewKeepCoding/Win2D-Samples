// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210806.1

#pragma once
#ifndef WINRT_Microsoft_Web_WebView2_Core_0_H
#define WINRT_Microsoft_Web_WebView2_Core_0_H
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    struct Deferral;
    struct EventRegistrationToken;
    struct IAsyncAction;
    template <typename TResult> struct __declspec(empty_bases) IAsyncOperation;
    struct Point;
    struct Rect;
    template <typename TSender, typename TResult> struct __declspec(empty_bases) TypedEventHandler;
}
WINRT_EXPORT namespace winrt::Windows::Storage::Streams
{
    struct IRandomAccessStream;
}
WINRT_EXPORT namespace winrt::Windows::UI
{
    struct Color;
}
WINRT_EXPORT namespace winrt::Windows::UI::Core
{
    struct CoreCursor;
    struct CoreWindow;
}
WINRT_EXPORT namespace winrt::Microsoft::Web::WebView2::Core
{
    enum class CoreWebView2BoundsMode : int32_t
    {
        UseRawPixels = 0,
        UseRasterizationScale = 1,
    };
    enum class CoreWebView2CapturePreviewImageFormat : int32_t
    {
        Png = 0,
        Jpeg = 1,
    };
    enum class CoreWebView2CookieSameSiteKind : int32_t
    {
        None = 0,
        Lax = 1,
        Strict = 2,
    };
    enum class CoreWebView2HostResourceAccessKind : int32_t
    {
        Deny = 0,
        Allow = 1,
        DenyCors = 2,
    };
    enum class CoreWebView2KeyEventKind : int32_t
    {
        KeyDown = 0,
        KeyUp = 1,
        SystemKeyDown = 2,
        SystemKeyUp = 3,
    };
    enum class CoreWebView2MouseEventKind : int32_t
    {
        HorizontalWheel = 526,
        LeftButtonDoubleClick = 515,
        LeftButtonDown = 513,
        LeftButtonUp = 514,
        Leave = 675,
        MiddleButtonDoubleClick = 521,
        MiddleButtonDown = 519,
        MiddleButtonUp = 520,
        Move = 512,
        RightButtonDoubleClick = 518,
        RightButtonDown = 516,
        RightButtonUp = 517,
        Wheel = 522,
        XButtonDoubleClick = 525,
        XButtonDown = 523,
        XButtonUp = 524,
    };
    enum class CoreWebView2MouseEventVirtualKeys : uint32_t
    {
        None = 0,
        LeftButton = 0x1,
        RightButton = 0x2,
        Shift = 0x4,
        Control = 0x8,
        MiddleButton = 0x10,
        XButton1 = 0x20,
        XButton2 = 0x40,
    };
    enum class CoreWebView2MoveFocusReason : int32_t
    {
        Programmatic = 0,
        Next = 1,
        Previous = 2,
    };
    enum class CoreWebView2PermissionKind : int32_t
    {
        UnknownPermission = 0,
        Microphone = 1,
        Camera = 2,
        Geolocation = 3,
        Notifications = 4,
        OtherSensors = 5,
        ClipboardRead = 6,
    };
    enum class CoreWebView2PermissionState : int32_t
    {
        Default = 0,
        Allow = 1,
        Deny = 2,
    };
    enum class CoreWebView2PointerEventKind : int32_t
    {
        Activate = 587,
        Down = 582,
        Enter = 585,
        Leave = 586,
        Up = 583,
        Update = 581,
    };
    enum class CoreWebView2ProcessFailedKind : int32_t
    {
        BrowserProcessExited = 0,
        RenderProcessExited = 1,
        RenderProcessUnresponsive = 2,
    };
    enum class CoreWebView2ScriptDialogKind : int32_t
    {
        Alert = 0,
        Confirm = 1,
        Prompt = 2,
        Beforeunload = 3,
    };
    enum class CoreWebView2WebErrorStatus : int32_t
    {
        Unknown = 0,
        CertificateCommonNameIsIncorrect = 1,
        CertificateExpired = 2,
        ClientCertificateContainsErrors = 3,
        CertificateRevoked = 4,
        CertificateIsInvalid = 5,
        ServerUnreachable = 6,
        Timeout = 7,
        ErrorHttpInvalidServerResponse = 8,
        ConnectionAborted = 9,
        ConnectionReset = 10,
        Disconnected = 11,
        CannotConnect = 12,
        HostNameNotResolved = 13,
        OperationCanceled = 14,
        RedirectFailed = 15,
        UnexpectedError = 16,
    };
    enum class CoreWebView2WebResourceContext : int32_t
    {
        All = 0,
        Document = 1,
        Stylesheet = 2,
        Image = 3,
        Media = 4,
        Font = 5,
        Script = 6,
        XmlHttpRequest = 7,
        Fetch = 8,
        TextTrack = 9,
        EventSource = 10,
        Websocket = 11,
        Manifest = 12,
        SignedExchange = 13,
        Ping = 14,
        CspViolationReport = 15,
        Other = 16,
    };
    struct ICoreWebView2;
    struct ICoreWebView2AcceleratorKeyPressedEventArgs;
    struct ICoreWebView2CompositionController;
    struct ICoreWebView2ContentLoadingEventArgs;
    struct ICoreWebView2Controller;
    struct ICoreWebView2ControllerFactory;
    struct ICoreWebView2ControllerWindowReference;
    struct ICoreWebView2ControllerWindowReferenceStatics;
    struct ICoreWebView2Cookie;
    struct ICoreWebView2CookieManager;
    struct ICoreWebView2DOMContentLoadedEventArgs;
    struct ICoreWebView2DevToolsProtocolEventReceivedEventArgs;
    struct ICoreWebView2DevToolsProtocolEventReceiver;
    struct ICoreWebView2Environment;
    struct ICoreWebView2EnvironmentOptions;
    struct ICoreWebView2EnvironmentStatics;
    struct ICoreWebView2HttpHeadersCollectionIterator;
    struct ICoreWebView2HttpRequestHeaders;
    struct ICoreWebView2HttpResponseHeaders;
    struct ICoreWebView2MoveFocusRequestedEventArgs;
    struct ICoreWebView2NavigationCompletedEventArgs;
    struct ICoreWebView2NavigationStartingEventArgs;
    struct ICoreWebView2NewWindowRequestedEventArgs;
    struct ICoreWebView2PermissionRequestedEventArgs;
    struct ICoreWebView2PointerInfo;
    struct ICoreWebView2ProcessFailedEventArgs;
    struct ICoreWebView2ScriptDialogOpeningEventArgs;
    struct ICoreWebView2Settings;
    struct ICoreWebView2SourceChangedEventArgs;
    struct ICoreWebView2WebMessageReceivedEventArgs;
    struct ICoreWebView2WebResourceRequest;
    struct ICoreWebView2WebResourceRequestedEventArgs;
    struct ICoreWebView2WebResourceResponse;
    struct ICoreWebView2WebResourceResponseReceivedEventArgs;
    struct ICoreWebView2WebResourceResponseView;
    struct ICoreWebView2WindowFeatures;
    struct CoreWebView2;
    struct CoreWebView2AcceleratorKeyPressedEventArgs;
    struct CoreWebView2CompositionController;
    struct CoreWebView2ContentLoadingEventArgs;
    struct CoreWebView2Controller;
    struct CoreWebView2ControllerWindowReference;
    struct CoreWebView2Cookie;
    struct CoreWebView2CookieManager;
    struct CoreWebView2DOMContentLoadedEventArgs;
    struct CoreWebView2DevToolsProtocolEventReceivedEventArgs;
    struct CoreWebView2DevToolsProtocolEventReceiver;
    struct CoreWebView2Environment;
    struct CoreWebView2EnvironmentOptions;
    struct CoreWebView2HttpHeadersCollectionIterator;
    struct CoreWebView2HttpRequestHeaders;
    struct CoreWebView2HttpResponseHeaders;
    struct CoreWebView2MoveFocusRequestedEventArgs;
    struct CoreWebView2NavigationCompletedEventArgs;
    struct CoreWebView2NavigationStartingEventArgs;
    struct CoreWebView2NewWindowRequestedEventArgs;
    struct CoreWebView2PermissionRequestedEventArgs;
    struct CoreWebView2PointerInfo;
    struct CoreWebView2ProcessFailedEventArgs;
    struct CoreWebView2ScriptDialogOpeningEventArgs;
    struct CoreWebView2Settings;
    struct CoreWebView2SourceChangedEventArgs;
    struct CoreWebView2WebMessageReceivedEventArgs;
    struct CoreWebView2WebResourceRequest;
    struct CoreWebView2WebResourceRequestedEventArgs;
    struct CoreWebView2WebResourceResponse;
    struct CoreWebView2WebResourceResponseReceivedEventArgs;
    struct CoreWebView2WebResourceResponseView;
    struct CoreWebView2WindowFeatures;
    struct CoreWebView2PhysicalKeyStatus;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContentLoadingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerWindowReference>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerWindowReferenceStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DOMContentLoadedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceivedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceiver>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpHeadersCollectionIterator>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpRequestHeaders>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpResponseHeaders>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2MoveFocusRequestedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationCompletedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SourceChangedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebMessageReceivedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequest>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequestedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponse>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseReceivedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseView>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2AcceleratorKeyPressedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2CompositionController>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ContentLoadingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ControllerWindowReference>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Cookie>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2CookieManager>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2DOMContentLoadedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2DevToolsProtocolEventReceivedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2DevToolsProtocolEventReceiver>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Environment>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2EnvironmentOptions>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2HttpHeadersCollectionIterator>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2HttpRequestHeaders>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2HttpResponseHeaders>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2MoveFocusRequestedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationCompletedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationStartingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2NewWindowRequestedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PermissionRequestedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PointerInfo>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ProcessFailedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ScriptDialogOpeningEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Settings>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2SourceChangedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebMessageReceivedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceRequest>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceRequestedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceResponse>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceResponseReceivedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceResponseView>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WindowFeatures>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2BoundsMode>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2CapturePreviewImageFormat>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2CookieSameSiteKind>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2HostResourceAccessKind>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2KeyEventKind>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2MouseEventKind>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2MouseEventVirtualKeys>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2MoveFocusReason>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PermissionKind>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PermissionState>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PointerEventKind>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ProcessFailedKind>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ScriptDialogKind>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebErrorStatus>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceContext>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PhysicalKeyStatus>{ using type = struct_category<uint32_t, uint32_t, int32_t, int32_t, int32_t, int32_t>; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2> = L"Microsoft.Web.WebView2.Core.CoreWebView2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2AcceleratorKeyPressedEventArgs> = L"Microsoft.Web.WebView2.Core.CoreWebView2AcceleratorKeyPressedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2CompositionController> = L"Microsoft.Web.WebView2.Core.CoreWebView2CompositionController";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ContentLoadingEventArgs> = L"Microsoft.Web.WebView2.Core.CoreWebView2ContentLoadingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller> = L"Microsoft.Web.WebView2.Core.CoreWebView2Controller";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ControllerWindowReference> = L"Microsoft.Web.WebView2.Core.CoreWebView2ControllerWindowReference";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Cookie> = L"Microsoft.Web.WebView2.Core.CoreWebView2Cookie";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2CookieManager> = L"Microsoft.Web.WebView2.Core.CoreWebView2CookieManager";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2DOMContentLoadedEventArgs> = L"Microsoft.Web.WebView2.Core.CoreWebView2DOMContentLoadedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2DevToolsProtocolEventReceivedEventArgs> = L"Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceivedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2DevToolsProtocolEventReceiver> = L"Microsoft.Web.WebView2.Core.CoreWebView2DevToolsProtocolEventReceiver";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Environment> = L"Microsoft.Web.WebView2.Core.CoreWebView2Environment";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2EnvironmentOptions> = L"Microsoft.Web.WebView2.Core.CoreWebView2EnvironmentOptions";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2HttpHeadersCollectionIterator> = L"Microsoft.Web.WebView2.Core.CoreWebView2HttpHeadersCollectionIterator";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2HttpRequestHeaders> = L"Microsoft.Web.WebView2.Core.CoreWebView2HttpRequestHeaders";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2HttpResponseHeaders> = L"Microsoft.Web.WebView2.Core.CoreWebView2HttpResponseHeaders";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2MoveFocusRequestedEventArgs> = L"Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationCompletedEventArgs> = L"Microsoft.Web.WebView2.Core.CoreWebView2NavigationCompletedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationStartingEventArgs> = L"Microsoft.Web.WebView2.Core.CoreWebView2NavigationStartingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2NewWindowRequestedEventArgs> = L"Microsoft.Web.WebView2.Core.CoreWebView2NewWindowRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PermissionRequestedEventArgs> = L"Microsoft.Web.WebView2.Core.CoreWebView2PermissionRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PointerInfo> = L"Microsoft.Web.WebView2.Core.CoreWebView2PointerInfo";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ProcessFailedEventArgs> = L"Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ScriptDialogOpeningEventArgs> = L"Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogOpeningEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Settings> = L"Microsoft.Web.WebView2.Core.CoreWebView2Settings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2SourceChangedEventArgs> = L"Microsoft.Web.WebView2.Core.CoreWebView2SourceChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebMessageReceivedEventArgs> = L"Microsoft.Web.WebView2.Core.CoreWebView2WebMessageReceivedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceRequest> = L"Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequest";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceRequestedEventArgs> = L"Microsoft.Web.WebView2.Core.CoreWebView2WebResourceRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceResponse> = L"Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponse";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceResponseReceivedEventArgs> = L"Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseReceivedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceResponseView> = L"Microsoft.Web.WebView2.Core.CoreWebView2WebResourceResponseView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WindowFeatures> = L"Microsoft.Web.WebView2.Core.CoreWebView2WindowFeatures";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2BoundsMode> = L"Microsoft.Web.WebView2.Core.CoreWebView2BoundsMode";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2CapturePreviewImageFormat> = L"Microsoft.Web.WebView2.Core.CoreWebView2CapturePreviewImageFormat";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2CookieSameSiteKind> = L"Microsoft.Web.WebView2.Core.CoreWebView2CookieSameSiteKind";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2HostResourceAccessKind> = L"Microsoft.Web.WebView2.Core.CoreWebView2HostResourceAccessKind";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2KeyEventKind> = L"Microsoft.Web.WebView2.Core.CoreWebView2KeyEventKind";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2MouseEventKind> = L"Microsoft.Web.WebView2.Core.CoreWebView2MouseEventKind";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2MouseEventVirtualKeys> = L"Microsoft.Web.WebView2.Core.CoreWebView2MouseEventVirtualKeys";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2MoveFocusReason> = L"Microsoft.Web.WebView2.Core.CoreWebView2MoveFocusReason";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PermissionKind> = L"Microsoft.Web.WebView2.Core.CoreWebView2PermissionKind";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PermissionState> = L"Microsoft.Web.WebView2.Core.CoreWebView2PermissionState";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PointerEventKind> = L"Microsoft.Web.WebView2.Core.CoreWebView2PointerEventKind";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ProcessFailedKind> = L"Microsoft.Web.WebView2.Core.CoreWebView2ProcessFailedKind";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ScriptDialogKind> = L"Microsoft.Web.WebView2.Core.CoreWebView2ScriptDialogKind";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebErrorStatus> = L"Microsoft.Web.WebView2.Core.CoreWebView2WebErrorStatus";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceContext> = L"Microsoft.Web.WebView2.Core.CoreWebView2WebResourceContext";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PhysicalKeyStatus> = L"Microsoft.Web.WebView2.Core.CoreWebView2PhysicalKeyStatus";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2> = L"Microsoft.Web.WebView2.Core.ICoreWebView2";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs> = L"Microsoft.Web.WebView2.Core.ICoreWebView2AcceleratorKeyPressedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController> = L"Microsoft.Web.WebView2.Core.ICoreWebView2CompositionController";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContentLoadingEventArgs> = L"Microsoft.Web.WebView2.Core.ICoreWebView2ContentLoadingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller> = L"Microsoft.Web.WebView2.Core.ICoreWebView2Controller";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerFactory> = L"Microsoft.Web.WebView2.Core.ICoreWebView2ControllerFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerWindowReference> = L"Microsoft.Web.WebView2.Core.ICoreWebView2ControllerWindowReference";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerWindowReferenceStatics> = L"Microsoft.Web.WebView2.Core.ICoreWebView2ControllerWindowReferenceStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie> = L"Microsoft.Web.WebView2.Core.ICoreWebView2Cookie";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager> = L"Microsoft.Web.WebView2.Core.ICoreWebView2CookieManager";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DOMContentLoadedEventArgs> = L"Microsoft.Web.WebView2.Core.ICoreWebView2DOMContentLoadedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceivedEventArgs> = L"Microsoft.Web.WebView2.Core.ICoreWebView2DevToolsProtocolEventReceivedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceiver> = L"Microsoft.Web.WebView2.Core.ICoreWebView2DevToolsProtocolEventReceiver";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment> = L"Microsoft.Web.WebView2.Core.ICoreWebView2Environment";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions> = L"Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentOptions";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentStatics> = L"Microsoft.Web.WebView2.Core.ICoreWebView2EnvironmentStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpHeadersCollectionIterator> = L"Microsoft.Web.WebView2.Core.ICoreWebView2HttpHeadersCollectionIterator";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpRequestHeaders> = L"Microsoft.Web.WebView2.Core.ICoreWebView2HttpRequestHeaders";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpResponseHeaders> = L"Microsoft.Web.WebView2.Core.ICoreWebView2HttpResponseHeaders";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2MoveFocusRequestedEventArgs> = L"Microsoft.Web.WebView2.Core.ICoreWebView2MoveFocusRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationCompletedEventArgs> = L"Microsoft.Web.WebView2.Core.ICoreWebView2NavigationCompletedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs> = L"Microsoft.Web.WebView2.Core.ICoreWebView2NavigationStartingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs> = L"Microsoft.Web.WebView2.Core.ICoreWebView2NewWindowRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs> = L"Microsoft.Web.WebView2.Core.ICoreWebView2PermissionRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo> = L"Microsoft.Web.WebView2.Core.ICoreWebView2PointerInfo";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs> = L"Microsoft.Web.WebView2.Core.ICoreWebView2ProcessFailedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs> = L"Microsoft.Web.WebView2.Core.ICoreWebView2ScriptDialogOpeningEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings> = L"Microsoft.Web.WebView2.Core.ICoreWebView2Settings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SourceChangedEventArgs> = L"Microsoft.Web.WebView2.Core.ICoreWebView2SourceChangedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebMessageReceivedEventArgs> = L"Microsoft.Web.WebView2.Core.ICoreWebView2WebMessageReceivedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequest> = L"Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceRequest";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequestedEventArgs> = L"Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceRequestedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponse> = L"Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceResponse";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseReceivedEventArgs> = L"Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceResponseReceivedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseView> = L"Microsoft.Web.WebView2.Core.ICoreWebView2WebResourceResponseView";
    template <> inline constexpr auto& name_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures> = L"Microsoft.Web.WebView2.Core.ICoreWebView2WindowFeatures";
    template <> inline constexpr guid guid_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>{ 0xFC5C0B73,0x08B0,0x59D1,{ 0xA6,0x45,0xE4,0xC2,0x48,0x87,0xFE,0xF9 } }; // FC5C0B73-08B0-59D1-A645-E4C24887FEF9
    template <> inline constexpr guid guid_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs>{ 0x41A56100,0x92A5,0x59D1,{ 0x9E,0x71,0x92,0x22,0xE3,0x3A,0xE3,0x8B } }; // 41A56100-92A5-59D1-9E71-9222E33AE38B
    template <> inline constexpr guid guid_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController>{ 0x4FB8B7B3,0x4A2E,0x5787,{ 0x94,0xB9,0xCC,0x48,0xC4,0xD3,0x64,0xD7 } }; // 4FB8B7B3-4A2E-5787-94B9-CC48C4D364D7
    template <> inline constexpr guid guid_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContentLoadingEventArgs>{ 0x6CF95373,0x946C,0x5DAE,{ 0x9B,0x3E,0x0F,0xE2,0x3D,0x5A,0xA2,0x9F } }; // 6CF95373-946C-5DAE-9B3E-0FE23D5AA29F
    template <> inline constexpr guid guid_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>{ 0x380911E8,0xCFD4,0x5FD9,{ 0x85,0xDB,0xB5,0xD2,0xA6,0xEE,0x91,0x8C } }; // 380911E8-CFD4-5FD9-85DB-B5D2A6EE918C
    template <> inline constexpr guid guid_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerFactory>{ 0x270B2C5B,0xC3A9,0x53D8,{ 0xA5,0xCA,0x26,0x2E,0xA9,0xEA,0x62,0xE8 } }; // 270B2C5B-C3A9-53D8-A5CA-262EA9EA62E8
    template <> inline constexpr guid guid_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerWindowReference>{ 0x0FEDDAD4,0x48A3,0x5CC4,{ 0x9F,0x61,0xE7,0xAD,0xFD,0x1E,0x9C,0x76 } }; // 0FEDDAD4-48A3-5CC4-9F61-E7ADFD1E9C76
    template <> inline constexpr guid guid_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerWindowReferenceStatics>{ 0xDDF6EBF1,0xEBC6,0x5A34,{ 0x90,0x08,0x66,0x1C,0x3A,0x2E,0xB7,0x67 } }; // DDF6EBF1-EBC6-5A34-9008-661C3A2EB767
    template <> inline constexpr guid guid_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>{ 0x52F670FE,0x8CA2,0x5AAD,{ 0xAE,0xDB,0x25,0xF7,0x90,0x3B,0x70,0x38 } }; // 52F670FE-8CA2-5AAD-AEDB-25F7903B7038
    template <> inline constexpr guid guid_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager>{ 0x4098F516,0xADCA,0x5563,{ 0xAA,0xA5,0xD7,0xAF,0xFD,0x84,0x7A,0xA3 } }; // 4098F516-ADCA-5563-AAA5-D7AFFD847AA3
    template <> inline constexpr guid guid_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DOMContentLoadedEventArgs>{ 0xC474D0A3,0x24AC,0x59FC,{ 0xB7,0x8B,0xDA,0x75,0x62,0xA6,0xA0,0x52 } }; // C474D0A3-24AC-59FC-B78B-DA7562A6A052
    template <> inline constexpr guid guid_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceivedEventArgs>{ 0xB6A4B41D,0xFD18,0x59FA,{ 0x92,0x3A,0xC5,0x75,0x55,0xD9,0x60,0xCE } }; // B6A4B41D-FD18-59FA-923A-C57555D960CE
    template <> inline constexpr guid guid_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceiver>{ 0xB2A2BE79,0x65FC,0x5537,{ 0x87,0x15,0x3D,0x92,0xBF,0x31,0x09,0x0B } }; // B2A2BE79-65FC-5537-8715-3D92BF31090B
    template <> inline constexpr guid guid_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment>{ 0x4C7653F4,0x0768,0x5A00,{ 0x9A,0x74,0xDC,0x99,0x13,0x4A,0x6E,0x57 } }; // 4C7653F4-0768-5A00-9A74-DC99134A6E57
    template <> inline constexpr guid guid_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions>{ 0x25D6DC39,0x0062,0x5735,{ 0x8B,0x09,0xA6,0xF5,0x35,0xF1,0x9E,0x97 } }; // 25D6DC39-0062-5735-8B09-A6F535F19E97
    template <> inline constexpr guid guid_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentStatics>{ 0x0E33F804,0xF20B,0x5635,{ 0x84,0x91,0x16,0x2A,0xAA,0x27,0x51,0x7B } }; // 0E33F804-F20B-5635-8491-162AAA27517B
    template <> inline constexpr guid guid_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpHeadersCollectionIterator>{ 0xADF264EE,0xD980,0x5F48,{ 0xA6,0x0E,0x87,0x05,0xDE,0x04,0x66,0x08 } }; // ADF264EE-D980-5F48-A60E-8705DE046608
    template <> inline constexpr guid guid_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpRequestHeaders>{ 0xDC2226C7,0x3515,0x55BB,{ 0xBC,0xB2,0x57,0xB7,0x8F,0x86,0xB9,0x1D } }; // DC2226C7-3515-55BB-BCB2-57B78F86B91D
    template <> inline constexpr guid guid_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpResponseHeaders>{ 0xF3D383E9,0x747F,0x5574,{ 0x86,0x62,0x9A,0x6B,0x92,0x0C,0xEC,0xD4 } }; // F3D383E9-747F-5574-8662-9A6B920CECD4
    template <> inline constexpr guid guid_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2MoveFocusRequestedEventArgs>{ 0x2E29103B,0xECDD,0x5C1D,{ 0xB2,0x88,0x3F,0x06,0x6D,0x60,0x89,0x19 } }; // 2E29103B-ECDD-5C1D-B288-3F066D608919
    template <> inline constexpr guid guid_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationCompletedEventArgs>{ 0x4865E238,0x036A,0x5664,{ 0x95,0xA3,0x44,0x7E,0xC4,0x4C,0xF4,0x98 } }; // 4865E238-036A-5664-95A3-447EC44CF498
    template <> inline constexpr guid guid_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs>{ 0x548D23D3,0xFEA3,0x5616,{ 0xBD,0x05,0xAE,0x08,0x06,0x6C,0x86,0xD3 } }; // 548D23D3-FEA3-5616-BD05-AE08066C86D3
    template <> inline constexpr guid guid_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs>{ 0xE6E013BA,0xAEC8,0x532E,{ 0x9A,0xC9,0x15,0x90,0xAF,0x7B,0x25,0xEC } }; // E6E013BA-AEC8-532E-9AC9-1590AF7B25EC
    template <> inline constexpr guid guid_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs>{ 0x118BDD9B,0xCEF1,0x5910,{ 0x92,0x9E,0xC1,0xA3,0x21,0x32,0x82,0x39 } }; // 118BDD9B-CEF1-5910-929E-C1A321328239
    template <> inline constexpr guid guid_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>{ 0xC3860E0D,0xC018,0x5A84,{ 0xBC,0x06,0x9F,0x8F,0x7B,0x27,0x5D,0xFF } }; // C3860E0D-C018-5A84-BC06-9F8F7B275DFF
    template <> inline constexpr guid guid_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs>{ 0x25A8F8C9,0xD944,0x539D,{ 0xAF,0xA3,0x24,0x17,0x2B,0x48,0xEF,0x47 } }; // 25A8F8C9-D944-539D-AFA3-24172B48EF47
    template <> inline constexpr guid guid_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs>{ 0xA4315212,0xC7EB,0x568A,{ 0x86,0xE4,0xC6,0x1E,0x31,0xBA,0x6C,0xDA } }; // A4315212-C7EB-568A-86E4-C61E31BA6CDA
    template <> inline constexpr guid guid_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>{ 0x003B325E,0x74CD,0x52DD,{ 0x80,0x24,0xEB,0xB8,0xBE,0x38,0xE4,0x8E } }; // 003B325E-74CD-52DD-8024-EBB8BE38E48E
    template <> inline constexpr guid guid_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SourceChangedEventArgs>{ 0xCA437B2C,0x6A18,0x5552,{ 0xB7,0x49,0xB1,0x98,0xF8,0xCC,0x34,0xD9 } }; // CA437B2C-6A18-5552-B749-B198F8CC34D9
    template <> inline constexpr guid guid_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebMessageReceivedEventArgs>{ 0xEB066159,0xB725,0x5D5B,{ 0xAD,0xC8,0xF5,0xD7,0xB9,0x29,0x03,0x04 } }; // EB066159-B725-5D5B-ADC8-F5D7B9290304
    template <> inline constexpr guid guid_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequest>{ 0x5C742259,0x67D2,0x5DF2,{ 0x83,0x82,0x0F,0x20,0x1B,0x4D,0x71,0x97 } }; // 5C742259-67D2-5DF2-8382-0F201B4D7197
    template <> inline constexpr guid guid_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequestedEventArgs>{ 0x577F1FC4,0xC943,0x54A9,{ 0x97,0x00,0xBD,0x46,0x9B,0x48,0xBD,0x41 } }; // 577F1FC4-C943-54A9-9700-BD469B48BD41
    template <> inline constexpr guid guid_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponse>{ 0x14621923,0xE485,0x5F44,{ 0x8F,0x5D,0xBD,0x42,0x43,0xBC,0x39,0x8F } }; // 14621923-E485-5F44-8F5D-BD4243BC398F
    template <> inline constexpr guid guid_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseReceivedEventArgs>{ 0x12424671,0x9711,0x54F4,{ 0xBC,0xDF,0x5F,0x30,0x7A,0xDD,0x6E,0xC2 } }; // 12424671-9711-54F4-BCDF-5F307ADD6EC2
    template <> inline constexpr guid guid_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseView>{ 0x33EE060B,0xB578,0x5698,{ 0xB5,0x41,0xFE,0xF8,0x7F,0xE7,0xFE,0x72 } }; // 33EE060B-B578-5698-B541-FEF87FE7FE72
    template <> inline constexpr guid guid_v<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures>{ 0xEE8686D6,0x056F,0x5E06,{ 0x82,0x4F,0x4E,0x2A,0x24,0xC1,0xC1,0xD6 } }; // EE8686D6-056F-5E06-824F-4E2A24C1C1D6
    template <> struct default_interface<winrt::Microsoft::Web::WebView2::Core::CoreWebView2>{ using type = winrt::Microsoft::Web::WebView2::Core::ICoreWebView2; };
    template <> struct default_interface<winrt::Microsoft::Web::WebView2::Core::CoreWebView2AcceleratorKeyPressedEventArgs>{ using type = winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::Web::WebView2::Core::CoreWebView2CompositionController>{ using type = winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController; };
    template <> struct default_interface<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ContentLoadingEventArgs>{ using type = winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContentLoadingEventArgs; };
    template <> struct default_interface<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller>{ using type = winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller; };
    template <> struct default_interface<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ControllerWindowReference>{ using type = winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerWindowReference; };
    template <> struct default_interface<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Cookie>{ using type = winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie; };
    template <> struct default_interface<winrt::Microsoft::Web::WebView2::Core::CoreWebView2CookieManager>{ using type = winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager; };
    template <> struct default_interface<winrt::Microsoft::Web::WebView2::Core::CoreWebView2DOMContentLoadedEventArgs>{ using type = winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DOMContentLoadedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::Web::WebView2::Core::CoreWebView2DevToolsProtocolEventReceivedEventArgs>{ using type = winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceivedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::Web::WebView2::Core::CoreWebView2DevToolsProtocolEventReceiver>{ using type = winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceiver; };
    template <> struct default_interface<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Environment>{ using type = winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment; };
    template <> struct default_interface<winrt::Microsoft::Web::WebView2::Core::CoreWebView2EnvironmentOptions>{ using type = winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions; };
    template <> struct default_interface<winrt::Microsoft::Web::WebView2::Core::CoreWebView2HttpHeadersCollectionIterator>{ using type = winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpHeadersCollectionIterator; };
    template <> struct default_interface<winrt::Microsoft::Web::WebView2::Core::CoreWebView2HttpRequestHeaders>{ using type = winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpRequestHeaders; };
    template <> struct default_interface<winrt::Microsoft::Web::WebView2::Core::CoreWebView2HttpResponseHeaders>{ using type = winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpResponseHeaders; };
    template <> struct default_interface<winrt::Microsoft::Web::WebView2::Core::CoreWebView2MoveFocusRequestedEventArgs>{ using type = winrt::Microsoft::Web::WebView2::Core::ICoreWebView2MoveFocusRequestedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationCompletedEventArgs>{ using type = winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationCompletedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationStartingEventArgs>{ using type = winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs; };
    template <> struct default_interface<winrt::Microsoft::Web::WebView2::Core::CoreWebView2NewWindowRequestedEventArgs>{ using type = winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PermissionRequestedEventArgs>{ using type = winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::Web::WebView2::Core::CoreWebView2PointerInfo>{ using type = winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo; };
    template <> struct default_interface<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ProcessFailedEventArgs>{ using type = winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::Web::WebView2::Core::CoreWebView2ScriptDialogOpeningEventArgs>{ using type = winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs; };
    template <> struct default_interface<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Settings>{ using type = winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings; };
    template <> struct default_interface<winrt::Microsoft::Web::WebView2::Core::CoreWebView2SourceChangedEventArgs>{ using type = winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SourceChangedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebMessageReceivedEventArgs>{ using type = winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebMessageReceivedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceRequest>{ using type = winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequest; };
    template <> struct default_interface<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceRequestedEventArgs>{ using type = winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequestedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceResponse>{ using type = winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponse; };
    template <> struct default_interface<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceResponseReceivedEventArgs>{ using type = winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseReceivedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceResponseView>{ using type = winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseView; };
    template <> struct default_interface<winrt::Microsoft::Web::WebView2::Core::CoreWebView2WindowFeatures>{ using type = winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures; };
    template <> struct abi<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Settings(void**) noexcept = 0;
            virtual int32_t __stdcall get_Source(void**) noexcept = 0;
            virtual int32_t __stdcall get_BrowserProcessId(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall get_CanGoBack(bool*) noexcept = 0;
            virtual int32_t __stdcall get_CanGoForward(bool*) noexcept = 0;
            virtual int32_t __stdcall get_DocumentTitle(void**) noexcept = 0;
            virtual int32_t __stdcall get_ContainsFullScreenElement(bool*) noexcept = 0;
            virtual int32_t __stdcall add_NavigationStarting(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_NavigationStarting(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ContentLoading(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ContentLoading(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_SourceChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_SourceChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_HistoryChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_HistoryChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_NavigationCompleted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_NavigationCompleted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_FrameNavigationStarting(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_FrameNavigationStarting(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_FrameNavigationCompleted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_FrameNavigationCompleted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ScriptDialogOpening(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ScriptDialogOpening(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PermissionRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PermissionRequested(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ProcessFailed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ProcessFailed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_WebMessageReceived(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_WebMessageReceived(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_NewWindowRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_NewWindowRequested(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_DocumentTitleChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DocumentTitleChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ContainsFullScreenElementChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ContainsFullScreenElementChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_WebResourceRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_WebResourceRequested(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_WindowCloseRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_WindowCloseRequested(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall Navigate(void*) noexcept = 0;
            virtual int32_t __stdcall NavigateToString(void*) noexcept = 0;
            virtual int32_t __stdcall AddScriptToExecuteOnDocumentCreatedAsync(void*, void**) noexcept = 0;
            virtual int32_t __stdcall RemoveScriptToExecuteOnDocumentCreated(void*) noexcept = 0;
            virtual int32_t __stdcall ExecuteScriptAsync(void*, void**) noexcept = 0;
            virtual int32_t __stdcall CapturePreviewAsync(int32_t, void*, void**) noexcept = 0;
            virtual int32_t __stdcall Reload() noexcept = 0;
            virtual int32_t __stdcall PostWebMessageAsJson(void*) noexcept = 0;
            virtual int32_t __stdcall PostWebMessageAsString(void*) noexcept = 0;
            virtual int32_t __stdcall CallDevToolsProtocolMethodAsync(void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall GoBack() noexcept = 0;
            virtual int32_t __stdcall GoForward() noexcept = 0;
            virtual int32_t __stdcall GetDevToolsProtocolEventReceiver(void*, void**) noexcept = 0;
            virtual int32_t __stdcall Stop() noexcept = 0;
            virtual int32_t __stdcall AddHostObjectToScript(void*, void*) noexcept = 0;
            virtual int32_t __stdcall RemoveHostObjectFromScript(void*) noexcept = 0;
            virtual int32_t __stdcall OpenDevToolsWindow() noexcept = 0;
            virtual int32_t __stdcall AddWebResourceRequestedFilter(void*, int32_t) noexcept = 0;
            virtual int32_t __stdcall RemoveWebResourceRequestedFilter(void*, int32_t) noexcept = 0;
            virtual int32_t __stdcall get_CookieManager(void**) noexcept = 0;
            virtual int32_t __stdcall get_Environment(void**) noexcept = 0;
            virtual int32_t __stdcall add_WebResourceResponseReceived(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_WebResourceResponseReceived(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_DOMContentLoaded(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DOMContentLoaded(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall NavigateWithWebResourceRequest(void*) noexcept = 0;
            virtual int32_t __stdcall get_IsSuspended(bool*) noexcept = 0;
            virtual int32_t __stdcall TrySuspendAsync(void**) noexcept = 0;
            virtual int32_t __stdcall Resume() noexcept = 0;
            virtual int32_t __stdcall SetVirtualHostNameToFolderMapping(void*, void*, int32_t) noexcept = 0;
            virtual int32_t __stdcall ClearVirtualHostNameToFolderMapping(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_KeyEventKind(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_VirtualKey(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall get_KeyEventLParam(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_PhysicalKeyStatus(struct struct_Microsoft_Web_WebView2_Core_CoreWebView2PhysicalKeyStatus*) noexcept = 0;
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_RootVisualTarget(void**) noexcept = 0;
            virtual int32_t __stdcall put_RootVisualTarget(void*) noexcept = 0;
            virtual int32_t __stdcall add_CursorChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CursorChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall SendMouseInput(int32_t, uint32_t, uint32_t, winrt::Windows::Foundation::Point) noexcept = 0;
            virtual int32_t __stdcall SendPointerInput(int32_t, void*) noexcept = 0;
            virtual int32_t __stdcall get_Cursor(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContentLoadingEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsErrorPage(bool*) noexcept = 0;
            virtual int32_t __stdcall get_NavigationId(uint64_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsVisible(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsVisible(bool) noexcept = 0;
            virtual int32_t __stdcall get_Bounds(winrt::Windows::Foundation::Rect*) noexcept = 0;
            virtual int32_t __stdcall put_Bounds(winrt::Windows::Foundation::Rect) noexcept = 0;
            virtual int32_t __stdcall get_ZoomFactor(double*) noexcept = 0;
            virtual int32_t __stdcall put_ZoomFactor(double) noexcept = 0;
            virtual int32_t __stdcall get_ParentWindow(void**) noexcept = 0;
            virtual int32_t __stdcall put_ParentWindow(void*) noexcept = 0;
            virtual int32_t __stdcall get_CoreWebView2(void**) noexcept = 0;
            virtual int32_t __stdcall add_ZoomFactorChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ZoomFactorChanged(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_MoveFocusRequested(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_MoveFocusRequested(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_GotFocus(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_GotFocus(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_LostFocus(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_LostFocus(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_AcceleratorKeyPressed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_AcceleratorKeyPressed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall SetBoundsAndZoomFactor(winrt::Windows::Foundation::Rect, double) noexcept = 0;
            virtual int32_t __stdcall MoveFocus(int32_t) noexcept = 0;
            virtual int32_t __stdcall NotifyParentWindowPositionChanged() noexcept = 0;
            virtual int32_t __stdcall Close() noexcept = 0;
            virtual int32_t __stdcall get_DefaultBackgroundColor(struct struct_Windows_UI_Color*) noexcept = 0;
            virtual int32_t __stdcall put_DefaultBackgroundColor(struct struct_Windows_UI_Color) noexcept = 0;
            virtual int32_t __stdcall get_RasterizationScale(double*) noexcept = 0;
            virtual int32_t __stdcall put_RasterizationScale(double) noexcept = 0;
            virtual int32_t __stdcall get_ShouldDetectMonitorScaleChanges(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ShouldDetectMonitorScaleChanges(bool) noexcept = 0;
            virtual int32_t __stdcall get_BoundsMode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_BoundsMode(int32_t) noexcept = 0;
            virtual int32_t __stdcall add_RasterizationScaleChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_RasterizationScaleChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerWindowReference>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_WindowHandle(uint64_t*) noexcept = 0;
            virtual int32_t __stdcall get_CoreWindow(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerWindowReferenceStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateFromWindowHandle(uint64_t, void**) noexcept = 0;
            virtual int32_t __stdcall CreateFromCoreWindow(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Name(void**) noexcept = 0;
            virtual int32_t __stdcall get_Value(void**) noexcept = 0;
            virtual int32_t __stdcall put_Value(void*) noexcept = 0;
            virtual int32_t __stdcall get_Domain(void**) noexcept = 0;
            virtual int32_t __stdcall get_Path(void**) noexcept = 0;
            virtual int32_t __stdcall get_Expires(double*) noexcept = 0;
            virtual int32_t __stdcall put_Expires(double) noexcept = 0;
            virtual int32_t __stdcall get_IsHttpOnly(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsHttpOnly(bool) noexcept = 0;
            virtual int32_t __stdcall get_SameSite(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_SameSite(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsSecure(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsSecure(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsSession(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateCookie(void*, void*, void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall CopyCookie(void*, void**) noexcept = 0;
            virtual int32_t __stdcall AddOrUpdateCookie(void*) noexcept = 0;
            virtual int32_t __stdcall DeleteCookie(void*) noexcept = 0;
            virtual int32_t __stdcall DeleteCookies(void*, void*) noexcept = 0;
            virtual int32_t __stdcall DeleteCookiesWithDomainAndPath(void*, void*, void*) noexcept = 0;
            virtual int32_t __stdcall DeleteAllCookies() noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DOMContentLoadedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_NavigationId(uint64_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceivedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ParameterObjectAsJson(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceiver>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall add_DevToolsProtocolEventReceived(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_DevToolsProtocolEventReceived(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_BrowserVersionString(void**) noexcept = 0;
            virtual int32_t __stdcall add_NewBrowserVersionAvailable(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_NewBrowserVersionAvailable(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall CreateCoreWebView2ControllerAsync(void*, void**) noexcept = 0;
            virtual int32_t __stdcall CreateWebResourceResponse(void*, int32_t, void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall CreateWebResourceRequest(void*, void*, void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall CreateCoreWebView2CompositionControllerAsync(void*, void**) noexcept = 0;
            virtual int32_t __stdcall CreateCoreWebView2PointerInfo(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_AdditionalBrowserArguments(void**) noexcept = 0;
            virtual int32_t __stdcall put_AdditionalBrowserArguments(void*) noexcept = 0;
            virtual int32_t __stdcall get_Language(void**) noexcept = 0;
            virtual int32_t __stdcall put_Language(void*) noexcept = 0;
            virtual int32_t __stdcall get_TargetCompatibleBrowserVersion(void**) noexcept = 0;
            virtual int32_t __stdcall put_TargetCompatibleBrowserVersion(void*) noexcept = 0;
            virtual int32_t __stdcall get_AllowSingleSignOnUsingOSPrimaryAccount(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AllowSingleSignOnUsingOSPrimaryAccount(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateAsync(void**) noexcept = 0;
            virtual int32_t __stdcall CreateWithOptionsAsync(void*, void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall GetAvailableBrowserVersionString(void**) noexcept = 0;
            virtual int32_t __stdcall GetAvailableBrowserVersionString2(void*, void**) noexcept = 0;
            virtual int32_t __stdcall CompareBrowserVersionString(void*, void*, int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpHeadersCollectionIterator>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpRequestHeaders>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GetHeader(void*, void**) noexcept = 0;
            virtual int32_t __stdcall GetHeaders(void*, void**) noexcept = 0;
            virtual int32_t __stdcall Contains(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall SetHeader(void*, void*) noexcept = 0;
            virtual int32_t __stdcall RemoveHeader(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpResponseHeaders>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall AppendHeader(void*, void*) noexcept = 0;
            virtual int32_t __stdcall Contains(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall GetHeader(void*, void**) noexcept = 0;
            virtual int32_t __stdcall GetHeaders(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2MoveFocusRequestedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Reason(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationCompletedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsSuccess(bool*) noexcept = 0;
            virtual int32_t __stdcall get_WebErrorStatus(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_NavigationId(uint64_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Uri(void**) noexcept = 0;
            virtual int32_t __stdcall get_IsUserInitiated(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsRedirected(bool*) noexcept = 0;
            virtual int32_t __stdcall get_RequestHeaders(void**) noexcept = 0;
            virtual int32_t __stdcall get_Cancel(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Cancel(bool) noexcept = 0;
            virtual int32_t __stdcall get_NavigationId(uint64_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Uri(void**) noexcept = 0;
            virtual int32_t __stdcall get_NewWindow(void**) noexcept = 0;
            virtual int32_t __stdcall put_NewWindow(void*) noexcept = 0;
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsUserInitiated(bool*) noexcept = 0;
            virtual int32_t __stdcall get_WindowFeatures(void**) noexcept = 0;
            virtual int32_t __stdcall GetDeferral(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Uri(void**) noexcept = 0;
            virtual int32_t __stdcall get_PermissionKind(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_IsUserInitiated(bool*) noexcept = 0;
            virtual int32_t __stdcall get_State(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_State(int32_t) noexcept = 0;
            virtual int32_t __stdcall GetDeferral(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PointerKind(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_PointerKind(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_PointerId(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_PointerId(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_FrameId(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_FrameId(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_PointerFlags(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_PointerFlags(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_PointerDeviceRect(winrt::Windows::Foundation::Rect*) noexcept = 0;
            virtual int32_t __stdcall put_PointerDeviceRect(winrt::Windows::Foundation::Rect) noexcept = 0;
            virtual int32_t __stdcall get_DisplayRect(winrt::Windows::Foundation::Rect*) noexcept = 0;
            virtual int32_t __stdcall put_DisplayRect(winrt::Windows::Foundation::Rect) noexcept = 0;
            virtual int32_t __stdcall get_PixelLocation(winrt::Windows::Foundation::Point*) noexcept = 0;
            virtual int32_t __stdcall put_PixelLocation(winrt::Windows::Foundation::Point) noexcept = 0;
            virtual int32_t __stdcall get_HimetricLocation(winrt::Windows::Foundation::Point*) noexcept = 0;
            virtual int32_t __stdcall put_HimetricLocation(winrt::Windows::Foundation::Point) noexcept = 0;
            virtual int32_t __stdcall get_PixelLocationRaw(winrt::Windows::Foundation::Point*) noexcept = 0;
            virtual int32_t __stdcall put_PixelLocationRaw(winrt::Windows::Foundation::Point) noexcept = 0;
            virtual int32_t __stdcall get_HimetricLocationRaw(winrt::Windows::Foundation::Point*) noexcept = 0;
            virtual int32_t __stdcall put_HimetricLocationRaw(winrt::Windows::Foundation::Point) noexcept = 0;
            virtual int32_t __stdcall get_Time(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_Time(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_HistoryCount(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_HistoryCount(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_InputData(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_InputData(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_KeyStates(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_KeyStates(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_PerformanceCount(uint64_t*) noexcept = 0;
            virtual int32_t __stdcall put_PerformanceCount(uint64_t) noexcept = 0;
            virtual int32_t __stdcall get_ButtonChangeKind(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_ButtonChangeKind(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_PenFlags(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_PenFlags(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_PenMask(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_PenMask(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_PenPressure(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_PenPressure(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_PenRotation(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_PenRotation(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_PenTiltX(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_PenTiltX(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_PenTiltY(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_PenTiltY(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_TouchFlags(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TouchFlags(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_TouchMask(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TouchMask(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_TouchContact(winrt::Windows::Foundation::Rect*) noexcept = 0;
            virtual int32_t __stdcall put_TouchContact(winrt::Windows::Foundation::Rect) noexcept = 0;
            virtual int32_t __stdcall get_TouchContactRaw(winrt::Windows::Foundation::Rect*) noexcept = 0;
            virtual int32_t __stdcall put_TouchContactRaw(winrt::Windows::Foundation::Rect) noexcept = 0;
            virtual int32_t __stdcall get_TouchOrientation(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TouchOrientation(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_TouchPressure(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_TouchPressure(uint32_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ProcessFailedKind(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Uri(void**) noexcept = 0;
            virtual int32_t __stdcall get_Kind(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Message(void**) noexcept = 0;
            virtual int32_t __stdcall get_DefaultText(void**) noexcept = 0;
            virtual int32_t __stdcall get_ResultText(void**) noexcept = 0;
            virtual int32_t __stdcall put_ResultText(void*) noexcept = 0;
            virtual int32_t __stdcall Accept() noexcept = 0;
            virtual int32_t __stdcall GetDeferral(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsScriptEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsScriptEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsWebMessageEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsWebMessageEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_AreDefaultScriptDialogsEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AreDefaultScriptDialogsEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsStatusBarEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsStatusBarEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_AreDevToolsEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AreDevToolsEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_AreDefaultContextMenusEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AreDefaultContextMenusEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_AreHostObjectsAllowed(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AreHostObjectsAllowed(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsZoomControlEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsZoomControlEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_IsBuiltInErrorPageEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_IsBuiltInErrorPageEnabled(bool) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SourceChangedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_IsNewDocument(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebMessageReceivedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Source(void**) noexcept = 0;
            virtual int32_t __stdcall get_WebMessageAsJson(void**) noexcept = 0;
            virtual int32_t __stdcall TryGetWebMessageAsString(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequest>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Uri(void**) noexcept = 0;
            virtual int32_t __stdcall put_Uri(void*) noexcept = 0;
            virtual int32_t __stdcall get_Method(void**) noexcept = 0;
            virtual int32_t __stdcall put_Method(void*) noexcept = 0;
            virtual int32_t __stdcall get_Content(void**) noexcept = 0;
            virtual int32_t __stdcall put_Content(void*) noexcept = 0;
            virtual int32_t __stdcall get_Headers(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequestedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Request(void**) noexcept = 0;
            virtual int32_t __stdcall get_Response(void**) noexcept = 0;
            virtual int32_t __stdcall put_Response(void*) noexcept = 0;
            virtual int32_t __stdcall get_ResourceContext(int32_t*) noexcept = 0;
            virtual int32_t __stdcall GetDeferral(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponse>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Content(void**) noexcept = 0;
            virtual int32_t __stdcall put_Content(void*) noexcept = 0;
            virtual int32_t __stdcall get_Headers(void**) noexcept = 0;
            virtual int32_t __stdcall get_StatusCode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_StatusCode(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_ReasonPhrase(void**) noexcept = 0;
            virtual int32_t __stdcall put_ReasonPhrase(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseReceivedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Request(void**) noexcept = 0;
            virtual int32_t __stdcall get_Response(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseView>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Headers(void**) noexcept = 0;
            virtual int32_t __stdcall get_StatusCode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_ReasonPhrase(void**) noexcept = 0;
            virtual int32_t __stdcall GetContentAsync(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HasPosition(bool*) noexcept = 0;
            virtual int32_t __stdcall get_HasSize(bool*) noexcept = 0;
            virtual int32_t __stdcall get_Left(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Top(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Height(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Width(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall get_ShouldDisplayMenuBar(bool*) noexcept = 0;
            virtual int32_t __stdcall get_ShouldDisplayStatus(bool*) noexcept = 0;
            virtual int32_t __stdcall get_ShouldDisplayToolbar(bool*) noexcept = 0;
            virtual int32_t __stdcall get_ShouldDisplayScrollBars(bool*) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_Web_WebView2_Core_ICoreWebView2
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Web::WebView2::Core::CoreWebView2Settings) Settings() const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Source() const;
        [[nodiscard]] WINRT_IMPL_AUTO(uint32_t) BrowserProcessId() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) CanGoBack() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) CanGoForward() const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) DocumentTitle() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) ContainsFullScreenElement() const;
        WINRT_IMPL_AUTO(winrt::event_token) NavigationStarting(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationStartingEventArgs> const& handler) const;
        using NavigationStarting_revoker = impl::event_revoker<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, &impl::abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>::remove_NavigationStarting>;
        [[nodiscard]] NavigationStarting_revoker NavigationStarting(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationStartingEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) NavigationStarting(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) ContentLoading(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ContentLoadingEventArgs> const& handler) const;
        using ContentLoading_revoker = impl::event_revoker<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, &impl::abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>::remove_ContentLoading>;
        [[nodiscard]] ContentLoading_revoker ContentLoading(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ContentLoadingEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) ContentLoading(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) SourceChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2SourceChangedEventArgs> const& handler) const;
        using SourceChanged_revoker = impl::event_revoker<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, &impl::abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>::remove_SourceChanged>;
        [[nodiscard]] SourceChanged_revoker SourceChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2SourceChangedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) SourceChanged(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) HistoryChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using HistoryChanged_revoker = impl::event_revoker<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, &impl::abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>::remove_HistoryChanged>;
        [[nodiscard]] HistoryChanged_revoker HistoryChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) HistoryChanged(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) NavigationCompleted(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationCompletedEventArgs> const& handler) const;
        using NavigationCompleted_revoker = impl::event_revoker<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, &impl::abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>::remove_NavigationCompleted>;
        [[nodiscard]] NavigationCompleted_revoker NavigationCompleted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationCompletedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) NavigationCompleted(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) FrameNavigationStarting(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationStartingEventArgs> const& handler) const;
        using FrameNavigationStarting_revoker = impl::event_revoker<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, &impl::abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>::remove_FrameNavigationStarting>;
        [[nodiscard]] FrameNavigationStarting_revoker FrameNavigationStarting(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationStartingEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) FrameNavigationStarting(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) FrameNavigationCompleted(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationCompletedEventArgs> const& handler) const;
        using FrameNavigationCompleted_revoker = impl::event_revoker<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, &impl::abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>::remove_FrameNavigationCompleted>;
        [[nodiscard]] FrameNavigationCompleted_revoker FrameNavigationCompleted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NavigationCompletedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) FrameNavigationCompleted(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) ScriptDialogOpening(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ScriptDialogOpeningEventArgs> const& handler) const;
        using ScriptDialogOpening_revoker = impl::event_revoker<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, &impl::abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>::remove_ScriptDialogOpening>;
        [[nodiscard]] ScriptDialogOpening_revoker ScriptDialogOpening(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ScriptDialogOpeningEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) ScriptDialogOpening(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) PermissionRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2PermissionRequestedEventArgs> const& handler) const;
        using PermissionRequested_revoker = impl::event_revoker<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, &impl::abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>::remove_PermissionRequested>;
        [[nodiscard]] PermissionRequested_revoker PermissionRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2PermissionRequestedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) PermissionRequested(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) ProcessFailed(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ProcessFailedEventArgs> const& handler) const;
        using ProcessFailed_revoker = impl::event_revoker<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, &impl::abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>::remove_ProcessFailed>;
        [[nodiscard]] ProcessFailed_revoker ProcessFailed(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2ProcessFailedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) ProcessFailed(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) WebMessageReceived(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebMessageReceivedEventArgs> const& handler) const;
        using WebMessageReceived_revoker = impl::event_revoker<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, &impl::abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>::remove_WebMessageReceived>;
        [[nodiscard]] WebMessageReceived_revoker WebMessageReceived(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebMessageReceivedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) WebMessageReceived(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) NewWindowRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NewWindowRequestedEventArgs> const& handler) const;
        using NewWindowRequested_revoker = impl::event_revoker<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, &impl::abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>::remove_NewWindowRequested>;
        [[nodiscard]] NewWindowRequested_revoker NewWindowRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2NewWindowRequestedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) NewWindowRequested(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) DocumentTitleChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using DocumentTitleChanged_revoker = impl::event_revoker<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, &impl::abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>::remove_DocumentTitleChanged>;
        [[nodiscard]] DocumentTitleChanged_revoker DocumentTitleChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) DocumentTitleChanged(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) ContainsFullScreenElementChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using ContainsFullScreenElementChanged_revoker = impl::event_revoker<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, &impl::abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>::remove_ContainsFullScreenElementChanged>;
        [[nodiscard]] ContainsFullScreenElementChanged_revoker ContainsFullScreenElementChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) ContainsFullScreenElementChanged(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) WebResourceRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceRequestedEventArgs> const& handler) const;
        using WebResourceRequested_revoker = impl::event_revoker<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, &impl::abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>::remove_WebResourceRequested>;
        [[nodiscard]] WebResourceRequested_revoker WebResourceRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceRequestedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) WebResourceRequested(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) WindowCloseRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using WindowCloseRequested_revoker = impl::event_revoker<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, &impl::abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>::remove_WindowCloseRequested>;
        [[nodiscard]] WindowCloseRequested_revoker WindowCloseRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) WindowCloseRequested(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(void) Navigate(param::hstring const& uri) const;
        WINRT_IMPL_AUTO(void) NavigateToString(param::hstring const& htmlContent) const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::IAsyncOperation<hstring>) AddScriptToExecuteOnDocumentCreatedAsync(param::hstring const& javaScript) const;
        WINRT_IMPL_AUTO(void) RemoveScriptToExecuteOnDocumentCreated(param::hstring const& id) const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::IAsyncOperation<hstring>) ExecuteScriptAsync(param::hstring const& javaScript) const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::IAsyncAction) CapturePreviewAsync(winrt::Microsoft::Web::WebView2::Core::CoreWebView2CapturePreviewImageFormat const& imageFormat, winrt::Windows::Storage::Streams::IRandomAccessStream const& imageStream) const;
        WINRT_IMPL_AUTO(void) Reload() const;
        WINRT_IMPL_AUTO(void) PostWebMessageAsJson(param::hstring const& webMessageAsJson) const;
        WINRT_IMPL_AUTO(void) PostWebMessageAsString(param::hstring const& webMessageAsString) const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::IAsyncOperation<hstring>) CallDevToolsProtocolMethodAsync(param::hstring const& methodName, param::hstring const& parametersAsJson) const;
        WINRT_IMPL_AUTO(void) GoBack() const;
        WINRT_IMPL_AUTO(void) GoForward() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::Web::WebView2::Core::CoreWebView2DevToolsProtocolEventReceiver) GetDevToolsProtocolEventReceiver(param::hstring const& eventName) const;
        WINRT_IMPL_AUTO(void) Stop() const;
        WINRT_IMPL_AUTO(void) AddHostObjectToScript(param::hstring const& name, winrt::Windows::Foundation::IInspectable const& rawObject) const;
        WINRT_IMPL_AUTO(void) RemoveHostObjectFromScript(param::hstring const& name) const;
        WINRT_IMPL_AUTO(void) OpenDevToolsWindow() const;
        WINRT_IMPL_AUTO(void) AddWebResourceRequestedFilter(param::hstring const& uri, winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceContext const& ResourceContext) const;
        WINRT_IMPL_AUTO(void) RemoveWebResourceRequestedFilter(param::hstring const& uri, winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceContext const& ResourceContext) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Web::WebView2::Core::CoreWebView2CookieManager) CookieManager() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Web::WebView2::Core::CoreWebView2Environment) Environment() const;
        WINRT_IMPL_AUTO(winrt::event_token) WebResourceResponseReceived(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceResponseReceivedEventArgs> const& handler) const;
        using WebResourceResponseReceived_revoker = impl::event_revoker<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, &impl::abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>::remove_WebResourceResponseReceived>;
        [[nodiscard]] WebResourceResponseReceived_revoker WebResourceResponseReceived(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceResponseReceivedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) WebResourceResponseReceived(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) DOMContentLoaded(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2DOMContentLoadedEventArgs> const& handler) const;
        using DOMContentLoaded_revoker = impl::event_revoker<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2, &impl::abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>::remove_DOMContentLoaded>;
        [[nodiscard]] DOMContentLoaded_revoker DOMContentLoaded(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2DOMContentLoadedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) DOMContentLoaded(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(void) NavigateWithWebResourceRequest(winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceRequest const& Request) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsSuspended() const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::IAsyncOperation<bool>) TrySuspendAsync() const;
        WINRT_IMPL_AUTO(void) Resume() const;
        WINRT_IMPL_AUTO(void) SetVirtualHostNameToFolderMapping(param::hstring const& hostName, param::hstring const& folderPath, winrt::Microsoft::Web::WebView2::Core::CoreWebView2HostResourceAccessKind const& accessKind) const;
        WINRT_IMPL_AUTO(void) ClearVirtualHostNameToFolderMapping(param::hstring const& hostName) const;
    };
    template <> struct consume<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2>
    {
        template <typename D> using type = consume_Microsoft_Web_WebView2_Core_ICoreWebView2<D>;
    };
    template <typename D>
    struct consume_Microsoft_Web_WebView2_Core_ICoreWebView2AcceleratorKeyPressedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Web::WebView2::Core::CoreWebView2KeyEventKind) KeyEventKind() const;
        [[nodiscard]] WINRT_IMPL_AUTO(uint32_t) VirtualKey() const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) KeyEventLParam() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Web::WebView2::Core::CoreWebView2PhysicalKeyStatus) PhysicalKeyStatus() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) Handled() const;
        WINRT_IMPL_AUTO(void) Handled(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2AcceleratorKeyPressedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_Web_WebView2_Core_ICoreWebView2AcceleratorKeyPressedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::IInspectable) RootVisualTarget() const;
        WINRT_IMPL_AUTO(void) RootVisualTarget(winrt::Windows::Foundation::IInspectable const& value) const;
        WINRT_IMPL_AUTO(winrt::event_token) CursorChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2CompositionController, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using CursorChanged_revoker = impl::event_revoker<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController, &impl::abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController>::remove_CursorChanged>;
        [[nodiscard]] CursorChanged_revoker CursorChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2CompositionController, winrt::Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) CursorChanged(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(void) SendMouseInput(winrt::Microsoft::Web::WebView2::Core::CoreWebView2MouseEventKind const& eventKind, winrt::Microsoft::Web::WebView2::Core::CoreWebView2MouseEventVirtualKeys const& virtualKeys, uint32_t mouseData, winrt::Windows::Foundation::Point const& point) const;
        WINRT_IMPL_AUTO(void) SendPointerInput(winrt::Microsoft::Web::WebView2::Core::CoreWebView2PointerEventKind const& eventKind, winrt::Microsoft::Web::WebView2::Core::CoreWebView2PointerInfo const& pointerInfo) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Core::CoreCursor) Cursor() const;
    };
    template <> struct consume<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CompositionController>
    {
        template <typename D> using type = consume_Microsoft_Web_WebView2_Core_ICoreWebView2CompositionController<D>;
    };
    template <typename D>
    struct consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContentLoadingEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsErrorPage() const;
        [[nodiscard]] WINRT_IMPL_AUTO(uint64_t) NavigationId() const;
    };
    template <> struct consume<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ContentLoadingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_Web_WebView2_Core_ICoreWebView2ContentLoadingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsVisible() const;
        WINRT_IMPL_AUTO(void) IsVisible(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Rect) Bounds() const;
        WINRT_IMPL_AUTO(void) Bounds(winrt::Windows::Foundation::Rect const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) ZoomFactor() const;
        WINRT_IMPL_AUTO(void) ZoomFactor(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Web::WebView2::Core::CoreWebView2ControllerWindowReference) ParentWindow() const;
        WINRT_IMPL_AUTO(void) ParentWindow(winrt::Microsoft::Web::WebView2::Core::CoreWebView2ControllerWindowReference const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Web::WebView2::Core::CoreWebView2) CoreWebView2() const;
        WINRT_IMPL_AUTO(winrt::event_token) ZoomFactorChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using ZoomFactorChanged_revoker = impl::event_revoker<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller, &impl::abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>::remove_ZoomFactorChanged>;
        [[nodiscard]] ZoomFactorChanged_revoker ZoomFactorChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller, winrt::Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) ZoomFactorChanged(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) MoveFocusRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller, winrt::Microsoft::Web::WebView2::Core::CoreWebView2MoveFocusRequestedEventArgs> const& handler) const;
        using MoveFocusRequested_revoker = impl::event_revoker<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller, &impl::abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>::remove_MoveFocusRequested>;
        [[nodiscard]] MoveFocusRequested_revoker MoveFocusRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller, winrt::Microsoft::Web::WebView2::Core::CoreWebView2MoveFocusRequestedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) MoveFocusRequested(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) GotFocus(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using GotFocus_revoker = impl::event_revoker<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller, &impl::abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>::remove_GotFocus>;
        [[nodiscard]] GotFocus_revoker GotFocus(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller, winrt::Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) GotFocus(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) LostFocus(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using LostFocus_revoker = impl::event_revoker<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller, &impl::abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>::remove_LostFocus>;
        [[nodiscard]] LostFocus_revoker LostFocus(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller, winrt::Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) LostFocus(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) AcceleratorKeyPressed(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller, winrt::Microsoft::Web::WebView2::Core::CoreWebView2AcceleratorKeyPressedEventArgs> const& handler) const;
        using AcceleratorKeyPressed_revoker = impl::event_revoker<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller, &impl::abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>::remove_AcceleratorKeyPressed>;
        [[nodiscard]] AcceleratorKeyPressed_revoker AcceleratorKeyPressed(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller, winrt::Microsoft::Web::WebView2::Core::CoreWebView2AcceleratorKeyPressedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) AcceleratorKeyPressed(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(void) SetBoundsAndZoomFactor(winrt::Windows::Foundation::Rect const& Bounds, double ZoomFactor) const;
        WINRT_IMPL_AUTO(void) MoveFocus(winrt::Microsoft::Web::WebView2::Core::CoreWebView2MoveFocusReason const& reason) const;
        WINRT_IMPL_AUTO(void) NotifyParentWindowPositionChanged() const;
        WINRT_IMPL_AUTO(void) Close() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Color) DefaultBackgroundColor() const;
        WINRT_IMPL_AUTO(void) DefaultBackgroundColor(winrt::Windows::UI::Color const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) RasterizationScale() const;
        WINRT_IMPL_AUTO(void) RasterizationScale(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) ShouldDetectMonitorScaleChanges() const;
        WINRT_IMPL_AUTO(void) ShouldDetectMonitorScaleChanges(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Web::WebView2::Core::CoreWebView2BoundsMode) BoundsMode() const;
        WINRT_IMPL_AUTO(void) BoundsMode(winrt::Microsoft::Web::WebView2::Core::CoreWebView2BoundsMode const& value) const;
        WINRT_IMPL_AUTO(winrt::event_token) RasterizationScaleChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using RasterizationScaleChanged_revoker = impl::event_revoker<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller, &impl::abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>::remove_RasterizationScaleChanged>;
        [[nodiscard]] RasterizationScaleChanged_revoker RasterizationScaleChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller, winrt::Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) RasterizationScaleChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Controller>
    {
        template <typename D> using type = consume_Microsoft_Web_WebView2_Core_ICoreWebView2Controller<D>;
    };
    template <typename D>
    struct consume_Microsoft_Web_WebView2_Core_ICoreWebView2ControllerFactory
    {
    };
    template <> struct consume<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerFactory>
    {
        template <typename D> using type = consume_Microsoft_Web_WebView2_Core_ICoreWebView2ControllerFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_Web_WebView2_Core_ICoreWebView2ControllerWindowReference
    {
        [[nodiscard]] WINRT_IMPL_AUTO(uint64_t) WindowHandle() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::UI::Core::CoreWindow) CoreWindow() const;
    };
    template <> struct consume<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerWindowReference>
    {
        template <typename D> using type = consume_Microsoft_Web_WebView2_Core_ICoreWebView2ControllerWindowReference<D>;
    };
    template <typename D>
    struct consume_Microsoft_Web_WebView2_Core_ICoreWebView2ControllerWindowReferenceStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::Web::WebView2::Core::CoreWebView2ControllerWindowReference) CreateFromWindowHandle(uint64_t windowHandle) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::Web::WebView2::Core::CoreWebView2ControllerWindowReference) CreateFromCoreWindow(winrt::Windows::UI::Core::CoreWindow const& coreWindow) const;
    };
    template <> struct consume<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ControllerWindowReferenceStatics>
    {
        template <typename D> using type = consume_Microsoft_Web_WebView2_Core_ICoreWebView2ControllerWindowReferenceStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_Web_WebView2_Core_ICoreWebView2Cookie
    {
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Name() const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Value() const;
        WINRT_IMPL_AUTO(void) Value(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Domain() const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Path() const;
        [[nodiscard]] WINRT_IMPL_AUTO(double) Expires() const;
        WINRT_IMPL_AUTO(void) Expires(double value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsHttpOnly() const;
        WINRT_IMPL_AUTO(void) IsHttpOnly(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Web::WebView2::Core::CoreWebView2CookieSameSiteKind) SameSite() const;
        WINRT_IMPL_AUTO(void) SameSite(winrt::Microsoft::Web::WebView2::Core::CoreWebView2CookieSameSiteKind const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsSecure() const;
        WINRT_IMPL_AUTO(void) IsSecure(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsSession() const;
    };
    template <> struct consume<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Cookie>
    {
        template <typename D> using type = consume_Microsoft_Web_WebView2_Core_ICoreWebView2Cookie<D>;
    };
    template <typename D>
    struct consume_Microsoft_Web_WebView2_Core_ICoreWebView2CookieManager
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::Web::WebView2::Core::CoreWebView2Cookie) CreateCookie(param::hstring const& name, param::hstring const& value, param::hstring const& Domain, param::hstring const& Path) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::Web::WebView2::Core::CoreWebView2Cookie) CopyCookie(winrt::Microsoft::Web::WebView2::Core::CoreWebView2Cookie const& cookieParam) const;
        WINRT_IMPL_AUTO(void) AddOrUpdateCookie(winrt::Microsoft::Web::WebView2::Core::CoreWebView2Cookie const& cookie) const;
        WINRT_IMPL_AUTO(void) DeleteCookie(winrt::Microsoft::Web::WebView2::Core::CoreWebView2Cookie const& cookie) const;
        WINRT_IMPL_AUTO(void) DeleteCookies(param::hstring const& name, param::hstring const& uri) const;
        WINRT_IMPL_AUTO(void) DeleteCookiesWithDomainAndPath(param::hstring const& name, param::hstring const& Domain, param::hstring const& Path) const;
        WINRT_IMPL_AUTO(void) DeleteAllCookies() const;
    };
    template <> struct consume<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2CookieManager>
    {
        template <typename D> using type = consume_Microsoft_Web_WebView2_Core_ICoreWebView2CookieManager<D>;
    };
    template <typename D>
    struct consume_Microsoft_Web_WebView2_Core_ICoreWebView2DOMContentLoadedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(uint64_t) NavigationId() const;
    };
    template <> struct consume<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DOMContentLoadedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_Web_WebView2_Core_ICoreWebView2DOMContentLoadedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_Web_WebView2_Core_ICoreWebView2DevToolsProtocolEventReceivedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) ParameterObjectAsJson() const;
    };
    template <> struct consume<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceivedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_Web_WebView2_Core_ICoreWebView2DevToolsProtocolEventReceivedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_Web_WebView2_Core_ICoreWebView2DevToolsProtocolEventReceiver
    {
        WINRT_IMPL_AUTO(winrt::event_token) DevToolsProtocolEventReceived(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2DevToolsProtocolEventReceivedEventArgs> const& handler) const;
        using DevToolsProtocolEventReceived_revoker = impl::event_revoker<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceiver, &impl::abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceiver>::remove_DevToolsProtocolEventReceived>;
        [[nodiscard]] DevToolsProtocolEventReceived_revoker DevToolsProtocolEventReceived(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2, winrt::Microsoft::Web::WebView2::Core::CoreWebView2DevToolsProtocolEventReceivedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) DevToolsProtocolEventReceived(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2DevToolsProtocolEventReceiver>
    {
        template <typename D> using type = consume_Microsoft_Web_WebView2_Core_ICoreWebView2DevToolsProtocolEventReceiver<D>;
    };
    template <typename D>
    struct consume_Microsoft_Web_WebView2_Core_ICoreWebView2Environment
    {
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) BrowserVersionString() const;
        WINRT_IMPL_AUTO(winrt::event_token) NewBrowserVersionAvailable(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Environment, winrt::Windows::Foundation::IInspectable> const& handler) const;
        using NewBrowserVersionAvailable_revoker = impl::event_revoker<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment, &impl::abi_t<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment>::remove_NewBrowserVersionAvailable>;
        [[nodiscard]] NewBrowserVersionAvailable_revoker NewBrowserVersionAvailable(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Environment, winrt::Windows::Foundation::IInspectable> const& handler) const;
        WINRT_IMPL_AUTO(void) NewBrowserVersionAvailable(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Controller>) CreateCoreWebView2ControllerAsync(winrt::Microsoft::Web::WebView2::Core::CoreWebView2ControllerWindowReference const& ParentWindow) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceResponse) CreateWebResourceResponse(winrt::Windows::Storage::Streams::IRandomAccessStream const& Content, int32_t StatusCode, param::hstring const& ReasonPhrase, param::hstring const& Headers) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceRequest) CreateWebResourceRequest(param::hstring const& uri, param::hstring const& Method, winrt::Windows::Storage::Streams::IRandomAccessStream const& postData, param::hstring const& Headers) const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Web::WebView2::Core::CoreWebView2CompositionController>) CreateCoreWebView2CompositionControllerAsync(winrt::Microsoft::Web::WebView2::Core::CoreWebView2ControllerWindowReference const& ParentWindow) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::Web::WebView2::Core::CoreWebView2PointerInfo) CreateCoreWebView2PointerInfo() const;
    };
    template <> struct consume<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Environment>
    {
        template <typename D> using type = consume_Microsoft_Web_WebView2_Core_ICoreWebView2Environment<D>;
    };
    template <typename D>
    struct consume_Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions
    {
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) AdditionalBrowserArguments() const;
        WINRT_IMPL_AUTO(void) AdditionalBrowserArguments(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Language() const;
        WINRT_IMPL_AUTO(void) Language(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) TargetCompatibleBrowserVersion() const;
        WINRT_IMPL_AUTO(void) TargetCompatibleBrowserVersion(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) AllowSingleSignOnUsingOSPrimaryAccount() const;
        WINRT_IMPL_AUTO(void) AllowSingleSignOnUsingOSPrimaryAccount(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentOptions>
    {
        template <typename D> using type = consume_Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentOptions<D>;
    };
    template <typename D>
    struct consume_Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentStatics
    {
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Environment>) CreateAsync() const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::IAsyncOperation<winrt::Microsoft::Web::WebView2::Core::CoreWebView2Environment>) CreateWithOptionsAsync(param::hstring const& browserExecutableFolder, param::hstring const& userDataFolder, winrt::Microsoft::Web::WebView2::Core::CoreWebView2EnvironmentOptions const& options) const;
        WINRT_IMPL_AUTO(hstring) GetAvailableBrowserVersionString() const;
        WINRT_IMPL_AUTO(hstring) GetAvailableBrowserVersionString(param::hstring const& browserExecutableFolder) const;
        WINRT_IMPL_AUTO(int32_t) CompareBrowserVersionString(param::hstring const& browserVersionString1, param::hstring const& browserVersionString2) const;
    };
    template <> struct consume<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2EnvironmentStatics>
    {
        template <typename D> using type = consume_Microsoft_Web_WebView2_Core_ICoreWebView2EnvironmentStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_Web_WebView2_Core_ICoreWebView2HttpHeadersCollectionIterator
    {
    };
    template <> struct consume<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpHeadersCollectionIterator>
    {
        template <typename D> using type = consume_Microsoft_Web_WebView2_Core_ICoreWebView2HttpHeadersCollectionIterator<D>;
    };
    template <typename D>
    struct consume_Microsoft_Web_WebView2_Core_ICoreWebView2HttpRequestHeaders
    {
        WINRT_IMPL_AUTO(hstring) GetHeader(param::hstring const& name) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::Web::WebView2::Core::CoreWebView2HttpHeadersCollectionIterator) GetHeaders(param::hstring const& name) const;
        WINRT_IMPL_AUTO(bool) Contains(param::hstring const& name) const;
        WINRT_IMPL_AUTO(void) SetHeader(param::hstring const& name, param::hstring const& value) const;
        WINRT_IMPL_AUTO(void) RemoveHeader(param::hstring const& name) const;
    };
    template <> struct consume<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpRequestHeaders>
    {
        template <typename D> using type = consume_Microsoft_Web_WebView2_Core_ICoreWebView2HttpRequestHeaders<D>;
    };
    template <typename D>
    struct consume_Microsoft_Web_WebView2_Core_ICoreWebView2HttpResponseHeaders
    {
        WINRT_IMPL_AUTO(void) AppendHeader(param::hstring const& name, param::hstring const& value) const;
        WINRT_IMPL_AUTO(bool) Contains(param::hstring const& name) const;
        WINRT_IMPL_AUTO(hstring) GetHeader(param::hstring const& name) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::Web::WebView2::Core::CoreWebView2HttpHeadersCollectionIterator) GetHeaders(param::hstring const& name) const;
    };
    template <> struct consume<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2HttpResponseHeaders>
    {
        template <typename D> using type = consume_Microsoft_Web_WebView2_Core_ICoreWebView2HttpResponseHeaders<D>;
    };
    template <typename D>
    struct consume_Microsoft_Web_WebView2_Core_ICoreWebView2MoveFocusRequestedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Web::WebView2::Core::CoreWebView2MoveFocusReason) Reason() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) Handled() const;
        WINRT_IMPL_AUTO(void) Handled(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2MoveFocusRequestedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_Web_WebView2_Core_ICoreWebView2MoveFocusRequestedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_Web_WebView2_Core_ICoreWebView2NavigationCompletedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsSuccess() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebErrorStatus) WebErrorStatus() const;
        [[nodiscard]] WINRT_IMPL_AUTO(uint64_t) NavigationId() const;
    };
    template <> struct consume<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationCompletedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_Web_WebView2_Core_ICoreWebView2NavigationCompletedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_Web_WebView2_Core_ICoreWebView2NavigationStartingEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Uri() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsUserInitiated() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsRedirected() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Web::WebView2::Core::CoreWebView2HttpRequestHeaders) RequestHeaders() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) Cancel() const;
        WINRT_IMPL_AUTO(void) Cancel(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(uint64_t) NavigationId() const;
    };
    template <> struct consume<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NavigationStartingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_Web_WebView2_Core_ICoreWebView2NavigationStartingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_Web_WebView2_Core_ICoreWebView2NewWindowRequestedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Uri() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Web::WebView2::Core::CoreWebView2) NewWindow() const;
        WINRT_IMPL_AUTO(void) NewWindow(winrt::Microsoft::Web::WebView2::Core::CoreWebView2 const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) Handled() const;
        WINRT_IMPL_AUTO(void) Handled(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsUserInitiated() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Web::WebView2::Core::CoreWebView2WindowFeatures) WindowFeatures() const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::Deferral) GetDeferral() const;
    };
    template <> struct consume<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2NewWindowRequestedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_Web_WebView2_Core_ICoreWebView2NewWindowRequestedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_Web_WebView2_Core_ICoreWebView2PermissionRequestedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Uri() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Web::WebView2::Core::CoreWebView2PermissionKind) PermissionKind() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsUserInitiated() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Web::WebView2::Core::CoreWebView2PermissionState) State() const;
        WINRT_IMPL_AUTO(void) State(winrt::Microsoft::Web::WebView2::Core::CoreWebView2PermissionState const& value) const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::Deferral) GetDeferral() const;
    };
    template <> struct consume<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PermissionRequestedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_Web_WebView2_Core_ICoreWebView2PermissionRequestedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo
    {
        [[nodiscard]] WINRT_IMPL_AUTO(uint32_t) PointerKind() const;
        WINRT_IMPL_AUTO(void) PointerKind(uint32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(uint32_t) PointerId() const;
        WINRT_IMPL_AUTO(void) PointerId(uint32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(uint32_t) FrameId() const;
        WINRT_IMPL_AUTO(void) FrameId(uint32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(uint32_t) PointerFlags() const;
        WINRT_IMPL_AUTO(void) PointerFlags(uint32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Rect) PointerDeviceRect() const;
        WINRT_IMPL_AUTO(void) PointerDeviceRect(winrt::Windows::Foundation::Rect const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Rect) DisplayRect() const;
        WINRT_IMPL_AUTO(void) DisplayRect(winrt::Windows::Foundation::Rect const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) PixelLocation() const;
        WINRT_IMPL_AUTO(void) PixelLocation(winrt::Windows::Foundation::Point const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) HimetricLocation() const;
        WINRT_IMPL_AUTO(void) HimetricLocation(winrt::Windows::Foundation::Point const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) PixelLocationRaw() const;
        WINRT_IMPL_AUTO(void) PixelLocationRaw(winrt::Windows::Foundation::Point const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) HimetricLocationRaw() const;
        WINRT_IMPL_AUTO(void) HimetricLocationRaw(winrt::Windows::Foundation::Point const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(uint32_t) Time() const;
        WINRT_IMPL_AUTO(void) Time(uint32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(uint32_t) HistoryCount() const;
        WINRT_IMPL_AUTO(void) HistoryCount(uint32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) InputData() const;
        WINRT_IMPL_AUTO(void) InputData(int32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(uint32_t) KeyStates() const;
        WINRT_IMPL_AUTO(void) KeyStates(uint32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(uint64_t) PerformanceCount() const;
        WINRT_IMPL_AUTO(void) PerformanceCount(uint64_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) ButtonChangeKind() const;
        WINRT_IMPL_AUTO(void) ButtonChangeKind(int32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(uint32_t) PenFlags() const;
        WINRT_IMPL_AUTO(void) PenFlags(uint32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(uint32_t) PenMask() const;
        WINRT_IMPL_AUTO(void) PenMask(uint32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(uint32_t) PenPressure() const;
        WINRT_IMPL_AUTO(void) PenPressure(uint32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(uint32_t) PenRotation() const;
        WINRT_IMPL_AUTO(void) PenRotation(uint32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) PenTiltX() const;
        WINRT_IMPL_AUTO(void) PenTiltX(int32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) PenTiltY() const;
        WINRT_IMPL_AUTO(void) PenTiltY(int32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(uint32_t) TouchFlags() const;
        WINRT_IMPL_AUTO(void) TouchFlags(uint32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(uint32_t) TouchMask() const;
        WINRT_IMPL_AUTO(void) TouchMask(uint32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Rect) TouchContact() const;
        WINRT_IMPL_AUTO(void) TouchContact(winrt::Windows::Foundation::Rect const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Rect) TouchContactRaw() const;
        WINRT_IMPL_AUTO(void) TouchContactRaw(winrt::Windows::Foundation::Rect const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(uint32_t) TouchOrientation() const;
        WINRT_IMPL_AUTO(void) TouchOrientation(uint32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(uint32_t) TouchPressure() const;
        WINRT_IMPL_AUTO(void) TouchPressure(uint32_t value) const;
    };
    template <> struct consume<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2PointerInfo>
    {
        template <typename D> using type = consume_Microsoft_Web_WebView2_Core_ICoreWebView2PointerInfo<D>;
    };
    template <typename D>
    struct consume_Microsoft_Web_WebView2_Core_ICoreWebView2ProcessFailedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Web::WebView2::Core::CoreWebView2ProcessFailedKind) ProcessFailedKind() const;
    };
    template <> struct consume<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ProcessFailedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_Web_WebView2_Core_ICoreWebView2ProcessFailedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_Web_WebView2_Core_ICoreWebView2ScriptDialogOpeningEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Uri() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Web::WebView2::Core::CoreWebView2ScriptDialogKind) Kind() const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Message() const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) DefaultText() const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) ResultText() const;
        WINRT_IMPL_AUTO(void) ResultText(param::hstring const& value) const;
        WINRT_IMPL_AUTO(void) Accept() const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::Deferral) GetDeferral() const;
    };
    template <> struct consume<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2ScriptDialogOpeningEventArgs>
    {
        template <typename D> using type = consume_Microsoft_Web_WebView2_Core_ICoreWebView2ScriptDialogOpeningEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsScriptEnabled() const;
        WINRT_IMPL_AUTO(void) IsScriptEnabled(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsWebMessageEnabled() const;
        WINRT_IMPL_AUTO(void) IsWebMessageEnabled(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) AreDefaultScriptDialogsEnabled() const;
        WINRT_IMPL_AUTO(void) AreDefaultScriptDialogsEnabled(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsStatusBarEnabled() const;
        WINRT_IMPL_AUTO(void) IsStatusBarEnabled(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) AreDevToolsEnabled() const;
        WINRT_IMPL_AUTO(void) AreDevToolsEnabled(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) AreDefaultContextMenusEnabled() const;
        WINRT_IMPL_AUTO(void) AreDefaultContextMenusEnabled(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) AreHostObjectsAllowed() const;
        WINRT_IMPL_AUTO(void) AreHostObjectsAllowed(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsZoomControlEnabled() const;
        WINRT_IMPL_AUTO(void) IsZoomControlEnabled(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsBuiltInErrorPageEnabled() const;
        WINRT_IMPL_AUTO(void) IsBuiltInErrorPageEnabled(bool value) const;
    };
    template <> struct consume<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2Settings>
    {
        template <typename D> using type = consume_Microsoft_Web_WebView2_Core_ICoreWebView2Settings<D>;
    };
    template <typename D>
    struct consume_Microsoft_Web_WebView2_Core_ICoreWebView2SourceChangedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsNewDocument() const;
    };
    template <> struct consume<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2SourceChangedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_Web_WebView2_Core_ICoreWebView2SourceChangedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebMessageReceivedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Source() const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) WebMessageAsJson() const;
        WINRT_IMPL_AUTO(hstring) TryGetWebMessageAsString() const;
    };
    template <> struct consume<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebMessageReceivedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebMessageReceivedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequest
    {
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Uri() const;
        WINRT_IMPL_AUTO(void) Uri(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Method() const;
        WINRT_IMPL_AUTO(void) Method(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Storage::Streams::IRandomAccessStream) Content() const;
        WINRT_IMPL_AUTO(void) Content(winrt::Windows::Storage::Streams::IRandomAccessStream const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Web::WebView2::Core::CoreWebView2HttpRequestHeaders) Headers() const;
    };
    template <> struct consume<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequest>
    {
        template <typename D> using type = consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequest<D>;
    };
    template <typename D>
    struct consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequestedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceRequest) Request() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceResponse) Response() const;
        WINRT_IMPL_AUTO(void) Response(winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceResponse const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceContext) ResourceContext() const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::Deferral) GetDeferral() const;
    };
    template <> struct consume<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceRequestedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceRequestedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceResponse
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Storage::Streams::IRandomAccessStream) Content() const;
        WINRT_IMPL_AUTO(void) Content(winrt::Windows::Storage::Streams::IRandomAccessStream const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Web::WebView2::Core::CoreWebView2HttpResponseHeaders) Headers() const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) StatusCode() const;
        WINRT_IMPL_AUTO(void) StatusCode(int32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) ReasonPhrase() const;
        WINRT_IMPL_AUTO(void) ReasonPhrase(param::hstring const& value) const;
    };
    template <> struct consume<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponse>
    {
        template <typename D> using type = consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceResponse<D>;
    };
    template <typename D>
    struct consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceResponseReceivedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceRequest) Request() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Web::WebView2::Core::CoreWebView2WebResourceResponseView) Response() const;
    };
    template <> struct consume<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseReceivedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceResponseReceivedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceResponseView
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::Web::WebView2::Core::CoreWebView2HttpResponseHeaders) Headers() const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) StatusCode() const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) ReasonPhrase() const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::IAsyncOperation<winrt::Windows::Storage::Streams::IRandomAccessStream>) GetContentAsync() const;
    };
    template <> struct consume<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WebResourceResponseView>
    {
        template <typename D> using type = consume_Microsoft_Web_WebView2_Core_ICoreWebView2WebResourceResponseView<D>;
    };
    template <typename D>
    struct consume_Microsoft_Web_WebView2_Core_ICoreWebView2WindowFeatures
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) HasPosition() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) HasSize() const;
        [[nodiscard]] WINRT_IMPL_AUTO(uint32_t) Left() const;
        [[nodiscard]] WINRT_IMPL_AUTO(uint32_t) Top() const;
        [[nodiscard]] WINRT_IMPL_AUTO(uint32_t) Height() const;
        [[nodiscard]] WINRT_IMPL_AUTO(uint32_t) Width() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) ShouldDisplayMenuBar() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) ShouldDisplayStatus() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) ShouldDisplayToolbar() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) ShouldDisplayScrollBars() const;
    };
    template <> struct consume<winrt::Microsoft::Web::WebView2::Core::ICoreWebView2WindowFeatures>
    {
        template <typename D> using type = consume_Microsoft_Web_WebView2_Core_ICoreWebView2WindowFeatures<D>;
    };
    struct struct_Microsoft_Web_WebView2_Core_CoreWebView2PhysicalKeyStatus
    {
        uint32_t RepeatCount;
        uint32_t ScanCode;
        int32_t IsExtendedKey;
        int32_t IsMenuKeyDown;
        int32_t WasKeyDown;
        int32_t IsKeyReleased;
    };
    template <> struct abi<Microsoft::Web::WebView2::Core::CoreWebView2PhysicalKeyStatus>
    {
        using type = struct_Microsoft_Web_WebView2_Core_CoreWebView2PhysicalKeyStatus;
    };
}
#endif
