// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210806.1

#pragma once
#ifndef WINRT_Microsoft_UI_Input_Experimental_2_H
#define WINRT_Microsoft_UI_Input_Experimental_2_H
#include "winrt/impl/Microsoft.UI.Composition.1.h"
#include "winrt/impl/Windows.Foundation.1.h"
#include "winrt/impl/Windows.UI.Core.1.h"
#include "winrt/impl/Windows.UI.Input.1.h"
#include "winrt/impl/Microsoft.UI.Input.Experimental.1.h"
WINRT_EXPORT namespace winrt::Microsoft::UI::Input::Experimental
{
    struct __declspec(empty_bases) ExpContextMenuKeyEventArgs : winrt::Microsoft::UI::Input::Experimental::IExpContextMenuKeyEventArgs
    {
        ExpContextMenuKeyEventArgs(std::nullptr_t) noexcept {}
        ExpContextMenuKeyEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Input::Experimental::IExpContextMenuKeyEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct __declspec(empty_bases) ExpCrossSlidingEventArgs : winrt::Microsoft::UI::Input::Experimental::IExpCrossSlidingEventArgs
    {
        ExpCrossSlidingEventArgs(std::nullptr_t) noexcept {}
        ExpCrossSlidingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Input::Experimental::IExpCrossSlidingEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct __declspec(empty_bases) ExpDirectManipulation : winrt::Microsoft::UI::Input::Experimental::IExpDirectManipulation,
        impl::base<ExpDirectManipulation, winrt::Microsoft::UI::Input::Experimental::ExpInputObject>,
        impl::require<ExpDirectManipulation, winrt::Microsoft::UI::Input::Experimental::IExpInputObject, winrt::Windows::Foundation::IClosable>
    {
        ExpDirectManipulation(std::nullptr_t) noexcept {}
        ExpDirectManipulation(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Input::Experimental::IExpDirectManipulation(ptr, take_ownership_from_abi) {}
        static auto GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite);
    };
    struct __declspec(empty_bases) ExpDraggingEventArgs : winrt::Microsoft::UI::Input::Experimental::IExpDraggingEventArgs
    {
        ExpDraggingEventArgs(std::nullptr_t) noexcept {}
        ExpDraggingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Input::Experimental::IExpDraggingEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct __declspec(empty_bases) ExpFocusChangedEventArgs : winrt::Microsoft::UI::Input::Experimental::IExpFocusChangedEventArgs
    {
        ExpFocusChangedEventArgs(std::nullptr_t) noexcept {}
        ExpFocusChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Input::Experimental::IExpFocusChangedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct __declspec(empty_bases) ExpFocusController : winrt::Microsoft::UI::Input::Experimental::IExpFocusController,
        impl::base<ExpFocusController, winrt::Microsoft::UI::Input::Experimental::ExpInputObject>,
        impl::require<ExpFocusController, winrt::Microsoft::UI::Input::Experimental::IExpInputObject, winrt::Windows::Foundation::IClosable>
    {
        ExpFocusController(std::nullptr_t) noexcept {}
        ExpFocusController(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Input::Experimental::IExpFocusController(ptr, take_ownership_from_abi) {}
        static auto GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite);
    };
    struct __declspec(empty_bases) ExpFocusNavigationHost : winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHost,
        impl::base<ExpFocusNavigationHost, winrt::Microsoft::UI::Input::Experimental::ExpInputObject>,
        impl::require<ExpFocusNavigationHost, winrt::Microsoft::UI::Input::Experimental::IExpInputObject, winrt::Windows::Foundation::IClosable>
    {
        ExpFocusNavigationHost(std::nullptr_t) noexcept {}
        ExpFocusNavigationHost(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHost(ptr, take_ownership_from_abi) {}
        static auto GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite);
    };
    struct __declspec(empty_bases) ExpFocusNavigationRequest : winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequest
    {
        ExpFocusNavigationRequest(std::nullptr_t) noexcept {}
        ExpFocusNavigationRequest(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequest(ptr, take_ownership_from_abi) {}
        static auto CreateFocusNavigationRequestReasonAndHintRect(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason const& reason, winrt::Windows::Foundation::Rect const& hintRect);
        static auto CreateFocusNavigationRequestReasonHintRectAndId(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason const& reason, winrt::Windows::Foundation::Rect const& hintRect, winrt::guid const& correlationId);
        static auto CreateFocusNavigationRequestWithReason(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason const& reason);
    };
    struct __declspec(empty_bases) ExpFocusNavigationResult : winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationResult
    {
        ExpFocusNavigationResult(std::nullptr_t) noexcept {}
        ExpFocusNavigationResult(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationResult(ptr, take_ownership_from_abi) {}
    };
    struct __declspec(empty_bases) ExpFocusObserver : winrt::Microsoft::UI::Input::Experimental::IExpFocusObserver,
        impl::base<ExpFocusObserver, winrt::Microsoft::UI::Input::Experimental::ExpInputObject>,
        impl::require<ExpFocusObserver, winrt::Microsoft::UI::Input::Experimental::IExpInputObject, winrt::Windows::Foundation::IClosable>
    {
        ExpFocusObserver(std::nullptr_t) noexcept {}
        ExpFocusObserver(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Input::Experimental::IExpFocusObserver(ptr, take_ownership_from_abi) {}
        static auto CreateForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite);
    };
    struct __declspec(empty_bases) ExpGestureRecognizer : winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer
    {
        ExpGestureRecognizer(std::nullptr_t) noexcept {}
        ExpGestureRecognizer(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer(ptr, take_ownership_from_abi) {}
        ExpGestureRecognizer();
    };
    struct __declspec(empty_bases) ExpHoldingEventArgs : winrt::Microsoft::UI::Input::Experimental::IExpHoldingEventArgs
    {
        ExpHoldingEventArgs(std::nullptr_t) noexcept {}
        ExpHoldingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Input::Experimental::IExpHoldingEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct __declspec(empty_bases) ExpIndependentPointerInputObserver : winrt::Microsoft::UI::Input::Experimental::IExpIndependentPointerInputObserver,
        impl::base<ExpIndependentPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpInputObject>,
        impl::require<ExpIndependentPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::IExpInputObject, winrt::Windows::Foundation::IClosable>
    {
        ExpIndependentPointerInputObserver(std::nullptr_t) noexcept {}
        ExpIndependentPointerInputObserver(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Input::Experimental::IExpIndependentPointerInputObserver(ptr, take_ownership_from_abi) {}
        static auto CreateForVisual(winrt::Microsoft::UI::Composition::Visual const& visual, winrt::Windows::UI::Core::CoreInputDeviceTypes const& deviceTypes);
    };
    struct __declspec(empty_bases) ExpInputActivationListener : winrt::Microsoft::UI::Input::Experimental::IExpInputActivationListener,
        impl::require<ExpInputActivationListener, winrt::Windows::Foundation::IClosable>
    {
        ExpInputActivationListener(std::nullptr_t) noexcept {}
        ExpInputActivationListener(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Input::Experimental::IExpInputActivationListener(ptr, take_ownership_from_abi) {}
    };
    struct __declspec(empty_bases) ExpInputActivationListenerActivationChangedEventArgs : winrt::Microsoft::UI::Input::Experimental::IExpInputActivationListenerActivationChangedEventArgs
    {
        ExpInputActivationListenerActivationChangedEventArgs(std::nullptr_t) noexcept {}
        ExpInputActivationListenerActivationChangedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Input::Experimental::IExpInputActivationListenerActivationChangedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct ExpInputActivationListenerPartner
    {
        ExpInputActivationListenerPartner() = delete;
        static auto GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite);
    };
    struct __declspec(empty_bases) ExpInputObject : winrt::Microsoft::UI::Input::Experimental::IExpInputObject,
        impl::require<ExpInputObject, winrt::Windows::Foundation::IClosable>
    {
        ExpInputObject(std::nullptr_t) noexcept {}
        ExpInputObject(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Input::Experimental::IExpInputObject(ptr, take_ownership_from_abi) {}
    };
    struct __declspec(empty_bases) ExpInputSite : winrt::Microsoft::UI::Input::Experimental::IExpInputSite,
        impl::require<ExpInputSite, winrt::Windows::Foundation::IClosable>
    {
        ExpInputSite(std::nullptr_t) noexcept {}
        ExpInputSite(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Input::Experimental::IExpInputSite(ptr, take_ownership_from_abi) {}
    };
    struct __declspec(empty_bases) ExpKeyboardInput : winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput,
        impl::base<ExpKeyboardInput, winrt::Microsoft::UI::Input::Experimental::ExpInputObject>,
        impl::require<ExpKeyboardInput, winrt::Microsoft::UI::Input::Experimental::IExpInputObject, winrt::Windows::Foundation::IClosable>
    {
        ExpKeyboardInput(std::nullptr_t) noexcept {}
        ExpKeyboardInput(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput(ptr, take_ownership_from_abi) {}
        static auto GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite);
    };
    struct __declspec(empty_bases) ExpManipulationCompletedEventArgs : winrt::Microsoft::UI::Input::Experimental::IExpManipulationCompletedEventArgs
    {
        ExpManipulationCompletedEventArgs(std::nullptr_t) noexcept {}
        ExpManipulationCompletedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Input::Experimental::IExpManipulationCompletedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct __declspec(empty_bases) ExpManipulationInertiaStartingEventArgs : winrt::Microsoft::UI::Input::Experimental::IExpManipulationInertiaStartingEventArgs
    {
        ExpManipulationInertiaStartingEventArgs(std::nullptr_t) noexcept {}
        ExpManipulationInertiaStartingEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Input::Experimental::IExpManipulationInertiaStartingEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct __declspec(empty_bases) ExpManipulationStartedEventArgs : winrt::Microsoft::UI::Input::Experimental::IExpManipulationStartedEventArgs
    {
        ExpManipulationStartedEventArgs(std::nullptr_t) noexcept {}
        ExpManipulationStartedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Input::Experimental::IExpManipulationStartedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct __declspec(empty_bases) ExpManipulationUpdatedEventArgs : winrt::Microsoft::UI::Input::Experimental::IExpManipulationUpdatedEventArgs
    {
        ExpManipulationUpdatedEventArgs(std::nullptr_t) noexcept {}
        ExpManipulationUpdatedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Input::Experimental::IExpManipulationUpdatedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct __declspec(empty_bases) ExpMouseCapture : winrt::Microsoft::UI::Input::Experimental::IExpMouseCapture,
        impl::base<ExpMouseCapture, winrt::Microsoft::UI::Input::Experimental::ExpInputObject>,
        impl::require<ExpMouseCapture, winrt::Microsoft::UI::Input::Experimental::IExpInputObject, winrt::Windows::Foundation::IClosable>
    {
        ExpMouseCapture(std::nullptr_t) noexcept {}
        ExpMouseCapture(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Input::Experimental::IExpMouseCapture(ptr, take_ownership_from_abi) {}
        static auto GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite);
    };
    struct __declspec(empty_bases) ExpMouseWheelParameters : winrt::Microsoft::UI::Input::Experimental::IExpMouseWheelParameters
    {
        ExpMouseWheelParameters(std::nullptr_t) noexcept {}
        ExpMouseWheelParameters(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Input::Experimental::IExpMouseWheelParameters(ptr, take_ownership_from_abi) {}
    };
    struct __declspec(empty_bases) ExpNavigateFocusRequestedEventArgs : winrt::Microsoft::UI::Input::Experimental::IExpNavigateFocusRequestedEventArgs
    {
        ExpNavigateFocusRequestedEventArgs(std::nullptr_t) noexcept {}
        ExpNavigateFocusRequestedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Input::Experimental::IExpNavigateFocusRequestedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct __declspec(empty_bases) ExpPointerCursorController : winrt::Microsoft::UI::Input::Experimental::IExpPointerCursorController,
        impl::base<ExpPointerCursorController, winrt::Microsoft::UI::Input::Experimental::ExpInputObject>,
        impl::require<ExpPointerCursorController, winrt::Microsoft::UI::Input::Experimental::IExpInputObject, winrt::Windows::Foundation::IClosable>
    {
        ExpPointerCursorController(std::nullptr_t) noexcept {}
        ExpPointerCursorController(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Input::Experimental::IExpPointerCursorController(ptr, take_ownership_from_abi) {}
        static auto GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite);
    };
    struct __declspec(empty_bases) ExpPointerEventArgs : winrt::Microsoft::UI::Input::Experimental::IExpPointerEventArgs
    {
        ExpPointerEventArgs(std::nullptr_t) noexcept {}
        ExpPointerEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Input::Experimental::IExpPointerEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct __declspec(empty_bases) ExpPointerInputObserver : winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver,
        impl::base<ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpInputObject>,
        impl::require<ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::IExpInputObject, winrt::Windows::Foundation::IClosable>
    {
        ExpPointerInputObserver(std::nullptr_t) noexcept {}
        ExpPointerInputObserver(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver(ptr, take_ownership_from_abi) {}
        static auto CreateForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite);
    };
    struct __declspec(empty_bases) ExpPointerPoint : winrt::Microsoft::UI::Input::Experimental::IExpPointerPoint
    {
        ExpPointerPoint(std::nullptr_t) noexcept {}
        ExpPointerPoint(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Input::Experimental::IExpPointerPoint(ptr, take_ownership_from_abi) {}
        static auto GetCurrentPoint(uint32_t pointerId);
        static auto GetCurrentPointTransformed(uint32_t pointerId, winrt::Windows::UI::Input::IPointerPointTransform const& transform);
        static auto GetIntermediatePoints(uint32_t pointerId);
        static auto GetIntermediatePointsTransformed(uint32_t pointerId, winrt::Windows::UI::Input::IPointerPointTransform const& transform);
    };
    struct __declspec(empty_bases) ExpPointerPointProperties : winrt::Microsoft::UI::Input::Experimental::IExpPointerPointProperties
    {
        ExpPointerPointProperties(std::nullptr_t) noexcept {}
        ExpPointerPointProperties(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Input::Experimental::IExpPointerPointProperties(ptr, take_ownership_from_abi) {}
    };
    struct __declspec(empty_bases) ExpRightTappedEventArgs : winrt::Microsoft::UI::Input::Experimental::IExpRightTappedEventArgs
    {
        ExpRightTappedEventArgs(std::nullptr_t) noexcept {}
        ExpRightTappedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Input::Experimental::IExpRightTappedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct __declspec(empty_bases) ExpTappedEventArgs : winrt::Microsoft::UI::Input::Experimental::IExpTappedEventArgs
    {
        ExpTappedEventArgs(std::nullptr_t) noexcept {}
        ExpTappedEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Input::Experimental::IExpTappedEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct __declspec(empty_bases) ExpTouchHitTestingProvider : winrt::Microsoft::UI::Input::Experimental::IExpTouchHitTestingProvider,
        impl::base<ExpTouchHitTestingProvider, winrt::Microsoft::UI::Input::Experimental::ExpInputObject>,
        impl::require<ExpTouchHitTestingProvider, winrt::Microsoft::UI::Input::Experimental::IExpInputObject, winrt::Windows::Foundation::IClosable>
    {
        ExpTouchHitTestingProvider(std::nullptr_t) noexcept {}
        ExpTouchHitTestingProvider(void* ptr, take_ownership_from_abi_t) noexcept : winrt::Microsoft::UI::Input::Experimental::IExpTouchHitTestingProvider(ptr, take_ownership_from_abi) {}
        static auto GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite);
    };
}
#endif
