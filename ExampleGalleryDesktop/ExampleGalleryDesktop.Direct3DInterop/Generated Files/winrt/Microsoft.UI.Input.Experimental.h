// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210806.1

#pragma once
#ifndef WINRT_Microsoft_UI_Input_Experimental_H
#define WINRT_Microsoft_UI_Input_Experimental_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.210806.1"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.210806.1"
#include "winrt/Microsoft.UI.Input.h"
#include "winrt/impl/Microsoft.UI.Composition.2.h"
#include "winrt/impl/Microsoft.UI.Dispatching.2.h"
#include "winrt/impl/Windows.Devices.Input.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.Foundation.Collections.2.h"
#include "winrt/impl/Windows.System.2.h"
#include "winrt/impl/Windows.UI.Core.2.h"
#include "winrt/impl/Windows.UI.Input.2.h"
#include "winrt/impl/Microsoft.UI.Input.Experimental.2.h"
namespace winrt::impl
{
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Input_Experimental_IExpContextMenuKeyEventArgs<D>::Handled() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpContextMenuKeyEventArgs)->get_Handled(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpContextMenuKeyEventArgs<D>::Handled(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpContextMenuKeyEventArgs)->put_Handled(value));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Input::CrossSlidingState) consume_Microsoft_UI_Input_Experimental_IExpCrossSlidingEventArgs<D>::CrossSlidingState() const
    {
        winrt::Windows::UI::Input::CrossSlidingState value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpCrossSlidingEventArgs)->get_CrossSlidingState(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Devices::Input::PointerDeviceType) consume_Microsoft_UI_Input_Experimental_IExpCrossSlidingEventArgs<D>::PointerDeviceType() const
    {
        winrt::Windows::Devices::Input::PointerDeviceType value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpCrossSlidingEventArgs)->get_PointerDeviceType(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) consume_Microsoft_UI_Input_Experimental_IExpCrossSlidingEventArgs<D>::Position() const
    {
        winrt::Windows::Foundation::Point value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpCrossSlidingEventArgs)->get_Position(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Input_Experimental_IExpDirectManipulation<D>::DirectManipulationHitTest(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpDirectManipulation, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpDirectManipulation)->add_DirectManipulationHitTest(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Input_Experimental_IExpDirectManipulation<D>::DirectManipulationHitTest_revoker consume_Microsoft_UI_Input_Experimental_IExpDirectManipulation<D>::DirectManipulationHitTest(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpDirectManipulation, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, DirectManipulationHitTest_revoker>(this, DirectManipulationHitTest(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpDirectManipulation<D>::DirectManipulationHitTest(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpDirectManipulation)->remove_DirectManipulationHitTest(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpDirectManipulation) consume_Microsoft_UI_Input_Experimental_IExpDirectManipulationStatics<D>::GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpDirectManipulationStatics)->GetForInputSite(*(void**)(&inputSite), &result));
        return winrt::Microsoft::UI::Input::Experimental::ExpDirectManipulation{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Input::DraggingState) consume_Microsoft_UI_Input_Experimental_IExpDraggingEventArgs<D>::DraggingState() const
    {
        winrt::Windows::UI::Input::DraggingState value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpDraggingEventArgs)->get_DraggingState(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Devices::Input::PointerDeviceType) consume_Microsoft_UI_Input_Experimental_IExpDraggingEventArgs<D>::PointerDeviceType() const
    {
        winrt::Windows::Devices::Input::PointerDeviceType value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpDraggingEventArgs)->get_PointerDeviceType(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) consume_Microsoft_UI_Input_Experimental_IExpDraggingEventArgs<D>::Position() const
    {
        winrt::Windows::Foundation::Point value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpDraggingEventArgs)->get_Position(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusChangedDirection) consume_Microsoft_UI_Input_Experimental_IExpFocusChangedEventArgs<D>::Direction() const
    {
        winrt::Microsoft::UI::Input::Experimental::ExpFocusChangedDirection value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusChangedEventArgs)->get_Direction(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Input_Experimental_IExpFocusController<D>::HasFocus() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusController)->get_HasFocus(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Input_Experimental_IExpFocusController<D>::TrySetFocus() const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusController)->TrySetFocus(&result));
        return result;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationResult) consume_Microsoft_UI_Input_Experimental_IExpFocusController<D>::DepartFocus(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest const& request) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusController)->DepartFocus(*(void**)(&request), &result));
        return winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationResult{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Input_Experimental_IExpFocusController<D>::NavigateFocusRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpFocusController, winrt::Microsoft::UI::Input::Experimental::ExpNavigateFocusRequestedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusController)->add_NavigateFocusRequested(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Input_Experimental_IExpFocusController<D>::NavigateFocusRequested_revoker consume_Microsoft_UI_Input_Experimental_IExpFocusController<D>::NavigateFocusRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpFocusController, winrt::Microsoft::UI::Input::Experimental::ExpNavigateFocusRequestedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, NavigateFocusRequested_revoker>(this, NavigateFocusRequested(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpFocusController<D>::NavigateFocusRequested(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusController)->remove_NavigateFocusRequested(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusController) consume_Microsoft_UI_Input_Experimental_IExpFocusControllerStatics<D>::GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusControllerStatics)->GetForInputSite(*(void**)(&inputSite), &result));
        return winrt::Microsoft::UI::Input::Experimental::ExpFocusController{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationResult) consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationHost<D>::NavigateFocus(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest const& request) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHost)->NavigateFocus(*(void**)(&request), &result));
        return winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationResult{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationHost<D>::TakeFocusRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationHost, winrt::Microsoft::UI::Input::Experimental::ExpNavigateFocusRequestedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHost)->add_TakeFocusRequested(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationHost<D>::TakeFocusRequested_revoker consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationHost<D>::TakeFocusRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationHost, winrt::Microsoft::UI::Input::Experimental::ExpNavigateFocusRequestedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, TakeFocusRequested_revoker>(this, TakeFocusRequested(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationHost<D>::TakeFocusRequested(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHost)->remove_TakeFocusRequested(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationHost) consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationHostStatics<D>::GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHostStatics)->GetForInputSite(*(void**)(&inputSite), &result));
        return winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationHost{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::guid) consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationRequest<D>::CorrelationId() const
    {
        winrt::guid value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequest)->get_CorrelationId(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Rect) consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationRequest<D>::HintRect() const
    {
        winrt::Windows::Foundation::Rect value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequest)->get_HintRect(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason) consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationRequest<D>::Reason() const
    {
        winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequest)->get_Reason(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest) consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationRequestStatics<D>::CreateFocusNavigationRequestReasonAndHintRect(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason const& reason, winrt::Windows::Foundation::Rect const& hintRect) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequestStatics)->CreateFocusNavigationRequestReasonAndHintRect(static_cast<int32_t>(reason), impl::bind_in(hintRect), &result));
        return winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest) consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationRequestStatics<D>::CreateFocusNavigationRequestReasonHintRectAndId(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason const& reason, winrt::Windows::Foundation::Rect const& hintRect, winrt::guid const& correlationId) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequestStatics)->CreateFocusNavigationRequestReasonHintRectAndId(static_cast<int32_t>(reason), impl::bind_in(hintRect), impl::bind_in(correlationId), &result));
        return winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest) consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationRequestStatics<D>::CreateFocusNavigationRequestWithReason(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason const& reason) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequestStatics)->CreateFocusNavigationRequestWithReason(static_cast<int32_t>(reason), &result));
        return winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationResult<D>::WasMoved() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationResult)->get_WasMoved(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpFocusNavigationResult<D>::WasMoved(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationResult)->put_WasMoved(value));
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Input_Experimental_IExpFocusObserver<D>::HasFocus() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusObserver)->get_HasFocus(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Input_Experimental_IExpFocusObserver<D>::GotFocus(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpFocusObserver, winrt::Microsoft::UI::Input::Experimental::ExpFocusChangedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusObserver)->add_GotFocus(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Input_Experimental_IExpFocusObserver<D>::GotFocus_revoker consume_Microsoft_UI_Input_Experimental_IExpFocusObserver<D>::GotFocus(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpFocusObserver, winrt::Microsoft::UI::Input::Experimental::ExpFocusChangedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, GotFocus_revoker>(this, GotFocus(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpFocusObserver<D>::GotFocus(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusObserver)->remove_GotFocus(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Input_Experimental_IExpFocusObserver<D>::LostFocus(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpFocusObserver, winrt::Microsoft::UI::Input::Experimental::ExpFocusChangedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusObserver)->add_LostFocus(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Input_Experimental_IExpFocusObserver<D>::LostFocus_revoker consume_Microsoft_UI_Input_Experimental_IExpFocusObserver<D>::LostFocus(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpFocusObserver, winrt::Microsoft::UI::Input::Experimental::ExpFocusChangedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, LostFocus_revoker>(this, LostFocus(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpFocusObserver<D>::LostFocus(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusObserver)->remove_LostFocus(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusObserver) consume_Microsoft_UI_Input_Experimental_IExpFocusObserverStatics<D>::CreateForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpFocusObserverStatics)->CreateForInputSite(*(void**)(&inputSite), &result));
        return winrt::Microsoft::UI::Input::Experimental::ExpFocusObserver{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::AutoProcessInertia() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->get_AutoProcessInertia(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::AutoProcessInertia(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->put_AutoProcessInertia(value));
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::CrossSlideExact() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->get_CrossSlideExact(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::CrossSlideExact(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->put_CrossSlideExact(value));
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::CrossSlideHorizontally() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->get_CrossSlideHorizontally(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::CrossSlideHorizontally(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->put_CrossSlideHorizontally(value));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Input::CrossSlideThresholds) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::CrossSlideThresholds() const
    {
        winrt::Windows::UI::Input::CrossSlideThresholds value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->get_CrossSlideThresholds(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::CrossSlideThresholds(winrt::Windows::UI::Input::CrossSlideThresholds const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->put_CrossSlideThresholds(impl::bind_in(value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Input::GestureSettings) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::GestureSettings() const
    {
        winrt::Windows::UI::Input::GestureSettings value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->get_GestureSettings(reinterpret_cast<uint32_t*>(&value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::GestureSettings(winrt::Windows::UI::Input::GestureSettings const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->put_GestureSettings(static_cast<uint32_t>(value)));
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::IsActive() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->get_IsActive(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::IsInertial() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->get_IsInertial(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::PivotCenter() const
    {
        winrt::Windows::Foundation::Point value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->get_PivotCenter(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::PivotCenter(winrt::Windows::Foundation::Point const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->put_PivotCenter(impl::bind_in(value)));
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::PivotRadius() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->get_PivotRadius(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::PivotRadius(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->put_PivotRadius(value));
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::InertiaExpansionDeceleration() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->get_InertiaExpansionDeceleration(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::InertiaExpansionDeceleration(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->put_InertiaExpansionDeceleration(value));
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::InertiaExpansion() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->get_InertiaExpansion(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::InertiaExpansion(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->put_InertiaExpansion(value));
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::InertiaRotationAngle() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->get_InertiaRotationAngle(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::InertiaRotationAngle(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->put_InertiaRotationAngle(value));
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::InertiaRotationDeceleration() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->get_InertiaRotationDeceleration(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::InertiaRotationDeceleration(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->put_InertiaRotationDeceleration(value));
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::InertiaTranslationDeceleration() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->get_InertiaTranslationDeceleration(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::InertiaTranslationDeceleration(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->put_InertiaTranslationDeceleration(value));
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::InertiaTranslationDisplacement() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->get_InertiaTranslationDisplacement(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::InertiaTranslationDisplacement(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->put_InertiaTranslationDisplacement(value));
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::ManipulationExact() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->get_ManipulationExact(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::ManipulationExact(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->put_ManipulationExact(value));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpMouseWheelParameters) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::MouseWheelParameters() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->get_MouseWheelParameters(&value));
        return winrt::Microsoft::UI::Input::Experimental::ExpMouseWheelParameters{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::ShowGestureFeedback() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->get_ShowGestureFeedback(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::ShowGestureFeedback(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->put_ShowGestureFeedback(value));
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::CanBeDoubleTap(winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint const& value) const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->CanBeDoubleTap(*(void**)(&value), &result));
        return result;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::CompleteGesture() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->CompleteGesture());
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::ProcessDownEvent(winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->ProcessDownEvent(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::ProcessMoveEvents(param::vector<winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint> const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->ProcessMoveEvents(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::ProcessMouseWheelEvent(winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint const& value, bool isShiftKeyDown, bool isControlKeyDown) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->ProcessMouseWheelEvent(*(void**)(&value), isShiftKeyDown, isControlKeyDown));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::ProcessInertia() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->ProcessInertia());
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::ProcessUpEvent(winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->ProcessUpEvent(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::Tapped(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpTappedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->add_Tapped(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::Tapped_revoker consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::Tapped(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpTappedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, Tapped_revoker>(this, Tapped(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::Tapped(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->remove_Tapped(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::RightTapped(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpRightTappedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->add_RightTapped(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::RightTapped_revoker consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::RightTapped(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpRightTappedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, RightTapped_revoker>(this, RightTapped(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::RightTapped(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->remove_RightTapped(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::Holding(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpHoldingEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->add_Holding(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::Holding_revoker consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::Holding(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpHoldingEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, Holding_revoker>(this, Holding(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::Holding(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->remove_Holding(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::Dragging(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpDraggingEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->add_Dragging(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::Dragging_revoker consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::Dragging(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpDraggingEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, Dragging_revoker>(this, Dragging(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::Dragging(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->remove_Dragging(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::ManipulationStarted(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpManipulationStartedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->add_ManipulationStarted(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::ManipulationStarted_revoker consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::ManipulationStarted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpManipulationStartedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, ManipulationStarted_revoker>(this, ManipulationStarted(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::ManipulationStarted(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->remove_ManipulationStarted(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::ManipulationUpdated(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpManipulationUpdatedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->add_ManipulationUpdated(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::ManipulationUpdated_revoker consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::ManipulationUpdated(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpManipulationUpdatedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, ManipulationUpdated_revoker>(this, ManipulationUpdated(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::ManipulationUpdated(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->remove_ManipulationUpdated(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::ManipulationInertiaStarting(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpManipulationInertiaStartingEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->add_ManipulationInertiaStarting(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::ManipulationInertiaStarting_revoker consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::ManipulationInertiaStarting(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpManipulationInertiaStartingEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, ManipulationInertiaStarting_revoker>(this, ManipulationInertiaStarting(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::ManipulationInertiaStarting(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->remove_ManipulationInertiaStarting(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::ManipulationCompleted(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpManipulationCompletedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->add_ManipulationCompleted(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::ManipulationCompleted_revoker consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::ManipulationCompleted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpManipulationCompletedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, ManipulationCompleted_revoker>(this, ManipulationCompleted(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::ManipulationCompleted(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->remove_ManipulationCompleted(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::CrossSliding(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpCrossSlidingEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->add_CrossSliding(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::CrossSliding_revoker consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::CrossSliding(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpCrossSlidingEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, CrossSliding_revoker>(this, CrossSliding(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpGestureRecognizer<D>::CrossSliding(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer)->remove_CrossSliding(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Input::HoldingState) consume_Microsoft_UI_Input_Experimental_IExpHoldingEventArgs<D>::HoldingState() const
    {
        winrt::Windows::UI::Input::HoldingState value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpHoldingEventArgs)->get_HoldingState(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Devices::Input::PointerDeviceType) consume_Microsoft_UI_Input_Experimental_IExpHoldingEventArgs<D>::PointerDeviceType() const
    {
        winrt::Windows::Devices::Input::PointerDeviceType value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpHoldingEventArgs)->get_PointerDeviceType(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) consume_Microsoft_UI_Input_Experimental_IExpHoldingEventArgs<D>::Position() const
    {
        winrt::Windows::Foundation::Point value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpHoldingEventArgs)->get_Position(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpIndependentPointerInputObserver) consume_Microsoft_UI_Input_Experimental_IExpIndependentPointerInputObserverStatics<D>::CreateForVisual(winrt::Microsoft::UI::Composition::Visual const& visual, winrt::Windows::UI::Core::CoreInputDeviceTypes const& deviceTypes) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpIndependentPointerInputObserverStatics)->CreateForVisual(*(void**)(&visual), static_cast<uint32_t>(deviceTypes), &result));
        return winrt::Microsoft::UI::Input::Experimental::ExpIndependentPointerInputObserver{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpInputActivationState) consume_Microsoft_UI_Input_Experimental_IExpInputActivationListener<D>::State() const
    {
        winrt::Microsoft::UI::Input::Experimental::ExpInputActivationState value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpInputActivationListener)->get_State(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Input_Experimental_IExpInputActivationListener<D>::InputActivationChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpInputActivationListener, winrt::Microsoft::UI::Input::Experimental::ExpInputActivationListenerActivationChangedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpInputActivationListener)->add_InputActivationChanged(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Input_Experimental_IExpInputActivationListener<D>::InputActivationChanged_revoker consume_Microsoft_UI_Input_Experimental_IExpInputActivationListener<D>::InputActivationChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpInputActivationListener, winrt::Microsoft::UI::Input::Experimental::ExpInputActivationListenerActivationChangedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, InputActivationChanged_revoker>(this, InputActivationChanged(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpInputActivationListener<D>::InputActivationChanged(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpInputActivationListener)->remove_InputActivationChanged(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpInputActivationState) consume_Microsoft_UI_Input_Experimental_IExpInputActivationListenerActivationChangedEventArgs<D>::State() const
    {
        winrt::Microsoft::UI::Input::Experimental::ExpInputActivationState value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpInputActivationListenerActivationChangedEventArgs)->get_State(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::IInspectable) consume_Microsoft_UI_Input_Experimental_IExpInputActivationListenerPartnerStatics<D>::GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpInputActivationListenerPartnerStatics)->GetForInputSite(*(void**)(&inputSite), &result));
        return winrt::Windows::Foundation::IInspectable{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Dispatching::DispatcherQueue) consume_Microsoft_UI_Input_Experimental_IExpInputObject<D>::DispatcherQueue() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpInputObject)->get_DispatcherQueue(&value));
        return winrt::Microsoft::UI::Dispatching::DispatcherQueue{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpInputSite) consume_Microsoft_UI_Input_Experimental_IExpInputObject<D>::InputSite() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpInputObject)->get_InputSite(&value));
        return winrt::Microsoft::UI::Input::Experimental::ExpInputSite{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_Microsoft_UI_Input_Experimental_IExpKeyboardInput<D>::CurrentKeyEventDeviceId() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput)->get_CurrentKeyEventDeviceId(&value));
        return hstring{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Core::CoreVirtualKeyStates) consume_Microsoft_UI_Input_Experimental_IExpKeyboardInput<D>::GetCurrentKeyState(winrt::Windows::System::VirtualKey const& virtualKey) const
    {
        winrt::Windows::UI::Core::CoreVirtualKeyStates result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput)->GetCurrentKeyState(static_cast<int32_t>(virtualKey), reinterpret_cast<uint32_t*>(&result)));
        return result;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Core::CoreVirtualKeyStates) consume_Microsoft_UI_Input_Experimental_IExpKeyboardInput<D>::GetKeyState(winrt::Windows::System::VirtualKey const& virtualKey) const
    {
        winrt::Windows::UI::Core::CoreVirtualKeyStates result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput)->GetKeyState(static_cast<int32_t>(virtualKey), reinterpret_cast<uint32_t*>(&result)));
        return result;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Input_Experimental_IExpKeyboardInput<D>::AcceleratorKeyActivated(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput, winrt::Windows::UI::Core::AcceleratorKeyEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput)->add_AcceleratorKeyActivated(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Input_Experimental_IExpKeyboardInput<D>::AcceleratorKeyActivated_revoker consume_Microsoft_UI_Input_Experimental_IExpKeyboardInput<D>::AcceleratorKeyActivated(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput, winrt::Windows::UI::Core::AcceleratorKeyEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, AcceleratorKeyActivated_revoker>(this, AcceleratorKeyActivated(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpKeyboardInput<D>::AcceleratorKeyActivated(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput)->remove_AcceleratorKeyActivated(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Input_Experimental_IExpKeyboardInput<D>::CharacterReceived(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput, winrt::Windows::UI::Core::CharacterReceivedEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput)->add_CharacterReceived(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Input_Experimental_IExpKeyboardInput<D>::CharacterReceived_revoker consume_Microsoft_UI_Input_Experimental_IExpKeyboardInput<D>::CharacterReceived(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput, winrt::Windows::UI::Core::CharacterReceivedEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, CharacterReceived_revoker>(this, CharacterReceived(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpKeyboardInput<D>::CharacterReceived(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput)->remove_CharacterReceived(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Input_Experimental_IExpKeyboardInput<D>::KeyDown(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput, winrt::Windows::UI::Core::KeyEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput)->add_KeyDown(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Input_Experimental_IExpKeyboardInput<D>::KeyDown_revoker consume_Microsoft_UI_Input_Experimental_IExpKeyboardInput<D>::KeyDown(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput, winrt::Windows::UI::Core::KeyEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, KeyDown_revoker>(this, KeyDown(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpKeyboardInput<D>::KeyDown(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput)->remove_KeyDown(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Input_Experimental_IExpKeyboardInput<D>::KeyUp(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput, winrt::Windows::UI::Core::KeyEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput)->add_KeyUp(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Input_Experimental_IExpKeyboardInput<D>::KeyUp_revoker consume_Microsoft_UI_Input_Experimental_IExpKeyboardInput<D>::KeyUp(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput, winrt::Windows::UI::Core::KeyEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, KeyUp_revoker>(this, KeyUp(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpKeyboardInput<D>::KeyUp(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput)->remove_KeyUp(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Input_Experimental_IExpKeyboardInput<D>::SysKeyDown(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput, winrt::Windows::UI::Core::KeyEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput)->add_SysKeyDown(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Input_Experimental_IExpKeyboardInput<D>::SysKeyDown_revoker consume_Microsoft_UI_Input_Experimental_IExpKeyboardInput<D>::SysKeyDown(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput, winrt::Windows::UI::Core::KeyEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, SysKeyDown_revoker>(this, SysKeyDown(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpKeyboardInput<D>::SysKeyDown(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput)->remove_SysKeyDown(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Input_Experimental_IExpKeyboardInput<D>::SysKeyUp(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput, winrt::Windows::UI::Core::KeyEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput)->add_SysKeyUp(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Input_Experimental_IExpKeyboardInput<D>::SysKeyUp_revoker consume_Microsoft_UI_Input_Experimental_IExpKeyboardInput<D>::SysKeyUp(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput, winrt::Windows::UI::Core::KeyEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, SysKeyUp_revoker>(this, SysKeyUp(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpKeyboardInput<D>::SysKeyUp(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput)->remove_SysKeyUp(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Input_Experimental_IExpKeyboardInput<D>::ContextMenuKey(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput, winrt::Microsoft::UI::Input::Experimental::ExpContextMenuKeyEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput)->add_ContextMenuKey(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Input_Experimental_IExpKeyboardInput<D>::ContextMenuKey_revoker consume_Microsoft_UI_Input_Experimental_IExpKeyboardInput<D>::ContextMenuKey(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput, winrt::Microsoft::UI::Input::Experimental::ExpContextMenuKeyEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, ContextMenuKey_revoker>(this, ContextMenuKey(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpKeyboardInput<D>::ContextMenuKey(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput)->remove_ContextMenuKey(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput) consume_Microsoft_UI_Input_Experimental_IExpKeyboardInputStatics<D>::GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInputStatics)->GetForInputSite(*(void**)(&inputSite), &result));
        return winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Input::ManipulationDelta) consume_Microsoft_UI_Input_Experimental_IExpManipulationCompletedEventArgs<D>::Cumulative() const
    {
        winrt::Windows::UI::Input::ManipulationDelta value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpManipulationCompletedEventArgs)->get_Cumulative(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Devices::Input::PointerDeviceType) consume_Microsoft_UI_Input_Experimental_IExpManipulationCompletedEventArgs<D>::PointerDeviceType() const
    {
        winrt::Windows::Devices::Input::PointerDeviceType value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpManipulationCompletedEventArgs)->get_PointerDeviceType(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) consume_Microsoft_UI_Input_Experimental_IExpManipulationCompletedEventArgs<D>::Position() const
    {
        winrt::Windows::Foundation::Point value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpManipulationCompletedEventArgs)->get_Position(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Input::ManipulationVelocities) consume_Microsoft_UI_Input_Experimental_IExpManipulationCompletedEventArgs<D>::Velocities() const
    {
        winrt::Windows::UI::Input::ManipulationVelocities value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpManipulationCompletedEventArgs)->get_Velocities(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Input::ManipulationDelta) consume_Microsoft_UI_Input_Experimental_IExpManipulationInertiaStartingEventArgs<D>::Cumulative() const
    {
        winrt::Windows::UI::Input::ManipulationDelta value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpManipulationInertiaStartingEventArgs)->get_Cumulative(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Input::ManipulationDelta) consume_Microsoft_UI_Input_Experimental_IExpManipulationInertiaStartingEventArgs<D>::Delta() const
    {
        winrt::Windows::UI::Input::ManipulationDelta value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpManipulationInertiaStartingEventArgs)->get_Delta(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Devices::Input::PointerDeviceType) consume_Microsoft_UI_Input_Experimental_IExpManipulationInertiaStartingEventArgs<D>::PointerDeviceType() const
    {
        winrt::Windows::Devices::Input::PointerDeviceType value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpManipulationInertiaStartingEventArgs)->get_PointerDeviceType(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) consume_Microsoft_UI_Input_Experimental_IExpManipulationInertiaStartingEventArgs<D>::Position() const
    {
        winrt::Windows::Foundation::Point value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpManipulationInertiaStartingEventArgs)->get_Position(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Input::ManipulationVelocities) consume_Microsoft_UI_Input_Experimental_IExpManipulationInertiaStartingEventArgs<D>::Velocities() const
    {
        winrt::Windows::UI::Input::ManipulationVelocities value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpManipulationInertiaStartingEventArgs)->get_Velocities(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Input::ManipulationDelta) consume_Microsoft_UI_Input_Experimental_IExpManipulationStartedEventArgs<D>::Cumulative() const
    {
        winrt::Windows::UI::Input::ManipulationDelta value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpManipulationStartedEventArgs)->get_Cumulative(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Devices::Input::PointerDeviceType) consume_Microsoft_UI_Input_Experimental_IExpManipulationStartedEventArgs<D>::PointerDeviceType() const
    {
        winrt::Windows::Devices::Input::PointerDeviceType value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpManipulationStartedEventArgs)->get_PointerDeviceType(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) consume_Microsoft_UI_Input_Experimental_IExpManipulationStartedEventArgs<D>::Position() const
    {
        winrt::Windows::Foundation::Point value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpManipulationStartedEventArgs)->get_Position(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Input::ManipulationDelta) consume_Microsoft_UI_Input_Experimental_IExpManipulationUpdatedEventArgs<D>::Cumulative() const
    {
        winrt::Windows::UI::Input::ManipulationDelta value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpManipulationUpdatedEventArgs)->get_Cumulative(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Input::ManipulationDelta) consume_Microsoft_UI_Input_Experimental_IExpManipulationUpdatedEventArgs<D>::Delta() const
    {
        winrt::Windows::UI::Input::ManipulationDelta value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpManipulationUpdatedEventArgs)->get_Delta(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Devices::Input::PointerDeviceType) consume_Microsoft_UI_Input_Experimental_IExpManipulationUpdatedEventArgs<D>::PointerDeviceType() const
    {
        winrt::Windows::Devices::Input::PointerDeviceType value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpManipulationUpdatedEventArgs)->get_PointerDeviceType(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) consume_Microsoft_UI_Input_Experimental_IExpManipulationUpdatedEventArgs<D>::Position() const
    {
        winrt::Windows::Foundation::Point value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpManipulationUpdatedEventArgs)->get_Position(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Input::ManipulationVelocities) consume_Microsoft_UI_Input_Experimental_IExpManipulationUpdatedEventArgs<D>::Velocities() const
    {
        winrt::Windows::UI::Input::ManipulationVelocities value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpManipulationUpdatedEventArgs)->get_Velocities(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Input_Experimental_IExpMouseCapture<D>::HasCapture() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpMouseCapture)->get_HasCapture(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Input_Experimental_IExpMouseCapture<D>::TryReleaseCapture() const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpMouseCapture)->TryReleaseCapture(&result));
        return result;
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Input_Experimental_IExpMouseCapture<D>::TrySetCapture() const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpMouseCapture)->TrySetCapture(&result));
        return result;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpMouseCapture) consume_Microsoft_UI_Input_Experimental_IExpMouseCaptureStatics<D>::GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpMouseCaptureStatics)->GetForInputSite(*(void**)(&inputSite), &result));
        return winrt::Microsoft::UI::Input::Experimental::ExpMouseCapture{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) consume_Microsoft_UI_Input_Experimental_IExpMouseWheelParameters<D>::CharTranslation() const
    {
        winrt::Windows::Foundation::Point value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpMouseWheelParameters)->get_CharTranslation(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpMouseWheelParameters<D>::CharTranslation(winrt::Windows::Foundation::Point const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpMouseWheelParameters)->put_CharTranslation(impl::bind_in(value)));
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Microsoft_UI_Input_Experimental_IExpMouseWheelParameters<D>::DeltaScale() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpMouseWheelParameters)->get_DeltaScale(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpMouseWheelParameters<D>::DeltaScale(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpMouseWheelParameters)->put_DeltaScale(value));
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Microsoft_UI_Input_Experimental_IExpMouseWheelParameters<D>::DeltaRotationAngle() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpMouseWheelParameters)->get_DeltaRotationAngle(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpMouseWheelParameters<D>::DeltaRotationAngle(float value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpMouseWheelParameters)->put_DeltaRotationAngle(value));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) consume_Microsoft_UI_Input_Experimental_IExpMouseWheelParameters<D>::PageTranslation() const
    {
        winrt::Windows::Foundation::Point value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpMouseWheelParameters)->get_PageTranslation(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpMouseWheelParameters<D>::PageTranslation(winrt::Windows::Foundation::Point const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpMouseWheelParameters)->put_PageTranslation(impl::bind_in(value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest) consume_Microsoft_UI_Input_Experimental_IExpNavigateFocusRequestedEventArgs<D>::Request() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpNavigateFocusRequestedEventArgs)->get_Request(&value));
        return winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Input_Experimental_IExpNavigateFocusRequestedEventArgs<D>::WasMoved() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpNavigateFocusRequestedEventArgs)->get_WasMoved(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpNavigateFocusRequestedEventArgs<D>::WasMoved(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpNavigateFocusRequestedEventArgs)->put_WasMoved(value));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Core::CoreCursor) consume_Microsoft_UI_Input_Experimental_IExpPointerCursorController<D>::Cursor() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerCursorController)->get_Cursor(&value));
        return winrt::Windows::UI::Core::CoreCursor{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpPointerCursorController<D>::Cursor(winrt::Windows::UI::Core::CoreCursor const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerCursorController)->put_Cursor(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) consume_Microsoft_UI_Input_Experimental_IExpPointerCursorController<D>::Position() const
    {
        winrt::Windows::Foundation::Point value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerCursorController)->get_Position(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpPointerCursorController) consume_Microsoft_UI_Input_Experimental_IExpPointerCursorControllerStatics<D>::GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerCursorControllerStatics)->GetForInputSite(*(void**)(&inputSite), &result));
        return winrt::Microsoft::UI::Input::Experimental::ExpPointerCursorController{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint) consume_Microsoft_UI_Input_Experimental_IExpPointerEventArgs<D>::CurrentPoint() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerEventArgs)->get_CurrentPoint(&value));
        return winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Input_Experimental_IExpPointerEventArgs<D>::Handled() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerEventArgs)->get_Handled(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpPointerEventArgs<D>::Handled(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerEventArgs)->put_Handled(value));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::System::VirtualKeyModifiers) consume_Microsoft_UI_Input_Experimental_IExpPointerEventArgs<D>::KeyModifiers() const
    {
        winrt::Windows::System::VirtualKeyModifiers value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerEventArgs)->get_KeyModifiers(reinterpret_cast<uint32_t*>(&value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint>) consume_Microsoft_UI_Input_Experimental_IExpPointerEventArgs<D>::GetIntermediatePoints() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerEventArgs)->GetIntermediatePoints(&result));
        return winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint>{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerCaptureLost(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver)->add_PointerCaptureLost(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerCaptureLost_revoker consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerCaptureLost(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, PointerCaptureLost_revoker>(this, PointerCaptureLost(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerCaptureLost(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver)->remove_PointerCaptureLost(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerEntered(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver)->add_PointerEntered(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerEntered_revoker consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerEntered(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, PointerEntered_revoker>(this, PointerEntered(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerEntered(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver)->remove_PointerEntered(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerExited(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver)->add_PointerExited(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerExited_revoker consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerExited(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, PointerExited_revoker>(this, PointerExited(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerExited(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver)->remove_PointerExited(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerMoved(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver)->add_PointerMoved(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerMoved_revoker consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerMoved(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, PointerMoved_revoker>(this, PointerMoved(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerMoved(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver)->remove_PointerMoved(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerPressed(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver)->add_PointerPressed(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerPressed_revoker consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerPressed(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, PointerPressed_revoker>(this, PointerPressed(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerPressed(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver)->remove_PointerPressed(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerReleased(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver)->add_PointerReleased(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerReleased_revoker consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerReleased(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, PointerReleased_revoker>(this, PointerReleased(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerReleased(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver)->remove_PointerReleased(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerRoutedAway(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver)->add_PointerRoutedAway(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerRoutedAway_revoker consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerRoutedAway(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, PointerRoutedAway_revoker>(this, PointerRoutedAway(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerRoutedAway(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver)->remove_PointerRoutedAway(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerRoutedReleased(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver)->add_PointerRoutedReleased(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerRoutedReleased_revoker consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerRoutedReleased(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, PointerRoutedReleased_revoker>(this, PointerRoutedReleased(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerRoutedReleased(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver)->remove_PointerRoutedReleased(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerRoutedTo(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver)->add_PointerRoutedTo(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerRoutedTo_revoker consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerRoutedTo(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, PointerRoutedTo_revoker>(this, PointerRoutedTo(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerRoutedTo(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver)->remove_PointerRoutedTo(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerWheelChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver)->add_PointerWheelChanged(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerWheelChanged_revoker consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerWheelChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, PointerWheelChanged_revoker>(this, PointerWheelChanged(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserver<D>::PointerWheelChanged(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver)->remove_PointerWheelChanged(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver) consume_Microsoft_UI_Input_Experimental_IExpPointerInputObserverStatics<D>::CreateForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserverStatics)->CreateForInputSite(*(void**)(&inputSite), &result));
        return winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(uint32_t) consume_Microsoft_UI_Input_Experimental_IExpPointerPoint<D>::FrameId() const
    {
        uint32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPoint)->get_FrameId(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Input_Experimental_IExpPointerPoint<D>::IsInContact() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPoint)->get_IsInContact(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Devices::Input::PointerDeviceType) consume_Microsoft_UI_Input_Experimental_IExpPointerPoint<D>::PointerDeviceType() const
    {
        winrt::Windows::Devices::Input::PointerDeviceType value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPoint)->get_PointerDeviceType(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(uint32_t) consume_Microsoft_UI_Input_Experimental_IExpPointerPoint<D>::PointerId() const
    {
        uint32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPoint)->get_PointerId(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) consume_Microsoft_UI_Input_Experimental_IExpPointerPoint<D>::Position() const
    {
        winrt::Windows::Foundation::Point value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPoint)->get_Position(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpPointerPointProperties) consume_Microsoft_UI_Input_Experimental_IExpPointerPoint<D>::Properties() const
    {
        void* value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPoint)->get_Properties(&value));
        return winrt::Microsoft::UI::Input::Experimental::ExpPointerPointProperties{ value, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) consume_Microsoft_UI_Input_Experimental_IExpPointerPoint<D>::RawPosition() const
    {
        winrt::Windows::Foundation::Point value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPoint)->get_RawPosition(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(uint64_t) consume_Microsoft_UI_Input_Experimental_IExpPointerPoint<D>::Timestamp() const
    {
        uint64_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPoint)->get_Timestamp(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Rect) consume_Microsoft_UI_Input_Experimental_IExpPointerPointProperties<D>::ContactRect() const
    {
        winrt::Windows::Foundation::Rect value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPointProperties)->get_ContactRect(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Rect) consume_Microsoft_UI_Input_Experimental_IExpPointerPointProperties<D>::ContactRectRaw() const
    {
        winrt::Windows::Foundation::Rect value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPointProperties)->get_ContactRectRaw(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Input_Experimental_IExpPointerPointProperties<D>::IsBarrelButtonPressed() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPointProperties)->get_IsBarrelButtonPressed(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Input_Experimental_IExpPointerPointProperties<D>::IsCanceled() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPointProperties)->get_IsCanceled(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Input_Experimental_IExpPointerPointProperties<D>::IsEraser() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPointProperties)->get_IsEraser(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Input_Experimental_IExpPointerPointProperties<D>::IsHorizontalMouseWheel() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPointProperties)->get_IsHorizontalMouseWheel(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Input_Experimental_IExpPointerPointProperties<D>::IsInRange() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPointProperties)->get_IsInRange(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Input_Experimental_IExpPointerPointProperties<D>::IsInverted() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPointProperties)->get_IsInverted(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Input_Experimental_IExpPointerPointProperties<D>::IsLeftButtonPressed() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPointProperties)->get_IsLeftButtonPressed(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Input_Experimental_IExpPointerPointProperties<D>::IsMiddleButtonPressed() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPointProperties)->get_IsMiddleButtonPressed(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Input_Experimental_IExpPointerPointProperties<D>::IsPrimary() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPointProperties)->get_IsPrimary(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Input_Experimental_IExpPointerPointProperties<D>::IsRightButtonPressed() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPointProperties)->get_IsRightButtonPressed(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Input_Experimental_IExpPointerPointProperties<D>::IsXButton1Pressed() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPointProperties)->get_IsXButton1Pressed(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Input_Experimental_IExpPointerPointProperties<D>::IsXButton2Pressed() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPointProperties)->get_IsXButton2Pressed(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(int32_t) consume_Microsoft_UI_Input_Experimental_IExpPointerPointProperties<D>::MouseWheelDelta() const
    {
        int32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPointProperties)->get_MouseWheelDelta(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Microsoft_UI_Input_Experimental_IExpPointerPointProperties<D>::Orientation() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPointProperties)->get_Orientation(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::UI::Input::PointerUpdateKind) consume_Microsoft_UI_Input_Experimental_IExpPointerPointProperties<D>::PointerUpdateKind() const
    {
        winrt::Windows::UI::Input::PointerUpdateKind value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPointProperties)->get_PointerUpdateKind(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Microsoft_UI_Input_Experimental_IExpPointerPointProperties<D>::Pressure() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPointProperties)->get_Pressure(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_Microsoft_UI_Input_Experimental_IExpPointerPointProperties<D>::TouchConfidence() const
    {
        bool value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPointProperties)->get_TouchConfidence(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Microsoft_UI_Input_Experimental_IExpPointerPointProperties<D>::Twist() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPointProperties)->get_Twist(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Microsoft_UI_Input_Experimental_IExpPointerPointProperties<D>::XTilt() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPointProperties)->get_XTilt(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(float) consume_Microsoft_UI_Input_Experimental_IExpPointerPointProperties<D>::YTilt() const
    {
        float value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPointProperties)->get_YTilt(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint) consume_Microsoft_UI_Input_Experimental_IExpPointerPointStatics<D>::GetCurrentPoint(uint32_t pointerId) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics)->GetCurrentPoint(pointerId, &result));
        return winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint) consume_Microsoft_UI_Input_Experimental_IExpPointerPointStatics<D>::GetCurrentPointTransformed(uint32_t pointerId, winrt::Windows::UI::Input::IPointerPointTransform const& transform) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics)->GetCurrentPointTransformed(pointerId, *(void**)(&transform), &result));
        return winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint>) consume_Microsoft_UI_Input_Experimental_IExpPointerPointStatics<D>::GetIntermediatePoints(uint32_t pointerId) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics)->GetIntermediatePoints(pointerId, &result));
        return winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint>{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint>) consume_Microsoft_UI_Input_Experimental_IExpPointerPointStatics<D>::GetIntermediatePointsTransformed(uint32_t pointerId, winrt::Windows::UI::Input::IPointerPointTransform const& transform) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics)->GetIntermediatePointsTransformed(pointerId, *(void**)(&transform), &result));
        return winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint>{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Devices::Input::PointerDeviceType) consume_Microsoft_UI_Input_Experimental_IExpRightTappedEventArgs<D>::PointerDeviceType() const
    {
        winrt::Windows::Devices::Input::PointerDeviceType value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpRightTappedEventArgs)->get_PointerDeviceType(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) consume_Microsoft_UI_Input_Experimental_IExpRightTappedEventArgs<D>::Position() const
    {
        winrt::Windows::Foundation::Point value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpRightTappedEventArgs)->get_Position(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Devices::Input::PointerDeviceType) consume_Microsoft_UI_Input_Experimental_IExpTappedEventArgs<D>::PointerDeviceType() const
    {
        winrt::Windows::Devices::Input::PointerDeviceType value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpTappedEventArgs)->get_PointerDeviceType(reinterpret_cast<int32_t*>(&value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) consume_Microsoft_UI_Input_Experimental_IExpTappedEventArgs<D>::Position() const
    {
        winrt::Windows::Foundation::Point value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpTappedEventArgs)->get_Position(put_abi(value)));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(uint32_t) consume_Microsoft_UI_Input_Experimental_IExpTappedEventArgs<D>::TapCount() const
    {
        uint32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpTappedEventArgs)->get_TapCount(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_Microsoft_UI_Input_Experimental_IExpTouchHitTestingProvider<D>::TouchHitTestRequested(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpTouchHitTestingProvider, winrt::Windows::UI::Core::TouchHitTestingEventArgs> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpTouchHitTestingProvider)->add_TouchHitTestRequested(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_Microsoft_UI_Input_Experimental_IExpTouchHitTestingProvider<D>::TouchHitTestRequested_revoker consume_Microsoft_UI_Input_Experimental_IExpTouchHitTestingProvider<D>::TouchHitTestRequested(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpTouchHitTestingProvider, winrt::Windows::UI::Core::TouchHitTestingEventArgs> const& handler) const
    {
        return impl::make_event_revoker<D, TouchHitTestRequested_revoker>(this, TouchHitTestRequested(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_Microsoft_UI_Input_Experimental_IExpTouchHitTestingProvider<D>::TouchHitTestRequested(winrt::event_token const& token) const noexcept
    {
        WINRT_VERIFY_(0, WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpTouchHitTestingProvider)->remove_TouchHitTestRequested(impl::bind_in(token)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::Experimental::ExpTouchHitTestingProvider) consume_Microsoft_UI_Input_Experimental_IExpTouchHitTestingProviderStatics<D>::GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite) const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::Microsoft::UI::Input::Experimental::IExpTouchHitTestingProviderStatics)->GetForInputSite(*(void**)(&inputSite), &result));
        return winrt::Microsoft::UI::Input::Experimental::ExpTouchHitTestingProvider{ result, take_ownership_from_abi };
    }
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpContextMenuKeyEventArgs> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpContextMenuKeyEventArgs>
    {
        int32_t __stdcall get_Handled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().Handled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Handled(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Handled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpCrossSlidingEventArgs> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpCrossSlidingEventArgs>
    {
        int32_t __stdcall get_CrossSlidingState(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Input::CrossSlidingState>(this->shim().CrossSlidingState());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PointerDeviceType(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Devices::Input::PointerDeviceType>(this->shim().PointerDeviceType());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Position(winrt::Windows::Foundation::Point* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Point>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Point>(this->shim().Position());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpDirectManipulation> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpDirectManipulation>
    {
        int32_t __stdcall add_DirectManipulationHitTest(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().DirectManipulationHitTest(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpDirectManipulation, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_DirectManipulationHitTest(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DirectManipulationHitTest(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpDirectManipulationStatics> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpDirectManipulationStatics>
    {
        int32_t __stdcall GetForInputSite(void* inputSite, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpDirectManipulation>(this->shim().GetForInputSite(*reinterpret_cast<winrt::Microsoft::UI::Input::Experimental::ExpInputSite const*>(&inputSite)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpDraggingEventArgs> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpDraggingEventArgs>
    {
        int32_t __stdcall get_DraggingState(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Input::DraggingState>(this->shim().DraggingState());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PointerDeviceType(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Devices::Input::PointerDeviceType>(this->shim().PointerDeviceType());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Position(winrt::Windows::Foundation::Point* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Point>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Point>(this->shim().Position());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpFocusChangedEventArgs> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpFocusChangedEventArgs>
    {
        int32_t __stdcall get_Direction(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpFocusChangedDirection>(this->shim().Direction());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpFocusController> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpFocusController>
    {
        int32_t __stdcall get_HasFocus(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().HasFocus());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall TrySetFocus(bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().TrySetFocus());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall DepartFocus(void* request, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationResult>(this->shim().DepartFocus(*reinterpret_cast<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest const*>(&request)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall add_NavigateFocusRequested(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().NavigateFocusRequested(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpFocusController, winrt::Microsoft::UI::Input::Experimental::ExpNavigateFocusRequestedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_NavigateFocusRequested(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().NavigateFocusRequested(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpFocusControllerStatics> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpFocusControllerStatics>
    {
        int32_t __stdcall GetForInputSite(void* inputSite, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpFocusController>(this->shim().GetForInputSite(*reinterpret_cast<winrt::Microsoft::UI::Input::Experimental::ExpInputSite const*>(&inputSite)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHost> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHost>
    {
        int32_t __stdcall NavigateFocus(void* request, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationResult>(this->shim().NavigateFocus(*reinterpret_cast<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest const*>(&request)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall add_TakeFocusRequested(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().TakeFocusRequested(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationHost, winrt::Microsoft::UI::Input::Experimental::ExpNavigateFocusRequestedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_TakeFocusRequested(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TakeFocusRequested(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHostStatics> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHostStatics>
    {
        int32_t __stdcall GetForInputSite(void* inputSite, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationHost>(this->shim().GetForInputSite(*reinterpret_cast<winrt::Microsoft::UI::Input::Experimental::ExpInputSite const*>(&inputSite)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequest> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequest>
    {
        int32_t __stdcall get_CorrelationId(winrt::guid* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::guid>(this->shim().CorrelationId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_HintRect(winrt::Windows::Foundation::Rect* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Rect>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Rect>(this->shim().HintRect());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Reason(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason>(this->shim().Reason());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequestStatics> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequestStatics>
    {
        int32_t __stdcall CreateFocusNavigationRequestReasonAndHintRect(int32_t reason, winrt::Windows::Foundation::Rect hintRect, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest>(this->shim().CreateFocusNavigationRequestReasonAndHintRect(*reinterpret_cast<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason const*>(&reason), *reinterpret_cast<winrt::Windows::Foundation::Rect const*>(&hintRect)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateFocusNavigationRequestReasonHintRectAndId(int32_t reason, winrt::Windows::Foundation::Rect hintRect, winrt::guid correlationId, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest>(this->shim().CreateFocusNavigationRequestReasonHintRectAndId(*reinterpret_cast<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason const*>(&reason), *reinterpret_cast<winrt::Windows::Foundation::Rect const*>(&hintRect), *reinterpret_cast<winrt::guid const*>(&correlationId)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CreateFocusNavigationRequestWithReason(int32_t reason, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest>(this->shim().CreateFocusNavigationRequestWithReason(*reinterpret_cast<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason const*>(&reason)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationResult> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationResult>
    {
        int32_t __stdcall get_WasMoved(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().WasMoved());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_WasMoved(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().WasMoved(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpFocusObserver> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpFocusObserver>
    {
        int32_t __stdcall get_HasFocus(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().HasFocus());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall add_GotFocus(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().GotFocus(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpFocusObserver, winrt::Microsoft::UI::Input::Experimental::ExpFocusChangedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_GotFocus(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GotFocus(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_LostFocus(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().LostFocus(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpFocusObserver, winrt::Microsoft::UI::Input::Experimental::ExpFocusChangedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_LostFocus(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().LostFocus(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpFocusObserverStatics> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpFocusObserverStatics>
    {
        int32_t __stdcall CreateForInputSite(void* inputSite, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpFocusObserver>(this->shim().CreateForInputSite(*reinterpret_cast<winrt::Microsoft::UI::Input::Experimental::ExpInputSite const*>(&inputSite)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer>
    {
        int32_t __stdcall get_AutoProcessInertia(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().AutoProcessInertia());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_AutoProcessInertia(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AutoProcessInertia(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_CrossSlideExact(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().CrossSlideExact());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_CrossSlideExact(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CrossSlideExact(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_CrossSlideHorizontally(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().CrossSlideHorizontally());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_CrossSlideHorizontally(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CrossSlideHorizontally(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_CrossSlideThresholds(struct struct_Windows_UI_Input_CrossSlideThresholds* value) noexcept final try
        {
            zero_abi<winrt::Windows::UI::Input::CrossSlideThresholds>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Input::CrossSlideThresholds>(this->shim().CrossSlideThresholds());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_CrossSlideThresholds(struct struct_Windows_UI_Input_CrossSlideThresholds value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CrossSlideThresholds(*reinterpret_cast<winrt::Windows::UI::Input::CrossSlideThresholds const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_GestureSettings(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Input::GestureSettings>(this->shim().GestureSettings());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_GestureSettings(uint32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GestureSettings(*reinterpret_cast<winrt::Windows::UI::Input::GestureSettings const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsActive(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsActive());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsInertial(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsInertial());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PivotCenter(winrt::Windows::Foundation::Point* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Point>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Point>(this->shim().PivotCenter());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_PivotCenter(winrt::Windows::Foundation::Point value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PivotCenter(*reinterpret_cast<winrt::Windows::Foundation::Point const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PivotRadius(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().PivotRadius());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_PivotRadius(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PivotRadius(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_InertiaExpansionDeceleration(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().InertiaExpansionDeceleration());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_InertiaExpansionDeceleration(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().InertiaExpansionDeceleration(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_InertiaExpansion(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().InertiaExpansion());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_InertiaExpansion(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().InertiaExpansion(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_InertiaRotationAngle(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().InertiaRotationAngle());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_InertiaRotationAngle(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().InertiaRotationAngle(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_InertiaRotationDeceleration(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().InertiaRotationDeceleration());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_InertiaRotationDeceleration(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().InertiaRotationDeceleration(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_InertiaTranslationDeceleration(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().InertiaTranslationDeceleration());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_InertiaTranslationDeceleration(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().InertiaTranslationDeceleration(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_InertiaTranslationDisplacement(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().InertiaTranslationDisplacement());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_InertiaTranslationDisplacement(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().InertiaTranslationDisplacement(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ManipulationExact(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().ManipulationExact());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ManipulationExact(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ManipulationExact(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MouseWheelParameters(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpMouseWheelParameters>(this->shim().MouseWheelParameters());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ShowGestureFeedback(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().ShowGestureFeedback());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ShowGestureFeedback(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ShowGestureFeedback(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CanBeDoubleTap(void* value, bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().CanBeDoubleTap(*reinterpret_cast<winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint const*>(&value)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall CompleteGesture() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CompleteGesture();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ProcessDownEvent(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ProcessDownEvent(*reinterpret_cast<winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ProcessMoveEvents(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ProcessMoveEvents(*reinterpret_cast<winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint> const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ProcessMouseWheelEvent(void* value, bool isShiftKeyDown, bool isControlKeyDown) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ProcessMouseWheelEvent(*reinterpret_cast<winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint const*>(&value), isShiftKeyDown, isControlKeyDown);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ProcessInertia() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ProcessInertia();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ProcessUpEvent(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ProcessUpEvent(*reinterpret_cast<winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall add_Tapped(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().Tapped(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpTappedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_Tapped(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Tapped(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_RightTapped(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().RightTapped(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpRightTappedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_RightTapped(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RightTapped(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_Holding(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().Holding(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpHoldingEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_Holding(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Holding(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_Dragging(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().Dragging(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpDraggingEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_Dragging(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Dragging(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_ManipulationStarted(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().ManipulationStarted(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpManipulationStartedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_ManipulationStarted(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ManipulationStarted(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_ManipulationUpdated(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().ManipulationUpdated(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpManipulationUpdatedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_ManipulationUpdated(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ManipulationUpdated(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_ManipulationInertiaStarting(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().ManipulationInertiaStarting(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpManipulationInertiaStartingEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_ManipulationInertiaStarting(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ManipulationInertiaStarting(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_ManipulationCompleted(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().ManipulationCompleted(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpManipulationCompletedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_ManipulationCompleted(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ManipulationCompleted(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_CrossSliding(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().CrossSliding(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer, winrt::Microsoft::UI::Input::Experimental::ExpCrossSlidingEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_CrossSliding(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CrossSliding(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpHoldingEventArgs> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpHoldingEventArgs>
    {
        int32_t __stdcall get_HoldingState(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Input::HoldingState>(this->shim().HoldingState());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PointerDeviceType(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Devices::Input::PointerDeviceType>(this->shim().PointerDeviceType());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Position(winrt::Windows::Foundation::Point* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Point>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Point>(this->shim().Position());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpIndependentPointerInputObserver> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpIndependentPointerInputObserver>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpIndependentPointerInputObserverStatics> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpIndependentPointerInputObserverStatics>
    {
        int32_t __stdcall CreateForVisual(void* visual, uint32_t deviceTypes, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpIndependentPointerInputObserver>(this->shim().CreateForVisual(*reinterpret_cast<winrt::Microsoft::UI::Composition::Visual const*>(&visual), *reinterpret_cast<winrt::Windows::UI::Core::CoreInputDeviceTypes const*>(&deviceTypes)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpInputActivationListener> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpInputActivationListener>
    {
        int32_t __stdcall get_State(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpInputActivationState>(this->shim().State());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall add_InputActivationChanged(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().InputActivationChanged(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpInputActivationListener, winrt::Microsoft::UI::Input::Experimental::ExpInputActivationListenerActivationChangedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_InputActivationChanged(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().InputActivationChanged(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpInputActivationListenerActivationChangedEventArgs> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpInputActivationListenerActivationChangedEventArgs>
    {
        int32_t __stdcall get_State(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpInputActivationState>(this->shim().State());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpInputActivationListenerPartnerStatics> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpInputActivationListenerPartnerStatics>
    {
        int32_t __stdcall GetForInputSite(void* inputSite, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::IInspectable>(this->shim().GetForInputSite(*reinterpret_cast<winrt::Microsoft::UI::Input::Experimental::ExpInputSite const*>(&inputSite)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpInputObject> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpInputObject>
    {
        int32_t __stdcall get_DispatcherQueue(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::Dispatching::DispatcherQueue>(this->shim().DispatcherQueue());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_InputSite(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpInputSite>(this->shim().InputSite());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpInputObjectFactory> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpInputObjectFactory>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpInputSite> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpInputSite>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput>
    {
        int32_t __stdcall get_CurrentKeyEventDeviceId(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<hstring>(this->shim().CurrentKeyEventDeviceId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetCurrentKeyState(int32_t virtualKey, uint32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::UI::Core::CoreVirtualKeyStates>(this->shim().GetCurrentKeyState(*reinterpret_cast<winrt::Windows::System::VirtualKey const*>(&virtualKey)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetKeyState(int32_t virtualKey, uint32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::UI::Core::CoreVirtualKeyStates>(this->shim().GetKeyState(*reinterpret_cast<winrt::Windows::System::VirtualKey const*>(&virtualKey)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall add_AcceleratorKeyActivated(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().AcceleratorKeyActivated(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput, winrt::Windows::UI::Core::AcceleratorKeyEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_AcceleratorKeyActivated(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AcceleratorKeyActivated(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_CharacterReceived(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().CharacterReceived(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput, winrt::Windows::UI::Core::CharacterReceivedEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_CharacterReceived(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CharacterReceived(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_KeyDown(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().KeyDown(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput, winrt::Windows::UI::Core::KeyEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_KeyDown(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().KeyDown(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_KeyUp(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().KeyUp(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput, winrt::Windows::UI::Core::KeyEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_KeyUp(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().KeyUp(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_SysKeyDown(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().SysKeyDown(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput, winrt::Windows::UI::Core::KeyEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_SysKeyDown(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SysKeyDown(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_SysKeyUp(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().SysKeyUp(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput, winrt::Windows::UI::Core::KeyEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_SysKeyUp(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SysKeyUp(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_ContextMenuKey(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().ContextMenuKey(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput, winrt::Microsoft::UI::Input::Experimental::ExpContextMenuKeyEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_ContextMenuKey(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ContextMenuKey(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInputStatics> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInputStatics>
    {
        int32_t __stdcall GetForInputSite(void* inputSite, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput>(this->shim().GetForInputSite(*reinterpret_cast<winrt::Microsoft::UI::Input::Experimental::ExpInputSite const*>(&inputSite)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpManipulationCompletedEventArgs> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpManipulationCompletedEventArgs>
    {
        int32_t __stdcall get_Cumulative(struct struct_Windows_UI_Input_ManipulationDelta* value) noexcept final try
        {
            zero_abi<winrt::Windows::UI::Input::ManipulationDelta>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Input::ManipulationDelta>(this->shim().Cumulative());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PointerDeviceType(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Devices::Input::PointerDeviceType>(this->shim().PointerDeviceType());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Position(winrt::Windows::Foundation::Point* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Point>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Point>(this->shim().Position());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Velocities(struct struct_Windows_UI_Input_ManipulationVelocities* value) noexcept final try
        {
            zero_abi<winrt::Windows::UI::Input::ManipulationVelocities>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Input::ManipulationVelocities>(this->shim().Velocities());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpManipulationInertiaStartingEventArgs> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpManipulationInertiaStartingEventArgs>
    {
        int32_t __stdcall get_Cumulative(struct struct_Windows_UI_Input_ManipulationDelta* value) noexcept final try
        {
            zero_abi<winrt::Windows::UI::Input::ManipulationDelta>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Input::ManipulationDelta>(this->shim().Cumulative());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Delta(struct struct_Windows_UI_Input_ManipulationDelta* value) noexcept final try
        {
            zero_abi<winrt::Windows::UI::Input::ManipulationDelta>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Input::ManipulationDelta>(this->shim().Delta());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PointerDeviceType(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Devices::Input::PointerDeviceType>(this->shim().PointerDeviceType());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Position(winrt::Windows::Foundation::Point* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Point>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Point>(this->shim().Position());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Velocities(struct struct_Windows_UI_Input_ManipulationVelocities* value) noexcept final try
        {
            zero_abi<winrt::Windows::UI::Input::ManipulationVelocities>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Input::ManipulationVelocities>(this->shim().Velocities());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpManipulationStartedEventArgs> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpManipulationStartedEventArgs>
    {
        int32_t __stdcall get_Cumulative(struct struct_Windows_UI_Input_ManipulationDelta* value) noexcept final try
        {
            zero_abi<winrt::Windows::UI::Input::ManipulationDelta>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Input::ManipulationDelta>(this->shim().Cumulative());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PointerDeviceType(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Devices::Input::PointerDeviceType>(this->shim().PointerDeviceType());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Position(winrt::Windows::Foundation::Point* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Point>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Point>(this->shim().Position());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpManipulationUpdatedEventArgs> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpManipulationUpdatedEventArgs>
    {
        int32_t __stdcall get_Cumulative(struct struct_Windows_UI_Input_ManipulationDelta* value) noexcept final try
        {
            zero_abi<winrt::Windows::UI::Input::ManipulationDelta>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Input::ManipulationDelta>(this->shim().Cumulative());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Delta(struct struct_Windows_UI_Input_ManipulationDelta* value) noexcept final try
        {
            zero_abi<winrt::Windows::UI::Input::ManipulationDelta>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Input::ManipulationDelta>(this->shim().Delta());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PointerDeviceType(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Devices::Input::PointerDeviceType>(this->shim().PointerDeviceType());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Position(winrt::Windows::Foundation::Point* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Point>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Point>(this->shim().Position());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Velocities(struct struct_Windows_UI_Input_ManipulationVelocities* value) noexcept final try
        {
            zero_abi<winrt::Windows::UI::Input::ManipulationVelocities>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Input::ManipulationVelocities>(this->shim().Velocities());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpMouseCapture> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpMouseCapture>
    {
        int32_t __stdcall get_HasCapture(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().HasCapture());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall TryReleaseCapture(bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().TryReleaseCapture());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall TrySetCapture(bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().TrySetCapture());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpMouseCaptureStatics> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpMouseCaptureStatics>
    {
        int32_t __stdcall GetForInputSite(void* inputSite, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpMouseCapture>(this->shim().GetForInputSite(*reinterpret_cast<winrt::Microsoft::UI::Input::Experimental::ExpInputSite const*>(&inputSite)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpMouseWheelParameters> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpMouseWheelParameters>
    {
        int32_t __stdcall get_CharTranslation(winrt::Windows::Foundation::Point* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Point>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Point>(this->shim().CharTranslation());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_CharTranslation(winrt::Windows::Foundation::Point value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CharTranslation(*reinterpret_cast<winrt::Windows::Foundation::Point const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DeltaScale(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().DeltaScale());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_DeltaScale(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DeltaScale(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DeltaRotationAngle(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().DeltaRotationAngle());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_DeltaRotationAngle(float value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DeltaRotationAngle(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PageTranslation(winrt::Windows::Foundation::Point* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Point>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Point>(this->shim().PageTranslation());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_PageTranslation(winrt::Windows::Foundation::Point value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PageTranslation(*reinterpret_cast<winrt::Windows::Foundation::Point const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpNavigateFocusRequestedEventArgs> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpNavigateFocusRequestedEventArgs>
    {
        int32_t __stdcall get_Request(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest>(this->shim().Request());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_WasMoved(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().WasMoved());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_WasMoved(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().WasMoved(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpPointerCursorController> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpPointerCursorController>
    {
        int32_t __stdcall get_Cursor(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Core::CoreCursor>(this->shim().Cursor());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Cursor(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Cursor(*reinterpret_cast<winrt::Windows::UI::Core::CoreCursor const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Position(winrt::Windows::Foundation::Point* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Point>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Point>(this->shim().Position());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpPointerCursorControllerStatics> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpPointerCursorControllerStatics>
    {
        int32_t __stdcall GetForInputSite(void* inputSite, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpPointerCursorController>(this->shim().GetForInputSite(*reinterpret_cast<winrt::Microsoft::UI::Input::Experimental::ExpInputSite const*>(&inputSite)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpPointerEventArgs> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpPointerEventArgs>
    {
        int32_t __stdcall get_CurrentPoint(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint>(this->shim().CurrentPoint());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Handled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().Handled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Handled(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Handled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_KeyModifiers(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::System::VirtualKeyModifiers>(this->shim().KeyModifiers());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetIntermediatePoints(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint>>(this->shim().GetIntermediatePoints());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver>
    {
        int32_t __stdcall add_PointerCaptureLost(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().PointerCaptureLost(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_PointerCaptureLost(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PointerCaptureLost(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_PointerEntered(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().PointerEntered(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_PointerEntered(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PointerEntered(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_PointerExited(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().PointerExited(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_PointerExited(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PointerExited(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_PointerMoved(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().PointerMoved(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_PointerMoved(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PointerMoved(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_PointerPressed(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().PointerPressed(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_PointerPressed(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PointerPressed(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_PointerReleased(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().PointerReleased(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_PointerReleased(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PointerReleased(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_PointerRoutedAway(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().PointerRoutedAway(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_PointerRoutedAway(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PointerRoutedAway(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_PointerRoutedReleased(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().PointerRoutedReleased(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_PointerRoutedReleased(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PointerRoutedReleased(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_PointerRoutedTo(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().PointerRoutedTo(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_PointerRoutedTo(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PointerRoutedTo(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
        int32_t __stdcall add_PointerWheelChanged(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().PointerWheelChanged(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver, winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_PointerWheelChanged(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PointerWheelChanged(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserverFactory> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserverFactory>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserverStatics> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserverStatics>
    {
        int32_t __stdcall CreateForInputSite(void* inputSite, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver>(this->shim().CreateForInputSite(*reinterpret_cast<winrt::Microsoft::UI::Input::Experimental::ExpInputSite const*>(&inputSite)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpPointerPoint> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpPointerPoint>
    {
        int32_t __stdcall get_FrameId(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().FrameId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsInContact(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsInContact());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PointerDeviceType(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Devices::Input::PointerDeviceType>(this->shim().PointerDeviceType());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PointerId(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().PointerId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Position(winrt::Windows::Foundation::Point* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Point>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Point>(this->shim().Position());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Properties(void** value) noexcept final try
        {
            clear_abi(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpPointerPointProperties>(this->shim().Properties());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_RawPosition(winrt::Windows::Foundation::Point* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Point>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Point>(this->shim().RawPosition());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Timestamp(uint64_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint64_t>(this->shim().Timestamp());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpPointerPointProperties> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpPointerPointProperties>
    {
        int32_t __stdcall get_ContactRect(winrt::Windows::Foundation::Rect* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Rect>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Rect>(this->shim().ContactRect());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ContactRectRaw(winrt::Windows::Foundation::Rect* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Rect>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Rect>(this->shim().ContactRectRaw());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsBarrelButtonPressed(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsBarrelButtonPressed());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsCanceled(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsCanceled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsEraser(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsEraser());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsHorizontalMouseWheel(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsHorizontalMouseWheel());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsInRange(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsInRange());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsInverted(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsInverted());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsLeftButtonPressed(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsLeftButtonPressed());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsMiddleButtonPressed(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsMiddleButtonPressed());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsPrimary(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsPrimary());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsRightButtonPressed(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsRightButtonPressed());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsXButton1Pressed(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsXButton1Pressed());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_IsXButton2Pressed(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().IsXButton2Pressed());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_MouseWheelDelta(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().MouseWheelDelta());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Orientation(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Orientation());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PointerUpdateKind(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::UI::Input::PointerUpdateKind>(this->shim().PointerUpdateKind());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Pressure(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Pressure());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_TouchConfidence(bool* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<bool>(this->shim().TouchConfidence());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Twist(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().Twist());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_XTilt(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().XTilt());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_YTilt(float* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<float>(this->shim().YTilt());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics>
    {
        int32_t __stdcall GetCurrentPoint(uint32_t pointerId, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint>(this->shim().GetCurrentPoint(pointerId));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetCurrentPointTransformed(uint32_t pointerId, void* transform, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint>(this->shim().GetCurrentPointTransformed(pointerId, *reinterpret_cast<winrt::Windows::UI::Input::IPointerPointTransform const*>(&transform)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetIntermediatePoints(uint32_t pointerId, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint>>(this->shim().GetIntermediatePoints(pointerId));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetIntermediatePointsTransformed(uint32_t pointerId, void* transform, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint>>(this->shim().GetIntermediatePointsTransformed(pointerId, *reinterpret_cast<winrt::Windows::UI::Input::IPointerPointTransform const*>(&transform)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpRightTappedEventArgs> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpRightTappedEventArgs>
    {
        int32_t __stdcall get_PointerDeviceType(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Devices::Input::PointerDeviceType>(this->shim().PointerDeviceType());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Position(winrt::Windows::Foundation::Point* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Point>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Point>(this->shim().Position());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpTappedEventArgs> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpTappedEventArgs>
    {
        int32_t __stdcall get_PointerDeviceType(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Devices::Input::PointerDeviceType>(this->shim().PointerDeviceType());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Position(winrt::Windows::Foundation::Point* value) noexcept final try
        {
            zero_abi<winrt::Windows::Foundation::Point>(value);
            typename D::abi_guard guard(this->shim());
            *value = detach_from<winrt::Windows::Foundation::Point>(this->shim().Position());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_TapCount(uint32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<uint32_t>(this->shim().TapCount());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpTouchHitTestingProvider> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpTouchHitTestingProvider>
    {
        int32_t __stdcall add_TouchHitTestRequested(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().TouchHitTestRequested(*reinterpret_cast<winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::Experimental::ExpTouchHitTestingProvider, winrt::Windows::UI::Core::TouchHitTestingEventArgs> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_TouchHitTestRequested(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TouchHitTestRequested(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::Microsoft::UI::Input::Experimental::IExpTouchHitTestingProviderStatics> : produce_base<D, winrt::Microsoft::UI::Input::Experimental::IExpTouchHitTestingProviderStatics>
    {
        int32_t __stdcall GetForInputSite(void* inputSite, void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<winrt::Microsoft::UI::Input::Experimental::ExpTouchHitTestingProvider>(this->shim().GetForInputSite(*reinterpret_cast<winrt::Microsoft::UI::Input::Experimental::ExpInputSite const*>(&inputSite)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Input::Experimental
{
    inline auto ExpDirectManipulation::GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite)
    {
        return impl::call_factory<ExpDirectManipulation, IExpDirectManipulationStatics>([&](IExpDirectManipulationStatics const& f) { return f.GetForInputSite(inputSite); });
    }
    inline auto ExpFocusController::GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite)
    {
        return impl::call_factory<ExpFocusController, IExpFocusControllerStatics>([&](IExpFocusControllerStatics const& f) { return f.GetForInputSite(inputSite); });
    }
    inline auto ExpFocusNavigationHost::GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite)
    {
        return impl::call_factory<ExpFocusNavigationHost, IExpFocusNavigationHostStatics>([&](IExpFocusNavigationHostStatics const& f) { return f.GetForInputSite(inputSite); });
    }
    inline auto ExpFocusNavigationRequest::CreateFocusNavigationRequestReasonAndHintRect(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason const& reason, winrt::Windows::Foundation::Rect const& hintRect)
    {
        return impl::call_factory<ExpFocusNavigationRequest, IExpFocusNavigationRequestStatics>([&](IExpFocusNavigationRequestStatics const& f) { return f.CreateFocusNavigationRequestReasonAndHintRect(reason, hintRect); });
    }
    inline auto ExpFocusNavigationRequest::CreateFocusNavigationRequestReasonHintRectAndId(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason const& reason, winrt::Windows::Foundation::Rect const& hintRect, winrt::guid const& correlationId)
    {
        return impl::call_factory<ExpFocusNavigationRequest, IExpFocusNavigationRequestStatics>([&](IExpFocusNavigationRequestStatics const& f) { return f.CreateFocusNavigationRequestReasonHintRectAndId(reason, hintRect, correlationId); });
    }
    inline auto ExpFocusNavigationRequest::CreateFocusNavigationRequestWithReason(winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationReason const& reason)
    {
        return impl::call_factory<ExpFocusNavigationRequest, IExpFocusNavigationRequestStatics>([&](IExpFocusNavigationRequestStatics const& f) { return f.CreateFocusNavigationRequestWithReason(reason); });
    }
    inline auto ExpFocusObserver::CreateForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite)
    {
        return impl::call_factory<ExpFocusObserver, IExpFocusObserverStatics>([&](IExpFocusObserverStatics const& f) { return f.CreateForInputSite(inputSite); });
    }
    inline ExpGestureRecognizer::ExpGestureRecognizer() :
        ExpGestureRecognizer(impl::call_factory_cast<ExpGestureRecognizer(*)(winrt::Windows::Foundation::IActivationFactory const&), ExpGestureRecognizer>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<ExpGestureRecognizer>(); }))
    {
    }
    inline auto ExpIndependentPointerInputObserver::CreateForVisual(winrt::Microsoft::UI::Composition::Visual const& visual, winrt::Windows::UI::Core::CoreInputDeviceTypes const& deviceTypes)
    {
        return impl::call_factory<ExpIndependentPointerInputObserver, IExpIndependentPointerInputObserverStatics>([&](IExpIndependentPointerInputObserverStatics const& f) { return f.CreateForVisual(visual, deviceTypes); });
    }
    inline auto ExpInputActivationListenerPartner::GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite)
    {
        return impl::call_factory<ExpInputActivationListenerPartner, IExpInputActivationListenerPartnerStatics>([&](IExpInputActivationListenerPartnerStatics const& f) { return f.GetForInputSite(inputSite); });
    }
    inline auto ExpKeyboardInput::GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite)
    {
        return impl::call_factory<ExpKeyboardInput, IExpKeyboardInputStatics>([&](IExpKeyboardInputStatics const& f) { return f.GetForInputSite(inputSite); });
    }
    inline auto ExpMouseCapture::GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite)
    {
        return impl::call_factory<ExpMouseCapture, IExpMouseCaptureStatics>([&](IExpMouseCaptureStatics const& f) { return f.GetForInputSite(inputSite); });
    }
    inline auto ExpPointerCursorController::GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite)
    {
        return impl::call_factory<ExpPointerCursorController, IExpPointerCursorControllerStatics>([&](IExpPointerCursorControllerStatics const& f) { return f.GetForInputSite(inputSite); });
    }
    inline auto ExpPointerInputObserver::CreateForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite)
    {
        return impl::call_factory<ExpPointerInputObserver, IExpPointerInputObserverStatics>([&](IExpPointerInputObserverStatics const& f) { return f.CreateForInputSite(inputSite); });
    }
    inline auto ExpPointerPoint::GetCurrentPoint(uint32_t pointerId)
    {
        return impl::call_factory<ExpPointerPoint, IExpPointerPointStatics>([&](IExpPointerPointStatics const& f) { return f.GetCurrentPoint(pointerId); });
    }
    inline auto ExpPointerPoint::GetCurrentPointTransformed(uint32_t pointerId, winrt::Windows::UI::Input::IPointerPointTransform const& transform)
    {
        return impl::call_factory<ExpPointerPoint, IExpPointerPointStatics>([&](IExpPointerPointStatics const& f) { return f.GetCurrentPointTransformed(pointerId, transform); });
    }
    inline auto ExpPointerPoint::GetIntermediatePoints(uint32_t pointerId)
    {
        return impl::call_factory<ExpPointerPoint, IExpPointerPointStatics>([&](IExpPointerPointStatics const& f) { return f.GetIntermediatePoints(pointerId); });
    }
    inline auto ExpPointerPoint::GetIntermediatePointsTransformed(uint32_t pointerId, winrt::Windows::UI::Input::IPointerPointTransform const& transform)
    {
        return impl::call_factory<ExpPointerPoint, IExpPointerPointStatics>([&](IExpPointerPointStatics const& f) { return f.GetIntermediatePointsTransformed(pointerId, transform); });
    }
    inline auto ExpTouchHitTestingProvider::GetForInputSite(winrt::Microsoft::UI::Input::Experimental::ExpInputSite const& inputSite)
    {
        return impl::call_factory<ExpTouchHitTestingProvider, IExpTouchHitTestingProviderStatics>([&](IExpTouchHitTestingProviderStatics const& f) { return f.GetForInputSite(inputSite); });
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpContextMenuKeyEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpCrossSlidingEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpDirectManipulation> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpDirectManipulationStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpDraggingEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpFocusChangedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpFocusController> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpFocusControllerStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHost> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationHostStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequest> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationRequestStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpFocusNavigationResult> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpFocusObserver> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpFocusObserverStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpGestureRecognizer> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpHoldingEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpIndependentPointerInputObserver> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpIndependentPointerInputObserverStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpInputActivationListener> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpInputActivationListenerActivationChangedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpInputActivationListenerPartnerStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpInputObject> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpInputObjectFactory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpInputSite> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInput> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpKeyboardInputStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpManipulationCompletedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpManipulationInertiaStartingEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpManipulationStartedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpManipulationUpdatedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpMouseCapture> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpMouseCaptureStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpMouseWheelParameters> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpNavigateFocusRequestedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpPointerCursorController> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpPointerCursorControllerStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpPointerEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserver> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserverFactory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpPointerInputObserverStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpPointerPoint> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpPointerPointProperties> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpPointerPointStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpRightTappedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpTappedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpTouchHitTestingProvider> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::IExpTouchHitTestingProviderStatics> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpContextMenuKeyEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpCrossSlidingEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpDirectManipulation> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpDraggingEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpFocusChangedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpFocusController> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationHost> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationRequest> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpFocusNavigationResult> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpFocusObserver> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpGestureRecognizer> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpHoldingEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpIndependentPointerInputObserver> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpInputActivationListener> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpInputActivationListenerActivationChangedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpInputActivationListenerPartner> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpInputObject> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpInputSite> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpKeyboardInput> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpManipulationCompletedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpManipulationInertiaStartingEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpManipulationStartedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpManipulationUpdatedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpMouseCapture> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpMouseWheelParameters> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpNavigateFocusRequestedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpPointerCursorController> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpPointerEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpPointerInputObserver> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpPointerPoint> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpPointerPointProperties> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpRightTappedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpTappedEventArgs> : winrt::impl::hash_base {};
    template<> struct hash<winrt::Microsoft::UI::Input::Experimental::ExpTouchHitTestingProvider> : winrt::impl::hash_base {};
#endif
}
#endif
